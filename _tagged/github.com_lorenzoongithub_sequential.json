{
	"_id": "14415667",
	"site": "https://github.com/lorenzoongithub/sequential",
	"title": " Sequential â€“ it's like microblogging JavaScript code",
	"author": "lorenzosnap",
	"date": "2017-06-13T13:06:44.285Z",
	"tags": {
		"categories": [
			"opensource",
			"javascript",
			"interpreters",
			"parser",
			"html5",
			"gist"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md does do?sequential shows javascript code executionvar =5/4;++;console.log(); 2.25console.log(*2); 4.5live example is for ? purpose sequential is provide environment show javascript code execution a browser.sequential gives javascript authors means write most concise most natural (.e. sequential) script present javascript .a typical piece consists all some those parts: comment describing the code is the load function access external javascript library (commonly relying cdn services rawgit, cdnjs, jsdelivr, unpkg others)javascript code set use case.console.log calls display outcome. does compare other code playgrounds such codepen jsfiddle ?those are bigger beasts sequential: fully fledged solutions covering aspects web development (html, css, javascript).instead, sequential focuses on javascript execution without involving ( mush possible) dom object.sequential records metadata, such the and platform where snippet was executed. a sentence: sequential is executing code create page, is creating page show code execution. architecture.sequential is complete client side solution, meaning everything is running the browser. back-end (server) is responsible serve static resources (html, css, javascript images) are three main web pages: editor.html, engine.html render.htmldata flows one page another inside url. example:/editor.html?{\"code\":\"console.log('hello world');\"}data is encoded json using native encodeuricomponent/decodeuricomponent functions giving url cryptic .engine.html is core sequential.'s responsible parsing snippet code executing before calling render.html receives input { \"code\" : string } a successful execution, engine.html changes address (location.replace) to call 'render.html' the result the execution{ \"platform\":string // description the platform where code is executed \"timestamp\":string // browser's timestamp iso 8601 format \"statements\":string[] // array statements (including comments) was executed. \"logs\": { number: [...], number: []} // logs the given line. \"error\": number // (optional) line number where error occurs. \"errormessage\": string // (optional) error message \"timeout\": number // (optional) line number the statement // was executed due a out.} here is example:engine.html?{ \"code\": \"var =0; ++; console.log();console.log(*100);\" }render.html? { statements : [\"var =0;\", \"++;\",\"console.log();\",\"console.log(*100);\"], logs : { 2 : \"1\", 3 : \"100\" }, error : undefined, errormessage : undefined, timeout : undefined, timestamp : \"2017-05-23t14:15:02.844z\" platform : \"firefox 42.0 32-bit windows 10 64-bit\"}rules:\"statements\" is mandatory object. each statement ( the statements array) must non-null. array be empty.\"logs\" is mandatory object. keys must numbers between 0 statements.length-1error is optional. present must a number between 0 statements.length-1errormessage is optional. is present iff error is present.timeout is optional. present must a number between 0 statements.length-1 error is present timeout is (and vice versa). error is present error >= max(keys logs) ( other words: are logs following error since remaining statements are executed) timeout is present timeout > max(keys logs) ( other words: are logs following timeout since remaining statements are executed) a non-successful execution (intended inability parse code) 'render.html' is called render.html?{ syntaxerror: string code: string timestamp : string, platform : string}finally, engine.html ( its search url) is given invalid json a valid json which code be retrieved simply stops writes error message.design considerations:sequential does eval code its entirety.instead, breaks code statements are executed at time sequentially. the output returned console.log is captured.intent: reduces size the response. makes tool opinionated ( in good ) imposing strict (yet elegant) to write sequential javascript.fail fast. an error occurs sequential doesn't continue.intent: am opinionated again: assume if error happens is need go further.sandboxing. sandboxing javascript code execution is difficult. is achieved isolating execution its own page (engine.html) by showing result a different page (render.html)roadmap's misty but those are few things 'd to :ability easily embed external site (e.g. iframe , embed.ly, script )ability compare/diff executions (.e. highlight differences between browsers)better simpler (more minimal) uibetter encoding/decoding urlissuesreport issue using github use notifications track progress them.contributing to hack this project? kind contribution is welcome! am particularly interested any javascript snippet might to share.license project is licensed under mit license."
}