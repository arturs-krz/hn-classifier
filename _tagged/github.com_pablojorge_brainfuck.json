{
	"_id": "14463879",
	"site": "https://github.com/pablojorge/brainfuck",
	"title": "Brainfuck Experiments",
	"author": "enedil",
	"date": "2017-06-13T13:55:01.888Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"brainfuck",
			"javascript",
			"python",
			"html",
			"assembly",
			"haskell",
			"other"
		]
	},
	"content": "readme.md brainfuck experiments project contains several interpreters the brainfuck language. currently, is 's available:python/brainfuck.py: interpreter pythonpython/brainfuck-simple.py: faster version the python interpreterpython/brainfuck-rpython.py: rpython-compatible version the python interpreterc/brainfuck.c: interpreter chaskell/brainfuck.hs: interpreter haskellhaskell/bf2c.hs: translator brainfuck c haskellasm/brainfuck.s: interpreter assembler x86_64javascript/brainfuck.js: interpreter javascript (live version here)/brainfuck.: interpreter golua/brainfuck.lua: interpreter luais includes series sample programs (further contributions welcome):hello.bf: simple hello world! programprimes.bf: prime number generator. prompts number generates the primes 1 to number.rot13.bf: applies rot13 its inputfibonacci.bf: fibonacci number generator.mandelbrot.bf: mandelbrot set generator (taken http://esoteric.sange.fi/brainfuck/bf-source/prog/mandelbrot.b)sierpinski.bf: sierpinsky triangle generator (taken the spanish wikipedia article brainfuck)cat.bf: emulates \"cat\" program.cat2.bf: alternative \"cat\" implementation.tolower.bf: prints lower case equivalent its input, it's so smart since doesn't check the original case whether 's letter not.666.bf: prints 666random.bf: pseudo random number generatorwc.bf: word counter ( the standard unix utility)dbfi.bf: brainfuck interpreter brainfuckdbf2c.bf: brainfuck c translatornumwarp.bf: displays numbers stdin verticallyatoi.bf: converts strings integersbizzfuzz.bf: brainfuck implementation the fizzbuzz challengesystem support programs were tried ubuntu 12.04 mac os x 10.8, except the assembler interpreter only works the mac os x assembler.interpreterspythonusing python interpreter run \"helloworld\" program found the wikipedia article brainfuck:$ cd python$ cat << eof | python brainfuck.py > ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.> eofhello world!crunning sierpinsky triangle generator:$ cd c$ brainfuckcc brainfuck.c -o brainfuck$ ./brainfuck ../programs/sierpinski.bf * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * haskell use haskell interpreter:$ cd haskell$ runhaskell brainfuck.hs ../programs/hello.bfhello world!brainfuck c translatorrunning same program, the version translated c:$ cd haskell$ ../programs/sierpinski.crunhaskell bf2c.hs < ../programs/sierpinski.bf | indent > sierpinski.c$ sierpinskicc sierpinski.c -o sierpinski$ ./sierpinski[...]assemblerrunning primes generator the assembler interpreter:$ cd asm$ as -arch x86_64 brainfuck.s -o brainfuck.old -e _main -arch x86_64 -lc brainfuck.o -o brainfuck ld: warning: -macosx_version_min specified, assuming 10.6rm brainfuck.o$ ./brainfuck ../programs/primes.bfprimes to: 502 3 5 7 11 13 17 19 23 29 31 37 41 43 47 javascript's live version the javascript interpreter http://pablojorge.github.io/brainfuck features debugger- interface, support :memory inspectionstep--step executionmodification program input between stepsconfigurable speed (operations/instructions per cycle, delay between cycles)golangrunning number warper the interpreter:$ cd $ go build -o brainfuck$ ./brainfuck ../programs/numwarp.bf32 /\\ / /\\ \\/ /\\ /lua use lua interpreter:$ cd lua$ lua brainfuck.lua ../programs/hello.bfhello world! interpreter is compatible lua 5.1, 5.2 5.3 languages, runs fast luajit.brainfuck lua translatorrunning same program, the version translated lua:$ cd lua$ lua bf2lua.lua ../programs/hello.bf | lua -hello world!benchmarks good program use benchmark is mandelbrot set generator., with python interpreter:$ python brainfuck.py ../programs/mandelbrot.bfaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccdddddddddegffeeeeddddddcccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaabbbbbbbbbbbbbcccccccccccccccccccccccccccccccccccddddddddddeeefgiigffeeeddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaabbbbbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddeeeefffi khggghgedddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaabbbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddddeeeeeffghimtklzogfeedddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaabbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddddeeeeeefgghhikppkihgffeeedddddddddccccccccccbbbbbbbbbbbbbbbbbbaaaaaaaaaabbbbbbbbcccccccccccccccccccccccccccccccccdddddddddddddddeeeeeeffghijks x khhgfeeeeedddddddddccccccccccbbbbbbbbbbbbbbbbaaaaaaaaabbbbbbbcccccccccccccccccccccccccccccccccdddddddddddddddeeeeeeffgqpuvoty zql[mhfeeeeeeedddddddcccccccccccbbbbbbbbbbbbbbaaaaaaaabbbbbbccccccccccccccccccccccccccccccccdddddddddddddddeeeeefffffgghjlz ukhgffeeeeeeeedddddccccccccccccbbbbbbbbbbbbaaaaaaabbbbbccccccccccccccccccccccccccccccccddddddddddddddeeeeffffffgggghikp khhggffffeeeeeedddddcccccccccccbbbbbbbbbbbaaaaaaabbbbcccccccccccccccccccccccccccccccddddddddddddeeeeefgghiihhhhhiiijkmr vmkjihhhgffffffgsgeddddccccccccccccbbbbbbbbbaaaaaabbbccccccccccccccccccccccccccccccdddddddddddeeeeeeffghk mkjijo n r x yusr plv lhhhgghiojgfedddccccccccccccbbbbbbbbaaaaabbbcccccccccccccccccccccccccccccddddddddeeeeeeeeeffffgh o tn s nkjkr llqmnheedddccccccccccccbbbbbbbaaaaabbcccccccccccccccccccccccccccddddddeeeeeeeeeeeefffffghhin q umwgeeedddccccccccccccbbbbbbaaaabbcccccccccccccccccccccccccddddeeeeeeeeeeeeeeeffffffghijklot [jgffeeeddcccccccccccccbbbbbaaaabccccccccccccccccccccccddddeeeeeeeeeeeeeeeeffffffgghyv rqu qmjhggfeeedddcccccccccccccbbbbaaabcccccccccccccccccdddddddeefjihffffffffffffffgggggghijn jhhgfeeddddcccccccccccccbbbaaabcccccccccccddddddddddeeeeffhlkhhgggghhmjhgggggghhhikrr uq l hfeddddccccccccccccccbbaabccccccccdddddddddddeeeeeefffhkqmrknjijlvs jjkiiiiiijlr ynhfedddddcccccccccccccbbaabcccccddddddddddddeeeeeeeffgghijkou o o pr lljjjkl oihffedddddccccccccccccccbaacccdddddddddddddeeeeeeeeefggghijmr rmlmn ntfeeddddddcccccccccccccbaaccddddddddddddeeeeeeeeefggghhkonsz qpr njgfeeddddddccccccccccccccabcdddddddddddeeeeefffffgipjiijkmq vx hffeeddddddccccccccccccccacddddddddddefffffffgggghikzoopps hgfeeeddddddccccccccccccccadeeeefffghigggggghhhhijjlny tjhgffeeedddddddccccccccccccc pljhggffeeedddddddcccccccccccccadeeeefffghigggggghhhhijjlny tjhgffeeedddddddcccccccccccccacddddddddddefffffffgggghikzoopps hgfeeeddddddccccccccccccccabcdddddddddddeeeeefffffgipjiijkmq vx hffeeddddddccccccccccccccaaccddddddddddddeeeeeeeeefggghhkonsz qpr njgfeeddddddccccccccccccccaacccdddddddddddddeeeeeeeeefggghijmr rmlmn ntfeeddddddcccccccccccccbaabcccccddddddddddddeeeeeeeffgghijkou o o pr lljjjkl oihffedddddccccccccccccccbaabccccccccdddddddddddeeeeeefffhkqmrknjijlvs jjkiiiiiijlr ynhfedddddcccccccccccccbbaaabcccccccccccddddddddddeeeeffhlkhhgggghhmjhgggggghhhikrr uq l hfeddddccccccccccccccbbaaabcccccccccccccccccdddddddeefjihffffffffffffffgggggghijn jhhgfeeddddcccccccccccccbbbaaaabccccccccccccccccccccccddddeeeeeeeeeeeeeeeeffffffgghyv rqu qmjhggfeeedddcccccccccccccbbbbaaaabbcccccccccccccccccccccccccddddeeeeeeeeeeeeeeeffffffghijklot [jgffeeeddcccccccccccccbbbbbaaaaabbcccccccccccccccccccccccccccddddddeeeeeeeeeeeefffffghhin q umwgeeedddccccccccccccbbbbbbaaaaabbbcccccccccccccccccccccccccccccddddddddeeeeeeeeeffffgh o tn s nkjkr llqmnheedddccccccccccccbbbbbbbaaaaaabbbccccccccccccccccccccccccccccccdddddddddddeeeeeeffghk mkjijo n r x yusr plv lhhhgghiojgfedddccccccccccccbbbbbbbbaaaaaaabbbbcccccccccccccccccccccccccccccccddddddddddddeeeeefgghiihhhhhiiijkmr vmkjihhhgffffffgsgeddddccccccccccccbbbbbbbbbaaaaaaabbbbbccccccccccccccccccccccccccccccccddddddddddddddeeeeffffffgggghikp khhggffffeeeeeedddddcccccccccccbbbbbbbbbbbaaaaaaaabbbbbbccccccccccccccccccccccccccccccccdddddddddddddddeeeeefffffgghjlz ukhgffeeeeeeeedddddccccccccccccbbbbbbbbbbbbaaaaaaaaabbbbbbbcccccccccccccccccccccccccccccccccdddddddddddddddeeeeeeffgqpuvoty zql[mhfeeeeeeedddddddcccccccccccbbbbbbbbbbbbbbaaaaaaaaaabbbbbbbbcccccccccccccccccccccccccccccccccdddddddddddddddeeeeeeffghijks x khhgfeeeeedddddddddccccccccccbbbbbbbbbbbbbbbbaaaaaaaaaaabbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddddeeeeeefgghhikppkihgffeeedddddddddccccccccccbbbbbbbbbbbbbbbbbbaaaaaaaaaaaabbbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddddeeeeeffghimtklzogfeedddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaabbbbbbbbbbbbccccccccccccccccccccccccccccccccccddddddddddddeeeefffi khggghgedddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaabbbbbbbbbbbbbcccccccccccccccccccccccccccccccccccddddddddddeeefgiigffeeeddddddddcccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbreal 992m9.836suser 991m45.631ssys 0m3.060s took 992 minutes (16hs 32 min). very fast... with c interpreter:$ ./brainfuck ../programs/mandelbrot.bf[...]real 1m50.316suser 1m50.251ssys 0m0.024s1m50s! faster running the python interpreter.3rd try: translated c version without optimizations:$ runhaskell bf2c.hs < ../programs/mandelbrot.bf > mandelbrot.c$ cc mandelbrot.c -o mandelbrot$ ./mandelbrot[...]real 0m18.084suser 0m18.033ssys 0m0.032s improvement, not impressive in first case.finally same c version, compiled optimizations:$ cc -o3 mandelbrot.c -o mandelbrot$ ./mandelbrot[...]real 0m1.111suser 0m1.092ssys 0m0.004s that's fast.improvements the python version original python interpreter is excessively complex, it be easily improved run faster several ways:avoiding methods lookuppre-computing jumps between bracketsavoiding looping non-operandsavoiding array lookups's separate version, brainfuck-simple.py contains those improvements. another version, brainfuck-rpython.py, is same thing slightly modified it be translated using rpython. rpython version was generated using:$ cd <pypy-source>$ python rpython/translator/goal/translate.py ~/projects/github/brainfuck/python/brainfuck-rpython.pycomparison table is full comparison between versions:sierpinskimandelbrotprimes to 100non-optimized python version (cpython)0m5.387s991m45.631s19m34.163snon-optimized python version (pypy)0m0.470s24m59.928s0m28.210soptimized python version (cpython)0m0.125s67m39.287s1m16.431soptimized python version (pypy)0m0.246s1m35.345s0m2.144simproved python version (rpython)0m0.003s0m29.796s0m0.486sassembler0m0.015s1m7.288s0m1.501sc interpreter (-o0)0m0.014s2m7.036s0m2.012sc interpreter (-o1)0m0.009s1m7.504s0m1.005stranslated c (-o0)0m0.002s0m19.674s0m0.243stranslated c (-o1)0m0.001s0m1.360s0m0.012snotice impressive difference between cpython pypy. both cases, running same code is 40 times slower cpython. means can a really big gain \"free\" (almost), just using pypy interpreter. translating rpython is free course, the gain is as big. the cases, performance differences are totally expected (c interpreter compiled optimisations has equivalent performance the assembler interpreter, translated c version is almost orders magnitude faster the interpreted version, etc.)."
}