{
	"_id": "14413517",
	"site": "https://github.com/jtdaugherty/brick/blob/master/README.md",
	"title": "Brick is a Haskell terminal user interface programming library",
	"author": "sea6ear",
	"date": "2017-06-13T13:56:32.062Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "brickbrick is haskell terminal user interface programming library thestyle gloss. means write function describes your user interface should ,but library takes care a lot the book-keeping so commonlygoes writing such programs.brick exposes declarative api. unlike gui toolkits require to write long tedious sequence \"create widget, bind event handler\", brick requires to describe interface using set declarative combinators. you provide function transform application state input other kinds events arrive.under hood, library builds uponvty, some knowledge vty be helpful using library. library deprecates vty-ui.examplehere's example interface ( programs/readmedemo.hs):withborderstyle unicode $borderwithlabel (str \"hello!\") $(center (str \"left\") <+> vborder <+> center (str \"right\"))result:hello! left right getting startedtldr:$ cabal sandbox init$ cabal install -j -f demos$ .cabal-sandbox/bin/brick-???-demo get started, the few sections the brickuser guide.feature overviewbrick comes a bunch widget types get started:vertical horizontal box layout widgetsbasic single- multi-line text editor widgetslist widgetprogress bar widgetsimple dialog box widgetborder-drawing widgets (put borders around in between things)generic scrollable viewportsextensible widget-building api( many more general-purpose layout control combinators) addition, of brick's more powerful features may be obviousright away: widgets be arranged predictable layouts you don't to worry terminal resizes.attribute management is flexible can customized runtime a per-widget basis.brick-users discussion brick-users google group / e-mail list is place discusslibrary changes, feedback, ask questions. can subscribe :https://groups.google.com/group/brick-usersdocumentation documentation options, recommended order, are:faq brick user guidehaddock ( modules)demo programsstatusbrick is young may missing essential features. are places were have deliberately chosen worry performancelater the sake spending more on design ( to wait performance issues arise ). brick is something anexperimental project mine some aspects the design involvetrade-offs are entirely settled. addition can expect library follow principle fearless improvement: versions make (sometimes substantial) api changes those changes really make library better. will place more importance getting apiright on maintaining backwards compatibility.brick exports extension api makes possible make ownpackages widgets. you that, 'll be helping testwhether exported interface is usable complete!reporting bugsplease file bug reports github issues. best results:include versions relevant software packages: terminalemulator, brick, ghc, vty be most importantones.clearly describe behavior expected ...... include minimal demonstration program exhibits behavior actually observed.contributing you decide contribute, 's great! here are guidelines should consider make submitting patches easier all concerned: you to on big things, talk me ; let's adesign/vision discussion before start coding. create githubissue we use as place hash things .please changes consistent the conventions 've used thecodebase.please adjust provide haddock /or user guide documentationrelevant any changes make."
}