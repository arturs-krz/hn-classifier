{
	"_id": "14398392",
	"site": "https://github.com/spolu/warp?attempt=1",
	"title": " Warp â€“ Simple terminal sharing for better developers interactions",
	"author": "spolu",
	"date": "2017-06-13T13:07:23.011Z",
	"tags": {
		"categories": [
			"opensource",
			"terminal",
			"shell",
			"tls",
			"sharing",
			"command-line"
		],
		"languages": [
			"go"
		]
	},
	"content": "readme.md readme _ ______ __________ | | /| / / __ `/ ___/ __ \\ | |/ |/ / /_/ / / / /_/ / |__/|__/\\__,_/_/ / .___/ /_/ v0.0.3secure simple terminal sharingwarp lets securely share terminal one simple command: warp open. connected your warp, clients see terminal exactly if were sitting next you. can grant write access, equivalent handing your keyboard.warp distinguishes itself \"tmux/screen ssh\" its focus ease use it does require ssh access your machine ashared server others collaborate you.despite being still quite experimental, warp has already proven itself usefulespecially the context :interaction remote team-members engineer onboarding (navigating code group without projection)installationmacosx (using homebrew)# requires homebrew installed. https://brew.sh/brew install warp source code# requires to installed your machine. can easily install from# https://golang.org/doc/install get -u github.com/spolu/warp/client/cmd/warp case difficulties, please refer troubleshooting warp installation.usageinstantly start sharing terminal (read-) under warp id goofy-dev:# you name warps however want (here **goofy-dev**). particular# cryptographically secure random id be generated you you don't# specifiy name.$ warp open goofy-dev will create new warp goofy-dev will connect to locally write-access. there, anyone connect (read-) to warp:$ warp connect goofy-devcreating new warp spawns new shell, closing is therefore easy killing shell exit ctrl-d.granting revoking write-access inside warp, retrieve list connected users :$ warp stategrant write-access a client ( extra careful! the securitysection below):$ warp authorize stanrevoke previously granted write-access :$ warp revoke stansecuritywarp is powerful, therefore, dangerous tool. misuse potentiallyenable attacker easily gain arbitrary remote code execution priviledges.tls connections connection between host well your warp clients the warpdserver are established tls, protecting from man the middle attacks.read- by default default, warps are created read-. being protected tls does protect from phishing. extra careful running warp authorize.ids are secure secretgenerated warp ids are cryptographically secure not publicized. you to authorize someone write your warp, recommend use generatedwarp id ( protect yourself against phishing attacks).trustless read-in particular, your warp does authorize anyone write, does trust warpd daemon enforce noone than can write it. at least client is authorized write, warp does trust warpddaemon is connected to enforce read/write policy clients.roadmap v0.0.2 \"bare\"bare functionalities ( todo) v0.0.3 \"safe\"persisted user token/secretgraceful host reconnection v0.0.4 \"vt100\"terminal emulation achieve:full redraw connectiontop status barterminal truncation resize required anymoreweb-socket / https instead raw sockets v0.0.5 \"cipher\"e2e encryption based warp id future releaseswarp voice :warp lets voice- a warpwarp signin verified usernamesnoteswarp is a fork tmuxwarp is a fork tmux[0] is a terminal emulator ( now). really simply multiplexes stdin/stdout raw ptys between host clients. that reason, you connect a warp already running gui-application (tmux, vim, htop, ...) might time host interactions the gui- application visually reconstruct properly client-side. particular, since warp does emulate terminal cannot reformat truncate output the host terminal fit client terminal windows may lead distorted outputs client side the terminal sizes mismatch. mitigate , warp relies automatic client terminal resizing (pendingv0.0.4, roadmap).automatic client terminal resizeonce connected a client whenever host terminal window size changes,warp attempt resize terminal window the hosting tty size. that reason is recommended run warp connect a terminalwindow[1].development warpdevelopment warp is generally broadcasted warp-dev. feel free connect any .--[0] can run warp within tmux ( screen) tmux within warp.'s fine run warp within warp.[1] terminals supporting window resizes based the \\033[8;h;wt ansi escapesequence:terminalsupportmacosx terminalyxtermyhyperniterm2n"
}