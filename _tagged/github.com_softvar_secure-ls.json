{
	"_id": "14523922",
	"site": "https://github.com/softvar/secure-ls",
	"title": " Secure localStorage data with high level of encryption and compression",
	"author": "softvar",
	"date": "2017-06-13T13:04:19.215Z",
	"tags": {
		"categories": [
			"opensource",
			"localstorage",
			"data-compression",
			"compressed-data",
			"encryption",
			"encoding",
			"decryption",
			"lz-string",
			"aes-encryption",
			"des",
			"rabbit",
			"rc4",
			"decrypt",
			"decompression",
			"pbkdf2",
			"security",
			"secure"
		],
		"languages": [
			"javascript",
			"html"
		]
	},
	"content": "readme.md secure-lssecure localstorage data high level encryption data compression. live demofeaturessecure data various types encryption including aes, des, rabbit rc4. (defaults base64 encoding).compress data before storing to localstorage save extra bytes (defaults true).advanced api wrapper localstorage api, providing basic utilities.save data multiple keys inside localstorage secure-ls always remember 's creation.installation$ npm install secure-lslibraries usedencryption / decryption using cipher algorithms requires secret-key encrypting decrypting data securely. custom secret-key is provided mentioned below apis, the library pick otherwise will generate yet another very secure unique password key using pbkdf2, will further used future api requests.pbkdf2 is password-based key derivation function. many applications cryptography, user security is ultimately dependent a password, because password usually 't used directly a cryptographic key, processing is required. salt provides large set keys any given password, an iteration count increases cost producing keys a password, thereby increasing difficulty attack.eg: 55e8f5585789191d350329b9ebcf2b11 db51d35aad96610683d5a40a70b20c39. the genration such strings, secretphrase is being used can found code easily that won't it unsecure, pbkdf2's layer top that handle security.compresion / decompression using lz-stringusageexample 1: default settings .e. base64 encoding data compression> var ls = securels();> ls.set('key1', {data: 'test'}); // set key1> ls.('key1'); // print data {data: 'test'}example 2: aes encryption data compression> var ls = securels({encodingtype: 'aes'});> ls.set('key1', {data: 'test'}); // set key1> ls.('key1'); // print data {data: 'test'}> ls.set('key2', [1, 2, 3]); // set another key> ls.getallkeys(); // all keys [\"key1\", \"key2\"]> ls.removeall(); // remove keysexample 3: rc4 encryption no data compression> var ls = securels({encodingtype: 'rc4', iscompression: false});> ls.set('key1', {data: 'test'}); // set key1> ls.('key1'); // print data {data: 'test'}> ls.set('key2', [1, 2, 3]); // set another key> ls.getallkeys(); // all keys [\"key1\", \"key2\"]> ls.removeall(); // remove keysexample 3: des encryption, data compression custom secret key> var ls = securels({encodingtype: 'des', iscompression: false, encryptionsecret: '-secret-key'});> ls.set('key1', {data: 'test'}); // set key1> ls.('key1'); // print data {data: 'test'}> ls.set('key2', [1, 2, 3]); // set another key> ls.getallkeys(); // all keys [\"key1\", \"key2\"]> ls.removeall(); // remove keysapi documentationcreate instance / reference before using.var ls = securels();contructor accepts configurable object all three keys being optional.config keysdefaultacceptsencodingtypebase64base64/aes/des/rabbit/rc4/''iscompressiontruetrue/falseencryptionsecretpbkdf2 valuestringnote: encryptionsecret only used the encryption decryption data aes, des, rc4, rabbit, the library discard if encoding / base64 encoding method is choosen.examples: config empty object .e. default base64 encoding data compressionvar ls = securels();// var ls = securels({}); encoding data compression .e. normal of storing datavar ls = securels({encodingtype: '', iscompression: false});base64 encoding no data compressionvar ls = securels({iscompression: false});aes encryption data compressionvar ls = securels({encodingtype: 'aes'});rc4 encryption no data compressionvar ls = securels({encodingtype: 'rc4', iscompression: false});rabbit encryption, data compression custom encryptionsecretvar ls = securels({encodingtype: 'rc4', iscompression: false, encryptionsecret: 's3cr3tpa$$w0rd@123'});methodssetsaves data specifed key localstorage. the key is provided, library warn. following types javascript objects are supported:arrayarraybufferblobfloat32arrayfloat64arrayint8arrayint16arrayint32arraynumberobjectuint8arrayuint8clampedarrayuint16arrayuint32arraystringparameterdescriptionkeykey store data datadata be stored ls.set('key-name', {test: 'secure-ls'})gets data from specified key the localstorage library. the key is provided, library warn.parameterdescriptionkeykey which data is stored ls.('key-name')removeremoves value a key the localstorage. the meta key, stores list keys, is tried be removed if are keys were created secure-ls library, library warn the action.parameterdescriptionkeyremove key which data is stored ls.remove('key-name')removeallremoves the keys were created the secure-ls library, the meta key. ls.removeall()clearremoves the keys ever created that particular domain. remember localstorage works differently http https protocol; ls.clear()getallkeysgets list keys were created using secure-ls library. helpful data needs be retrieved all keys when keys name are known(dynamically created keys).getallkeys() ls.getallkeys()screenshotscriptsnpm run build - produces production version the library under dist foldernpm run dev - produces development version the library runs watchernpm run test - ... it runs tests :)contributingfork repo github.clone repo machine.execute npm install npm run dev.create new branch <fix-typo> do work.run npm run build build dist files npm run test ensure test cases are passing.commit changes the branch.submit pull request.development stackwebpack based src compilation & bundling dist generation.es6 a source writing code.exports a umd format the library works everywhere.es6 test setup mocha chai.linting eslint.processes6 source files | | webpack | +--- babel, eslint | ready use library umd formatcreditsmany thanks :@brix the awesome crypto-js library encrypting decrypting data securely.@pieroxy the lz-string js library data compression / decompression.@chinchang the below open-source libraries are used for landing page development.screenlog.js - brings console.log the page's screen.superplaceholder.js - super charging input placeholders.copyright license mit license (mit)copyright (c) 2015-2016 varun malhotrapermission is hereby granted, free charge, any person obtaining copy this software associated documentation files ( \"software\"), deal the software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /or sell copies the software, to permit persons whom software is furnished do , subject the following conditions: above copyright notice this permission notice shall included all copies substantial portions the software. software is provided \" is\", without warranty any kind, express implied, including not limited the warranties merchantability, fitness a particular purpose noninfringement. no event shall authors copyright holders liable any claim, damages other liability, whether an action contract, tort otherwise, arising , out or connection the software the or dealings the software."
}