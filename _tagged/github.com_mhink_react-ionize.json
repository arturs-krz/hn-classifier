{
	"_id": "14089515",
	"site": "https://github.com/mhink/react-ionize",
	"title": " React-Ionize, a React Fiber Renderer for Electron Apps",
	"author": "mhink",
	"date": "2017-06-13T13:35:27.577Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md react-ionizereact-ionize is library lets build \"non-browser\" parts an electron app using react components manage application's state.electron applications consist two types process: main process manages lifecycle the application, several renderer processes, display webpages comprise application's gui. while 's fairly common use react reactdom build html/css/js interface the renderer process, react-ionize runs the main process, managing things window size/position, menu contents, application-wide events.caveat developerreact-ionize is still experimental, pre-alpha library, is yetsuitable for in production app! 's custom renderer built top the react fiber reconciliation api, itself is still under activedevelopment. ( to mention, 've got whole crop electron features yet add.)getting started* npm install --save electron* npm install --save react@16.0.0-alpha.5* npm install --save react-ionize a at ionize example app get started.hello, world!const react = require('react');const ionize = require('react-ionize');const path = require('path');const fs = require('fs');const index_html_path = path.resolve(__dirname, 'index.html');const index_html_source = `<!doctype html><html> <head> <meta charset=\"utf-8\"> <title>hello, electron!</title> </head> <body> <h1>hello, electron!</h1> </body></html>`;fs.writefilesync(index_html_path, index_html_source);ionize.start( <app> <window show file={index_html_path} /> </app>);(normally, 'd build distribute index.html along your js during build process, i wanted example be independent build processes possible.)apiionize.start(element, [callback])starts an electron application under ionize. (note: will wait the'ready' electron event before starting render elements.)elementsgenerally speaking, presence an ionize element your component treeindicates you it be , and ionize should ensure presence rendering. can lead slightly surprising behavior you're unfamiliar react- instance, you a window actually away you close , you need make sure the corresponding <window/>element actually gets unmounted!<app>attachment point event handlers related the global app. strictlynecessary you don't need register of (since react fiber supports multiple children without parent element).generally speaking, children <app> are things related the entireapplication: browser windows, dialogs, tray elements, so forth. ( atleast, will once get chance implement .)event handlersonready- fired immediately the component is mounted. under hood, ionize actually waits 'ready' before trying start mounting everything, this is here the sake api compatibility.<window>represents electron browserwindow object.file html file want render the chrome browser instance. (note ionize looks this file relative the runtime location your project!)show this prop transitions false -> true, ionize displays browser window. it transitions true -> false, ionize hides( does close) browser window. this is true theelement is mounted, ionize immediately show window.onreadytoshowcalled the window's ready--show event is triggered. can this keep window hidden until 's ready.showdevtools this is true the element is mounted, ionize open chrome developer tools opening browser window.size is controlled prop, behaves much an <input> element traditional react apps. is say, you provide size itself, user not able resize window- will simply that size, unless provide onresize handler update value provided. also: https://facebook.github.io/react/docs/forms.html#controlled-componentsonresize event handler is called the window size the window size changes. provided conjunction the size prop, will allow window be resized (although will need update value the size prop accordingly).defaultsize you don't care tracking window's size manually, may provide defaultsize prop set window an initial size it's mounted.positiononmoveonmoveddefaultposition props pretty much same size, onresize, defaultsize, except represent position the screen.keep mind these values might funky you're dealing multiple monitors.<menu> <menu> element defines electron application menu. nesting <submenu>s inside , you construct menu.todo: nested inside <window> element, should attach menu that window, specifically- i'd to something a <contextmenu>element right-clicks.<submenu>label label the submenu. (keep mind on osx, first submenu the list take application's name, matter label might it.)children<submenu> <item> elements !<item> relatedpretty much equivalent new menuitem({ type: 'normal' }) vanilla electron.label text shown this menu itemonclick onclick handler this menu item. are couple special-case elements related <item>.<sep> separator menu item. equivalent new menuitem({ type: 'separator' }) vanilla electron.role-based elements the electron api, can create menuitems a \"role\", assigns some os-native functionality ( copy, paste, select , and on.) a shorthand, can these directly an element name within <submenu>. instance,<pasteandmatchstyle />is equivalent new menuitem({ role: 'pasteandmatchstyle' }) vanilla electron.feedback contributionsfeedback is welcome! add issue hit up twitter. 'm still working how this should , but would love hear suggestions. you'd to contribute, right we really some more feature implementations. basically, i've been doing is picking electron apis figuring how turn into either elements props existing elements. instance, app.setbadge(text) api call make a pretty prop <app />. assist would- contributor, 've included bunch documentation notes react fiber the comments ionizehostconfig.js. further reading, 'd basically recommend cloning down react repo digging through /src/renderers directory, starting /src/renderers/shared/fiber/reactfiberreconciler.js going there."
}