{
	"_id": "14443789",
	"site": "https://github.com/mdipierro/nlib",
	"title": "Annotated Algorithms in Python",
	"author": "robschia",
	"date": "2017-06-13T13:55:20.037Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.md annotated algorithms python applications physics, biology, finance complete book pdf is available under creative commons -nc-nd license:download book pdf book is available printed form amazon:amazon nlib library book builds numerical library the ground , called nlib.py. is pure python library numerical computations. doesn't require numpy.usage>>> nlib import *linear algebra example>>> = matrix([[1,2],[4,9]])>>> print 1/ >>> print (+2)*>>> b = matrix(2,2,lambda ,j: +j**2)fitting>>> points = [(x0,y0,dy0), (x1,y1,dy1), (x2,y2,dy2), ...]>>> coefficients, chi2, fitting_function = fit_least_squares(points,polynomial(2))>>> x,y,dy points:>>> print x, y, '~', fitting_function(x)solvers>>> math import sin>>> def f(x): return sin(x)-1+x>>> x0 = solve_newton(f, 0.0, ap=0.01, rp=0.01, ns=100)>>> print 'f(%s)=%s ~ 0' % (x0, f(x0))(ap is target absolute precision, rp is target relative precision, ns is max number steps)optimizers>>> def f(x): return (sin(x)-1+x)**2>>> x0 = optimize_newton(f, 0.0, ap=0.01, rp=0.01, ns=100)>>> print 'f(%s)=%s ~ min f' % (x0, f(x0)) >>> print 'f'(%s)=%s ~ 0' % (x0, d(f)(x0)) statistics>>> x = [random.random() k range(100)]>>> print 'mu =', mean(x)>>> print 'sigma =', sd(x)>>> print 'e[x] =', e(lambda x:x, x)>>> print 'e[x^2] =', e(lambda x:x**2, x)>>> print 'e[x^3] =', e(lambda x:x**3, x)>>> y = [random.random() k range(100)]>>> print 'corr(x,y) = ', correlation(x,y)>>> print 'cov(x,y) = ', covariance(x,y)finance>>> google = ystock('goog')>>> current = google.current()>>> print current['price'] >>> print current['market_cap'] >>> day google.historical():>>> print ['date'], ['adjusted_close'], ['log_return']persistant storage>>> d = persistentdictionary(path='test.sqlite')>>> d['key'] = 'value'>>> print d['key']>>> del d['key']d works a drop- preplacement any normal python dictionary except the data is stored a sqlite database a file called \"test.sqlite\" it is still if re-start program. kind like shelve module shelve files cannot safely accessed multiple threads/processes unless locked locking entire file is efficient.neural network>>> pat = [[[0,0], [0]], [[0,1], [1]], [[1,0], [1]], [[1,1], [0]]]>>> n = neuralnetwork(2, 2, 1)>>> n.train(pat)>>> n.test(pat)[0, 0] -> [0.00...][0, 1] -> [0.98...][1, 0] -> [0.98...][1, 1] -> [-0.00...]plotting>>> data = [(x0,y0), ...]>>> canvas(title=' plot').plot(data, color='red').save('myplot.png')nlib plotting requires matplotlib/numpy the canvas object plots are chainable. methods: .plot, .hist, .errorbar, .ellipsescomplete list functions/classesconstantcubiccanvascholeskyclusterddddijkstradisjointsetseellipsehave_matplotlibjacobi_eigenvalueskruskallinearmcenginemcgmarkowitzmarsennetwistermatrixneuralnetworkpolynomialpersistentdictionaryprimprimvertexquadraticquarticquadratureintegratorrandomsourcestringiotraderystockbootstrapbreadth_first_searchcompute_correlationcondition_numberconfidence_intervalscontinuum_knapsackcorrelationcovariancedecode_huffmandepth_first_searchencode_huffmanfibfitfit_least_squaresgradienthessianintegrateintegrate_naiveintegrate_quadrature_naiveinvert_bicgstabinvert_minimum_residualis_almost_symmetricis_almost_zerois_positive_definitejacobianlcsleapfrogmake_mazemeanmemoizememoize_persistentneedleman_wunschnormoptimize_bisectionoptimize_golden_searchoptimize_newtonoptimize_newton_multi (multi-dimentional optimizer)optimize_newton_multi_imporvedoptimize_secantpartialrandomresamplesdsolve_bisectionsolve_fixed_pointsolve_newtonsolve_newton_multi (multi-dimensional solver)solve_secantvariancelicensecreated massimo di pierro (http://experts4solutions.com) @2016 bsdv3 license"
}