{
	"_id": "14451509",
	"site": "https://github.com/mm-jay/django-slack-events-api",
	"title": " Django-slack-events-api â€“ A minimal Django app for making Slack bots",
	"author": "mmjay",
	"date": "2017-06-13T13:05:04.446Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.rst slack events api adapter a django appdjango-slack-events-api is minimal django app making slack bot. includes django porting the official slack events api adapter:python-slack-events-api. original adapter is based the flaskframework; here's modular django app version instead ;-) is intended minimal (devoid extra model, template, module-dependency stuffs) focusing on slack events handling. however, the features examples useful slack bot creation (such utilizing python-slackclient) found the original flask version are retained functional. working through demo section, 'll find easy integrate app your django projects well.bonus: additionally, django-slack-events-api supports three kinds slack clientlibrary integration: official slack developer kit python (aka. python-slackclient) [default], popular slacker client, a minimal client based urllib2 (compatible google app engine thanks no socket module dependency).credits: sections marked is derived of python-slack-events-api/example/readme.rst.installationtested environment:python 2.7django 1.8.9install app its dependencies:$ git clone https://github.com/mm-jay/django-slack-events-api.git$ cd django-slack-events-api$ pip install -r requirements.txtdemo: creating minimal django project a slack bot this section, present quick demo how get working django-basedslack bot your local computer. create new django app scratch embed django-slack app it. configurations, start django local server port 3000. ngrok is used make sure the localbot instance is properly communicating the slack server the internet.(1) new django project a django slack app embedded$ django-admin startproject bot # create new django project called \"bot\"$ cp -r slack bot/ # copy (embed) bare django-slack app under bot project$ cd bot # move the root the bot project the current directory structure should as follows:$ find .. # root the \"bot\" project./bot./bot/__init__.py./bot/settings.py # be modified./bot/urls.py # be modified./bot/wsgi.py./manage.py./slack # copy django-slack app./slack/__init__.py./slack/adapter_slackclient.py./slack/adapter_slacker.py./slack/adapter_urllib2.py./slack/client_urllib2.py./slack/urls.py./slack/views.py(2) modify bot/settings.py add slack app tokens. obtaining slack_verification_token slack_bot_token tokens, appendix: setup bot slack.installed_apps = ( 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'slack', # <-- add )slack_verification_token = \"xxxxxxxxxxxxxxxxxxxxxxxxx\" # <-- add slack_bot_token = \"xxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxx\" # <-- add (3) modify bot/urls.py configure endpoint. django.conf.urls import include, url django.contrib import adminurlpatterns = [ url(r'^admin/', include(admin.site.urls)), url(r'^slack/', include('slack.urls', namespace=\"slack\")), # <-- add ](4) [optional] modify slack/urls.py customize endpoint (default is /slack/events)(5) [optional] select underlying bot client library slack/views.py, uncomment adapter corresponding the clientlibrary your choice. (unmodified, adapter_slackclient.py is used default.)# uncomment the slackclient api client (https://github.com/slackapi/python-slackclient) .adapter_slackclient import slack_events_adapter, slack_verification_token#----# uncomment the slacker api client (https://github.com/os/slacker)# .adapter_slacker import slack_events_adapter, slack_verification_token#----# uncomment a urllib2-based client implemented client_urllib2.py# should with google app engine.# .adapter_urllib2 import slack_events_adapter, slack_verification_tokendepending your choice the client library, start hacking bot's logic editing ofadapter_slackclient.py (using python-slackclient),adapter_slacker.py (using slacker), adapter_urllib2.py (using slack/client_urllib2.py).(6) start ngrok order slack contact local server, 'll need run tunnel. recommend ngrok localtunnel. 're going use ngrok this example. you don't ngrok, download here.here's rudimentary diagream how ngrok allows slack connect your server slack requires event requests delivered ssl, you'll to the https url provided ngrok.run ngrok copy https urlngrok http 3000ngrok @inconshreveable (ctrl+c quit)session status onlineversion 2.1.18region united states ()web interface http://127.0.0.1:4040forwarding http://h7465j.ngrok.io -> localhost:9292forwarding https://h7465j.ngrok.io -> localhost:9292(7) run app'll need have server ngrok running complete app's eventsubscription setup$ python manage.py runserver 0.0.0.0:3000 once app has been installed subscribed bot events, will begin receiving event data slack(8) interact your botinvite bot a public channel, say hi your bot respond.here are django console logs showing interaction the slack server.case: local server + ngrok:case: google app engine:appendix: setup bot slack create slack appcreate slack app https://api.slack.com/apps/ add bot user your app install app your teamvisit app's install app page click install app team.authorize app subscribe app eventsadd request url ( ngrok url + /slack/events) subscribe app message.channels under bot events. save toggle enable events on save app's credentialsonce 've authorized app, 'll presented your app's tokens.copy app's bot user oauth access token, add token bot/settings.py.slack_bot_token = \"xxxxxxxxxxxxxxxxxxxxx.xxxxxxxxxx\"next, back your app's basic information pagecopy app's verification token, add token bot/settings.py.slack_verification_token = \"xxxxxxxxxxxxxxxxxxxxxxxxx\""
}