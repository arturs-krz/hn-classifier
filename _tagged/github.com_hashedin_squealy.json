{
	"_id": "14314875",
	"site": "https://github.com/hashedin/squealy",
	"title": " SQueaLy â€“ Fast track analytics for business",
	"author": "swapnil95",
	"date": "2017-06-13T13:08:56.106Z",
	"tags": {
		"categories": [
			"opensource",
			"django",
			"business-intelligence",
			"sql",
			"rest-api",
			"swagger",
			"scheduled-emails"
		],
		"languages": [
			"javascript",
			"python",
			"css",
			"html"
		]
	},
	"content": "readme.md fast track analytics your business. squealysquealy is open-source, self-deployable application developers. is micro service business intelligence analytics uses sql queries generate reporting apis fine-grained security. gives the power analyze organizational data an environment is completely owned you. hence, making the suitable solution generating charts reports of sensitive data. to squealy you charts reports don't to build apisusing squealy, creating apis your reports/charts visualizing output is super quick. write query fetch data your database use squealy's authoring interface visualize output. once satisfied, your users permission view/edit report share url your report. 's ! when want fine grained security your reporting apis can provide only chart level view permissions also user/parameter level permissions. make one liner straighforward, consider following case. have chain hotels based multiple locations. create 5 reports are be viewed the managers each hotel you don't the manager one location view report the hotels managed him. if write logic your own code, is going take lot time using squealy, can done seconds. you scheduled emails embedded reportssquealy provides the interface schedule emails reports embedded it. you to isgroup reports want send the emailwrite cron expression schedule email just . for white labling, can customize look feel the email message providing html itkey features-click deploy heroku click the 'deploy--heroku' button, login your heroku account, enter environment variables the application be deployed under account domain.jsfiddle interface test visualize outputsquealy provides a user-friendly editor interface test debug queries/apis. data is always secure the database credentials secret keys are stored environment variables your own server architecture (heroku).more just sqlsquealy uses jinjasql behind scenes gives power use jinja inside sql query. more details, check jinjasql.permission based modelsquealy provides the ability assign view/edit permission any user each chart/report.multiple databases can set multiple database connections specify database use while generating chart/report.scheduled emails embedded reportssquealy comes email solutions well. can schedule emails embedded the charts/reports had created just writing cron expressionrequirements account heroku database accessible the internetdatabase supportathena, redshift, mysql, postgres, sqlite,getting startedclick the 'deploy--heroku' button the top this documentation.login/signup your heroku account.enter environment variables click deploy ( sure note admin credentials entered this step). app is deployed the chart has already been created you. hit run button you see data/visualization the results section.usage managing permissions (chart-level authorization)squealy uses django's default permission model managing chart level authorization.everytime new chart is created, 2 permissions are added the backend automatically corresponding view edit mode access. example, the chart is named 'foo' , permissions '-view-foo' 'can-edit-foo' are added automatically. administrator needs add required permissions users groups the django admin panel. ( located https://<your_domain>/admin ), there are other high-level permissions - -add-chart can-delete-chart are required creation deletion charts, respectively. non-django folks: default, admin user has permissions.using apissquealy generates apis real- corresponding each chart. hit api corresponding your chart_url,note: chart_url is chart name lower case, replacing spaced hyphen ('-')<your_domain>/squealy/<chart_url>?<param_name>=<value>&<param_name>=<value> api return data the format is compatible googlecharts.query parameterization add parameter, need use keyword object \"params\" inside jinja template. example, include parameter named foo,select * some_tablewhere some_value = {{params.foo}}; the view mode, parameter values be extracted the filters, if are using api, you need pass parameters the url this:<your_domain>/squealy/<chart_url>?<param_name>=<value>&<param_name>=<value>user-level authorizationsquealy allows to user parameters inside query template, values which be extracted the logged user while running query. the keyword object \"user\" the jinja template access request.user object provided django. further details, checkout django user objects. example,--- see bookings the current user .select bookings bookings_tablewhere some_value = {{params.foo}} name = {{user.username}}swagger documentationswagger is integrated, cloud based api development platform combines core capabilities swagger advanced features build, document, deploy apis.--- query testchart1.select * bookings_tablewhere booking_id = {{ params.booking_id }};--- query testchart2select * bookings_tablewhere booking_datebetween {{ params.start_date }} {{ params.end_date }};once are done creating charts, can a documentation all rest apis these charts. view documentation, got <your-domain>/swagger dropdown filter apissquealy provides filter apis add dropdown options. just need write query get data the database.squealy provides can_edit permission filters. user does have can_edit permission, api be available a dropdown option while adding parameters the chart.squealy supports parameterized filters .for example: have filters country city you to show cities selected country.query countryselect country some_table;query cityselect city some_table where country={{params.country}};note: order plays important role parameterized filter. parameterized filter should render it's parameters. above example, city filter should render country filter.validations every chart, can attach another sql query would validate api. api return 403 forbidden response, the validation query returns rows.jwt authenticationsquealy provides mechanism log a user via access token would help sharing other application's user-base squealy without need import users squealy database.jwt_key - is setup the environment while deploying squealy app. is private key is shared between squealy the application is directing users squealy.token encoding: the above key create jwt token your application the following payload:{\"username\": \"foo\", //squealy assumes authenticity this user is handled the directing application.\"groups\": [\"g1\", \"g2\", \"g3\"] //list django permission groups this user belongs .}sending token: can send token the request header. squealy ensure login user before handling request.here is example hoe request header should like: authorization: bearer <token>scheduling emails scheduled emails contain many reports(charts) you . you have associate reports(charts) want the email the scheduled email. schedule emails embedded reports, initialize following variables the environment:email_hostemail_host_useremail_host_passwordemail_port, go the django admin select scheduled reports model. doing you see form this subject will the subject the email. subject does have be hard coded. can the parameters the query any macro provided squealy here. wrap placeholders {{}} to generate subject dyanamicallytemplate can customize look feel the email body writting html here. not forget put {% include 'report.html' %} somewhere the template otherwise won't any reports the email.cron expressionenter valid cron expression tell schedule the email. examle, schedule email 11am everyday, cron expression should 0 11 * * *report parameters would contain the values the parameters used the database queries. example you two reports(charts), of uses parameter - facility-id the one uses parameters - start_date end_date. you need provide names these parameters their corresponding values be used while generating reports an emailreport recipients would contain email address all recipients a particular scheduled email.associating charts scheduled reports. associate charts scheduled reports .e. determine report has be sent inwhich email, tho django admin select scheduled report charts model. doing you see form this here, select chart the scheduled report hit save. doing will associate chart the selected scheduled report. repeat for many charts want associate a scheduled reportdevelopmentbackend setupactivate virtual environmentvirtualenv venvsource venv/bin/activateinstalling dependenciespip install -r requirements.txtdatabase setup sqlite database setup already exists squealy's settings.py if want use postgres database, can follow instructions:create database a user create db role. ( run test cases). the following command psql grant access a user:alter user username createdb;note url this database use the next step. url be the following format:<mysql/postgres>://<username>:<password>@<host>:<port>/<database> further help regarding postgres setup, click one the following links: mac osx. linux.setting environment variablesbefore running server, sure set following environment variables using command:export key=valuedatabase_url(configure only you don't to the default sqlite db) - is database will used squealy internally user management.query_db - is db used run queries . enter comma separated urls multiple dbs.admin_username - is default admin's username would created the migration command.admin_pass - is password the default admin user.jwt_key - is shared private key will used decode jwt token. is required optionally enabling jwt authentication mechanism would enable user login via access token parameter the url request body. more information refer above.running migrationspython manage.py migraterunning serverpython manage.py runserver go localhost:8000 login the credentials have exported the environment. you haven't configured admin_usernam admin_pass the environment following be default credentials the admin:username: adminpassword: admin@123running test casespython manage.py testfrontend setupinstalling dependenciescd squealy/squealy-webnpm installrunning development servernpm startrunning test suitesnpm testgetting production buildnpm run buildcopyright(c) 2017 hashedin technologies pvt. ltd."
}