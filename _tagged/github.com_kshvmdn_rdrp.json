{
	"_id": "14285985",
	"site": "https://github.com/kshvmdn/rdrp",
	"title": " Send and receive files over a local network, inspired by AirDrop",
	"author": "kshvmdn",
	"date": "2017-06-13T13:31:14.680Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"go",
			"makefile"
		]
	},
	"content": "readme.md rdrp cross-platform command line tool sending receiving files your local network, inspired airdrop.contentsdemodesigninstallationusagesendbroadcastmonitordockercontributerelatedlicensedemodesignrdrp uses multicast dns enable peer--peer discovery between clients. means rdrp likely work most cloud/virtual environments. a client connects, 're registered a instance the _rdrp._tcp service. each sender continuously browses service newly connected broadcasters whom 'll establish connection attempt send respective file. program implements mdns grandcat/zeroconf.read more mdns: rfc 6762 dns-sd: rfc 6763.installation / setup should installed configured.install go:$ get -v github.com/kshvmdn/rdrp/...$ rdrp$gopath/bin/rdrp, install directly via source:$ git clone https://github.com/kshvmdn/rdrp.git $gopath/src/github.com/kshvmdn/rdrp$ cd $_ # $gopath/src/github.com/kshvmdn/rdrp$ install $ ./rdrpusagerun rdrp the --help flag view usage dialogue.$ rdrp --helpusage: rdrp [<flags>] <command> [<args> ...]send receive files your local network.flags: --help show context-sensitive help ( try --help-long --help-man). -n, --name=name set connection name. -d, --debug enable debug mode. --version show application version.commands: help [<command>...] show help. broadcast receive file. list [<flags>] view active clients. send [<flags>] send file.'s parties involved a single transaction: sender the receiver.send send file, the send command. provide file path the --file flag pass file's contents via stdin.every broadcaster receive request transfer file (unless names are specified the -- flag). process continues until aborted (ctrl+c).$ rdrp help sendusage: rdrp send [<flags>]send file.flags: --help show context-sensitive help ( try --help-long --help-man). -n, --name=name set connection name. -d, --debug enable debug mode. --version show application version. -f, --file=file specify transfer file ( may optionally pass file via stdin). --=to ... comma-separated list client names.examples$ rdrp send --file=readme.md$ rdrp send --name sender < readme.md$ tar -cvzf archive.tar.gz /path//directory/$ rdrp send --file=archive.tar.gz --=a$ echo \"hello\" | rdrp send --=b,cbroadcast broadcast yourself a receiver (.e. someone receiving file), the broadcast command.'ll listening incoming send requests. upon new connection, 'll prompted whether 'd to accept file not, like airdrop. incoming file is copied stdout.$ rdrp broadcast -helpusage: rdrp broadcastreceive file.flags: --help show context-sensitive help ( try --help-long --help-man). -n, --name=name set connection name. -d, --debug enable debug mode. --version show application version.examples$ rdrp broadcast # output is copied stdout...$ rdrp broadcast --name b > archive.tar.gznote each the above roles has optional name flag, name is chosen random not provided ( is happened the demo above).list can view connected clients list. --type specify type clients list --watch listen new connections.$ rdrp list -helpview active clients.flags: --help show context-sensitive help ( try --help-long --help-man). -n, --name=name set connection name. -d, --debug enable debug mode. --version show application version. -w, --watch watch new connections. -t, --type=\"\" specify type client listen .use dockerstart off cloning repository ( you've already cloned, navigate the project root):$ git clone https://github.com/kshvmdn/rdrp$ cd rdrpbuild docker image:$ docker build -t kshvmdn/rdrp . run ! the --rm flag automatically removes container the program exits.$ docker run --rm kshvmdn/rdrp [broadcast|list|send] ...contribute project is completely open source, feel free open issue submit pull request.before submitting pr, please ensure tests are passing that linter is happy. following commands may of .$ make install \\ -tools$ fmt \\ vet \\ lint$ test \\ coverage demo gif was generated asciinema, tmux.relatedtaku-k/airdroptlehman/zerocatlicenserdrp source code is released under mit license."
}