{
	"_id": "14522520",
	"site": "https://github.com/pch/welder",
	"title": " Welder – set up your Linux server with plain shell scripts",
	"author": "pchm",
	"date": "2017-06-13T13:04:19.050Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"shell",
			"ruby"
		]
	},
	"content": "readme.md welderwelder allows to set a linux server plain shell scripts. wrote out frustration ansible. ansible is amazing powerfultool, for needs 's too much. 90% the all need is:ssh -t user@example.com \"$(< ./-setup-script.sh)\" most basic terms, 's welder does. there's more.featureswelder allows to:execute local shell scripts the server via sshorganize scripts a logical set reusable modulesset a server a single command (welder run <playbook>)run -off shell scripts (welder run-script <user@example.com> <path//script.sh>) liquid templates configuration(optional)enter sudo password once per playbook welder-contrib some examplemodules.directory structure example directory structure: modules   nginx      files         nginx.conf      setup.sh   rails      files         nginx            site.conf.liquid         systemd         puma.service.liquid         sidekiq.service.liquid         rbenv-vars.liquid      setup.sh   system      files         10periodic         50unattended-upgrades      setup.sh config.yml vault.yml vault.yml.gpg -site.ymlexample playbook:ssh_url: admin@example.com# list modules executemodules: - system - firewall - rbenv - nginx - railstemplateswelder uses liquid templates. 'smostly compatible ansible's *.j2 files:# modules/rails/files/nginx-site.conf.liquidupstream thumbor { {% port thumbor_instances %} server 127.0.0.1:{{ port }}; {% endfor %}}server { listen 80; server_name {{ thumbor_host }}; include snippets/ssl-{{ app_domain }}.conf; location / { proxy_pass http://thumbor; proxy_set_header host $host; proxy_set_header x-forwarded- $proxy_add_x_forwarded_for; }}config.yml config.yml file be used provide variables your *.liquidtemplates:# example config.ymlapp_name: exampleapp_domain: example.comruby_version: \"2.4.0\"ruby_deploy_user: \"deploy\"rails_env: productionapp_dir: \"/var/www/example\"letsencrypt_web_dir: \"/var/www/letsencrypt\"thumbor_host: images.example.comthumbor_instances: - 8000 - 8001 - 8002 - 8003during compilation phase, config.yml is turned a bash-compatibleformat uploaded the server:# compiled config-variables filecfg_app_name='example'cfg_app_domain='example.com'cfg_ruby_version='2.4.0'cfg_ruby_deploy_user='deploy'cfg_rails_env='production'cfg_app_dir='/var/www/example'cfg_thumbor_host='images.example.com'cfg_thumbor_instances=(8000 8001 8002 8003) can source in setup scripts:# modules/example/setup.shsource setup/config-variablesecho $cfg_app_nameecho $cfg_app_dir# (notice $cfg_ prefix)note: order this work reliably, config.yml has be fairly flat simple - nested hashes are supported.security notesdon't store sensitive information (passwords etc.) config.yml. you to keep passwords git, create vault.yml file, add to .gitignore store encrypted version revision control:# encrypt & decrypt vault.yml using gpg keygpg --encrypt --recipient 'john doe' vault.ymlgpg --decrypt --output vault.yml vault.yml.gpg# encrypt & decrypt using passphrase ( private/public key needed)gpg --symmetric --cipher-algo aes256 vault.ymlgpg --decrypt --output vault.yml --cipher-algo aes256 vault.yml.gpg more information how set gpg/pgp, this excellent tutorial. of as another level security your private git repos. probably don't to store encrypted vault a public repo.sudo sudo password is passed an argument theexpect script, will visible the process list your local computer. could an issue you're using shared machine run setup scripts.example setup script# modules/nginx/setup.shset -xeu # 'u' give warnings unbound config variables[[ -f setup/config-variables ]] && source setup/config-variablessudo add-apt-repository -y ppa:nginx/stablesudo apt- update && sudo apt- install -y nginxsudo service nginx startsudo cp setup/modules/nginx/files/nginx.conf /etc/nginx/nginx.conf# disable default site [ -f /etc/nginx/sites-enabled/default ]; sudo rm /etc/nginx/sites-enabled/defaultfisudo service nginx restartusagewelder run -site # runs playbook defined my-site.yaml run script compile templates configs, upload to server( /home/username/setup) then will ask for sudo password. that, will execute *.sh scripts the modules listed theplaybook file.additional commands:welder compile <playbook> # compiles templates uploads to serverwelder cleanup <playbook> # remove compiled files the server you to run single *.sh script the server, can this:welder run-script <user@example.com> <path//script.sh>note: run-script command does compile templates. merely wrapsssh -t user@example.com \"$(< ./path//script.sh)\". you access templates config, run welder compile <playbook> andwelder cleanup <playbook> you're done.installationinstall dependencieswelder requires rsync ruby. ruby is used mainly a convenient toparse yaml configuration files.optionally, you'd to the templating feature, need install liquid gem:$ gem install liquidcheck welder ~/code/welder ( whatever location prefer):$ git clone https://github.com/pch/welder.git ~/code/welderadd ~/code/welder/bin your $path access the weldercommand-line utility.$ echo 'export path=\"$path:$home/code/welder/bin\"' >> ~/.bash_profileubuntu desktop note: modify ~/.bashrc instead ~/.bash_profile.zsh note: modify ~/.zshrc file instead ~/.bash_profile.restart shell that path changes effect. (opening newterminal tab usually it.) check welder was set :$ which welder/users/-user/code/welder/bin/weldercaveatssince welder allows to run anything the server, should it caution. won't protect from screw-ups, rm -rf \"/$undefined_variable\". at own risk.known issues / limitationsyaml config doesn't support nested valuesruby dependency should optional"
}