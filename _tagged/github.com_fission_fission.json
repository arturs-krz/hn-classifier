{
	"_id": "14427382",
	"site": "https://github.com/fission/fission",
	"title": "Fast Serverless Functions for Kubernetes",
	"author": "merqurio",
	"date": "2017-06-13T13:55:34.736Z",
	"tags": {
		"categories": [
			"opensource",
			"kubernetes",
			"serverless",
			"faas",
			"serverless-functions"
		],
		"languages": [
			"go",
			"c#",
			"javascript",
			"shell",
			"php",
			"python",
			"smarty"
		]
	},
	"content": "readme.md fission: serverless functions kubernetesfission.io @fissioniofission is fast serverless framework kubernetes a focus developer productivity high performance.fission operates just code: docker kubernetes areabstracted away under normal operation, though can both extend fission you to.fission is extensible any language; core is written go, language-specific parts are isolated something calledenvironments (more below). fission currently supports nodejs python, more languages coming soon.performance: 100msec cold startfission maintains pool \"warm\" containers each contain small dynamic loader. a function is called,.e. \"cold-started\", running container is chosen the function isloaded. pool is makes fission fast: cold-start latenciesare typically 100msec.kubernetes is right place serverless're built kubernetes we any non-trivial app use combination serverless functions more conventionalmicroservices, kubernetes is great framework bring together seamlessly.building kubernetes means anything do operations your kubernetes cluster such monitoring logaggregation helps ops your fission deployment.fission concepts function is piece code follows fission functioninterface. environment contains language- runtime-specific parts running function. fission comes nodejs pythonenvironments; can extend environments create entirely ones you . (an environment is essentially a container a webserver dynamic loader.) trigger is something maps event a function; fissionsupports http routes triggers today, upcoming support other types event triggers, such timers kubernetes events.usage # add stock nodejs env your fission deployment $ fission env create --name nodejs --image fission/node-env # javascript -liner prints \"hello world\" $ curl https://raw.githubusercontent.com/fission/fission/master/examples/nodejs/hello.js > hello.js # upload function code fission $ fission function create --name hello --env nodejs --code hello.js # map /hello your function $ fission route create --method --url /hello --function hello # run function. takes 100msec first . $ curl http://$fission_router/hello hello, world! the examples directory more.running fission your clustersetup kubernetes can install kubernetes your laptop minikube:install start kubernetes osx: $ curl -lo https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin $ curl -lo minikube https://storage.googleapis.com/minikube/releases/v0.16.0/minikube-darwin-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ $ minikube start, install start kubernetes linux: $ curl -lo https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin $ curl -lo minikube https://storage.googleapis.com/minikube/releases/v0.16.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ $ minikube start, you use google container engine's free trial get 3 node cluster.verify access the cluster $ kubectl version and run fission: minikube local cluster you're using minikube no cloud provider, these commands set services nodeport. exposes fission ports 31313 31314. $ kubectl create -f http://fission.io/fission.yaml $ kubectl create -f http://fission.io/fission-nodeport.yamlset fission_url fission_router environment variables.fission_url is used the fission cli find server.fission_url should prefixed a http://. (fission_router is needed the examples below work.) you're using minikube, these commands: $ export fission_url=http://$(minikube ip):31313 $ export fission_router=$(minikube ip):31314 and run fission: gke other cloud you're using gke any cloud provider supports loadbalancer service type, these commands: $ kubectl create -f http://fission.io/fission.yaml $ kubectl create -f http://fission.io/fission-cloud.yamlsave external ip addresses controller router services fission_url fission_router, respectively. wait services get ip addresses (check with kubectl --namespace fission svc). : $ export fission_url=http://$(kubectl --namespace fission svc controller -o=jsonpath='{..ip}') $ export fission_router=$(kubectl --namespace fission svc router -o=jsonpath='{..ip}') and run fission: openshift you're using openshift, 's possible run fission it! deploymenttemplate needs be deployed a user cluster-admin permissions ( system:admin), it needs create clusterrole deploying function containers the fission namespace/project.identically with kubernetes, need set fission_url fission_router environment variables. you're using minishift, these commands: $ export fission_url=http://$(minishift ip):31313¬ $ export fission_router=$(minishift ip):31314¬using minishift local cluster you're using minishift no cloud provider, these commands set services nodeport. exposes fission ports 31313 31314. $ oc login -u system:admin $ oc create -f http://fission.io/fission-openshift.yaml $ oc create -f http://fission.io/fission-nodeport.yamlusing clouds you're using cloud provider supports loadbalancer service type, these commands:$ oc login -u system:admin$ oc create -f http://fission.io/fission-openshift.yaml$ oc create -f http://fission.io/fission-cloud.yaml these steps, should able run fission client with kubernetes.install client cli the cli binary mac: $ curl http://fission.io/mac/fission > fission && chmod +x fission && sudo mv fission /usr/local/bin/ linux: $ curl http://fission.io/linux/fission > fission && chmod +x fission && sudo mv fission /usr/local/bin/run examplefinally, 're ready use fission! $ fission env create --name nodejs --image fission/node-env $ curl https://raw.githubusercontent.com/fission/fission/master/examples/nodejs/hello.js > hello.js $ fission function create --name hello --env nodejs --code hello.js $ fission route create --method --url /hello --function hello $ curl http://$fission_router/hello hello, world! can set persistence logs: instructions here.compiling fission[ only need do if 're making fission changes; you're deploying fission, fission.yaml points prebuiltimages.]'ll need installed, along the glide dependency managementtool.'ll need docker building images. server side is compiled one binary (\"fission-bundle\") contains controller, poolmgr router; invokes right based command-line arguments. build fission-bundle: clone repo $gopath/src/github.com/fission/fission, from top leveldirectory ( you to build image the docker insideminikube, 'll need set proper environment variables eval $(minikube docker-env)): # dependencies $ glide install # build fission server an image $ pushd fission-bundle $ ./build.sh # edit push.sh point your registry, comment the `docker push` # line building your local minikube dev purposes $ $editor push.sh $ ./push.sh $ popd # install, update fission.yaml point your compiled image $ $editor fission.yaml $ kubectl create -f fission.yaml you're changing cli: # build fission cli $ cd fission && installstatusfission is early alpha. 's suitable production justyet.'re looking early developer feedback -- you use fission,'d love hear it's working you, parts particular'd to improved, so . talk us slack twitter."
}