{
	"_id": "14371800",
	"site": "https://github.com/XYunknown/i3status-rust",
	"title": "Looking for contributors: Fancy i3status replacement in Rust",
	"author": "xyunknown",
	"date": "2017-06-13T13:57:07.809Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"rust"
		]
	},
	"content": "readme.md i3status-rustvery resourcefriendly feature-rich replacement i3status, written pure rust this project is wip replacement i3status, aiming provide most feature-complete resource friendly implementation the i3bar protocol available. are currently looking help implementing more blocks. supports:flexibility through themingicons (optional)individual update intervals per block reduce system callsclick actionsblocks trigger updates asynchronously, allows things dbus signaling, avoid periodic refreshing data rarely changes (example: music block)requirementsi3, rustc cargo. tested arch linux. you to the font icons arch, install ttf-font-awesome the aur. to itclone repository: git clone https://github.com/xyunknown/i3status-rust.gitrun cd i3status-rust && cargo build --releaseedit example_config.json your liking put to sensible place (e.g. ~/.config/i3/status.json)edit i3 config your i3 config, put path the output binary argument 'status_command'add path your config file first argument, can configure theme icon theme arguments i3status-rs. i3status-rs --help more. note: need specify font the bar section manually use iconic fonts!example the 'bar' section the i3 config my personal i3 config (requires awesome-ttf-fonts). colors block is optional, my taste:bar { font pango:dejavu sans mono, icons 12 position top status_command <path_to_i3status>/i3status-rs <path_to_config>/config.json --icons awesome --theme solarized-dark colors { separator #666666 background #222222 statusline #dddddd focused_workspace #0088cc #0088cc #ffffff active_workspace #333333 #333333 #ffffff inactive_workspace #333333 #333333 #888888 urgent_workspace #2f343a #900000 #ffffff }}reload i3: i3 reloadavailable blockscreates block display current .example{\"block\": \"\", \"interval\": 60, \"format\": \"% %d/%m %r\"},optionskeyvaluesrequireddefaultformatformat string. chrono docs all options.%a %d/%m %rintervalupdate interval seconds5memorycreates block displaying memory swap usage. default, format this module is \": {mfm}mb/{mtm}mb({mp}%)\" (swap valuesaccordingly). behaviour be changed within config.json. module keeps track both swap memory. default, click switches between .example{\"block\": \"memory\", \"format_mem\": \"{mum}mb/{mtm}mb({mup}%)\", \"format_swap\": \"{sum}mb/{stm}mb({sup}%)\", \"type\": \"memory\", \"icons\": true, \"clickable\": true, \"interval\": 5, \"warning_mem\": 80, \"warning_swap\": 80, \"critical_mem\": 95, \"critical_swap\": 95},optionskeyvaluesrequireddefaultformat_memformat string memory view. format values are described below.{mfm}mb/{mtm}mb({mp}%)format_swapformat string swap view.{sfm}mb/{stm}mb({sp}%)typedefault view displayed startup. options are memory, swapmemoryiconswhether format string should prepended icons. options are true, falsetrueclickablewhether view should switch between memory swap click. options are true, falsetrueinterval delay seconds between update. clickable, update is triggered click. integer values .no5warning_mempercentage memory usage, where state is set warning80.0warning_swappercentage swap usage, where state is set warning80.0critical_mempercentage memory usage, where state is set critical95.0critical_swappercentage swap usage, where state is set critical95.0format string specificationkeyvalue{mtg}memory total (gib){mtm}memory total (mib){mag}available memory, including cached memory buffers (gib){mam}available memory, including cached memory buffers (mib){map}available memory, including cached memory buffers (%){mfg}memory free (gib){mfm}memory free (mib){mfp}memory free (%){mug}memory used, excluding cached memory buffers; similar htop's green bar (gib){mum}memory used, excluding cached memory buffers; similar htop's green bar (mib){mup}memory used, excluding cached memory buffers; similar htop's green bar (%){mug}total memory used (gib){mum}total memory used (mib){mup}total memory used (%){cg}cached memory, similar htop's yellow bar (gib){cm}cached memory, similar htop's yellow bar (mib){cp}cached memory, similar htop's yellow bar (%){bg}buffers, similar htop's blue bar (gib){bm}buffers, similar htop's blue bar (mib){bp}buffers, similar htop's blue bar (%){stg}swap total (gib){stm}swap total (mib){sfg}swap free (gib){sfm}swap free (mib){sfp}swap free (%){sug}swap used (gib){sum}swap used (mib){sup}swap used (%)musiccreates block can display current song title artist, a fixed width marquee fashion. uses dbus signaling fetch tracks, no periodic updates are needed. supports players implement mediaplayer2 interface. includes spotify, vlc many more. provides buttons play/pause, previous next title.example{\"block\": \"music\", \"player\": \"spotify\", \"buttons\": [\"play\", \"next\"]},optionskeyvaluesrequireddefaultplayername the music player.must the same name player is registered the mediaplayer2 interface.yes-max_widthmax width the block characters, including buttons21marqueebool specify a marquee style rotation should used every10s the title + artist is longer max-widthtruebuttonsarray control buttons be displayed. options areprev (previous title), play (play/pause) next (next title)[]loadcreates block displays system load average.example{\"block\": \"load\", \"format\": \"{1m} {5m}\", \"interval\": 1},optionskeyvaluesrequireddefaultformatformat string. can the placeholders 1m 5m 15m, e.g. \"1min avg: {1m}\"{1m}intervalupdate interval seconds3cpu utilizationcreates block displays overall cpu utilization, calculated /proc/stat.example{\"block\": \"cpu\", \"interval\": 1},optionskeyvaluesrequireddefaultintervalupdate interval seconds1batterycreates block displays current battery state (full, charging discharging) percentage charged.example{\"block\": \"battery\", \"interval\": 10},optionskeyvaluesrequireddefaultintervalupdate interval seconds10device bat device /sys/class/power_supply/ read .no0customcreates block display output custom commandsexample{\"block\": \"custom\", \"interval\": 100, \"command\": \"uname\"}{\"block\": \"custom\", \"interval\": 1, \"cycle\": [\"echo \", \"echo off\"], \"on_click\": \"<command>\"}note content cycle are mutually exclusive.keyvaluesrequireddefaultintervalupdate interval seconds10commandshell command execute & displaynoneon_clickcommand execute the button is clickednonecyclecommands execute change the button is clickednonetogglecreates toggle block. can add commands be executed disable toggle (command_off), to enable (command_on). also need specify command determine (initial) state the toggle (command_state). the command outputs nothing, toggle is disabled, otherwise enabled. specifying interval property can let command_state executed continuously.example is i to toggle external monitor configuration:{\"block\": \"toggle\",\"text\": \"4k\",\"command_state\": \"xrandr | grep dp1\\\\ connected\\\\ 38 | grep -v edp1\",\"command_on\": \"~/.screenlayout/4kmon_default.sh\",\"command_off\": \"~/.screenlayout/builtin.sh\",\"interval\": 5}keyvaluesrequireddefaultintervalupdate interval secondsnevercommand_onshell command enable toggleyesnonecommand_offshell command disable toggleyesnonecommand_stateshell command determine toggle state. empty output => off. output => .yesnonepacmancreates block displays pending updates available pacman.example{\"block\": \"pacman\", \"interval\": 10},optionskeyvaluesrequireddefaultintervalupdate interval seconds600 (10min)disk spacecreates block displays disk space information.example{\"block\": \"disk_space\", \"path\": \"/\", \"alias\": \"/\", \"type\": \"available\", \"unit\": \"gb\", \"interval\": 20},optionskeyvaluesrequireddefaultpathpath collect information no/aliasalias is displayed path/typecurrently supported options are available freeavailableunitunit is used display disk space. options are mb, mib, gb gibgbintervalupdate interval seconds20soundcreates block displays current master volume (currently based amixer output). right click toggle mute, scroll adjust volume.example{\"block\": \"sound\", \"interval\": 10},optionskeyvaluesrequireddefaultintervalupdate interval seconds2step_width steps volume is /decreased the selected audio device ( greater 50 gets limited 50)5temperaturecreates block displays system temperature, based lm_sensors' sensors output. block is collapsed default, can expanded clicking, showing max avg temperature. collapsed, color the temperature block gives quick indication to temperature (critical maxtemp > 80°, warning > 60°). currently, can adjust thresholds source code. depends lm_sensors being installed configured!example{\"block\": \"temperature\", \"interval\": 10, \"collapsed\": false},optionskeyvaluesrequireddefaultintervalupdate interval seconds5collapsedcollapsed default?truefocused windowcreates block displays title the currently focused window. uses push updates i3 ipc, no need worry resource usage. block updates the focused window changes title the focus changes.example{\"block\": \"focused_window\", \"max-width\": 21},optionskeyvaluesrequireddefaultmax-widthtruncates titles longer max-width21xrandrcreates block shows screen information (name, brightness, resolution). a click can toggle through active screens with wheel and down can adjust selected screens brighntess.example{\"block\": \"xrandr\", \"interval\": 2, \"icons\": true, \"resolution\": true},optionskeyvaluesrequireddefaultintervalupdate interval seconds5iconsshow icons brightness resolution (needs awesome fonts support)trueresolutionshows screens resolutionfalsestep_width steps brightness is /decreased the selected screen ( greater 50 gets limited 50)5 to write blockstep 1: create filecreate block copying template: cp src/blocks/template.rs src/blocks/<block_name>.rs obviously, have be the main repo directory replace <block_name> the name your block.step 2: populate struct block needs struct store 's state. , replace the occurrences 'template' the file the name your block. edit struct add fields you may need store either options the block config state values (e.g. free disk space current load). widgets display something the i3bar, can multiple text button widgets a block. have be returned the view() function they need be updated the update() function. also handle icons theming you.step 3: implement constructor now need write constructor (()) to create block a piece json ( the config file section your block). access values the config here config[\"name\"], use .as_str() as_u64() convert argument the right type, unwrap with expect() unwrap_or() give a default value. alternatively, can the helper macros get_str/u64/bool extract string/ u64 add appropriate error handling. can set default value the macro you see below. template shows how instantiate simple text widget. more info how use widgets, look other blocks. more documentation come. sender object be used send asynchronous update request any block a separate thread, provide know block's id. advanced feature be used reduce number system calls asynchronously waiting events. usage example be found the music block, updates when dbus signals new song.example:pub fn (config: value, tx: sender<task>, theme: value) -> template { let text = textwidget::(theme.clone()).with_text(\"'m template!\"); template { id: uuid::new_v4().simple().to_string(), update_interval: duration::(get_u64_default!(config, \"interval\", 5), 0), text: text, tx_update_request: tx, theme: theme, }}step 4: implement block interface blocks are basically structs implement trait (interface) block. interface defines following features:fn update(&mut self) -> option<duration> (required you don't a static block) this function update internal state your block, example during periodic updates. return duration until block wants be updated next. example, clock request to updated every 60 seconds returning (duration::(60, 0)) every . if return none, function not called again automatically.example:fn update(&mut self) -> option<duration> { self..set_text(format!(\"{}\", local::().format(&self.format))); (self.update_interval.clone())}fn view(&self) -> vec<&i3barwidget> (required) this function return widgets comprise ui your component. music block may, example, comprised a text widget multiple buttons. a vec wrap references your view.example:fn view(&self) -> vec<&i3barwidget> { vec![&self.]}fn id(&self) -> &str (required) need return unique identifier your block here. the template will already find uuid implementation being used here. is needed, example, send update requests (callbacks) a different thread.example:fn id(&self) -> &str { &self.id}fn click(&mut self, event: &i3barevent) (optional)here can react the user clicking block. i3barevent instance contains fields describe click action, including mouse button location down the pixel. may update internal state here. note this event is sent every block every click. filter, the event.name property, corresponds the name property widgets!example: event.name.is_some() { let action = match &event.name.clone().unwrap() &str { \"play\" => \"playpause\", \"next\" => \"next\", \"prev\" => \"previous\", _ => \"\" }; }}step 5: register blockedit src/blocks/mod.rs add: module export line: pub mod <name>; use directive: self::<name>::*;mapping a name string: \"<name>\" => boxed!(<name>::(config)),congratulations 're done. recompile just add block your config file .optional step 6: profile block this feature optimize performance your block. it compiling debug cargo build, call target/debug/i3status-rs < config your block> --profile <name your block>. will output file profiling data your block, analyze with pprof."
}