{
	"_id": "14160389",
	"site": "https://github.com/paulirish/pwmetrics",
	"title": " Progressive web metrics at your fingertipz",
	"author": "denar90",
	"date": "2017-06-13T13:34:46.946Z",
	"tags": {
		"categories": [
			"opensource",
			"metrics",
			"performance",
			"webperf",
			"lighthouse"
		],
		"languages": [
			"typescript",
			"javascript",
			"other"
		]
	},
	"content": "readme.md pwmetrics progressive web metrics your fingertipz. cli tool lib gather performance metrics via lighthouse. beta.documentation these metrics the works. you hit bugs the metrics collection, report lighthouse issues. to articleinstall $ yarn global add pwmetrics# $ yarn add --dev pwmetricscli usage$ pwmetrics <url> <flags>pwmetrics http://example.com/# --runs=n does n runs (eg. 3, 5), reports median run's numbers.# median run selected run the median tti.pwmetrics http://example.com/ --runs=3# --json reports json details stdout.pwmetrics http://example.com/ --json# returns...# {runs: [{# \"timings\": [# {# \"name\": \" contentful paint\",# \"value\": 289.642# },# {# \"name\": \" meaningful paint\",# \"value\": 289.6# },# ...# --output-path file path save results.pwmetrics http://example.com/ --output-path='pathtofile/file.json'# --config provide configuration (defaults `package.json`). _defining config_ below.pwmetrics --config=pwmetrics-config.js# --submit submit results google sheets. _defining submit_ below.pwmetrics --submit# --upload upload lighthouse traces google drive. _defining upload_ below.pwmetrics --upload# --view view lighthouse traces, were uploaded google drive, devtools. _defining view_ below.pwmetrics --view#### cli options useful ci### --expectations assert metrics results against provides values. _defining expectations_ below.pwmetrics --expectationsdefining config# run pwmetrics config package.jsonpwmetrics --configpackage.json... \"pwmetrics\": { \"url\": \"http://example.com/\", // configuration options }...# run pwmetrics config pwmetrics-config.jspwmetrics --config=pwmetrics-config.jspwmetrics-config.jsmodule.exports = { url: 'http://example.com/', // configuration options. read _all available configuration options_} available configuration optionspwmetrics-config.jsmodule.exports = { url: 'http://example.com/', flags: { // aka feature flags runs: '3', // number runs submit: true, // turn submitting google sheets upload: true, // turn uploading google drive view: true, // open uploaded traces google drive devtools expectations: true // turn assertation metrics results against provides values }, expectations: { // expectations values are examples, your cases set own // 's required use metrics, can just few them // read _available metrics_ where keys are defined ttfcp: { warn: '>=1500', error: '>=2000' }, ttfmp: { warn: '>=2000', error: '>=3000' }, fv: { ... }, psi: { ... }, vc85: { ... }, vs100: { ... }, tti: { ... } }, sheets: { type: 'google_sheets', // sheets service type. available types: google_sheets options: { spreadsheetid: 'sheet_id', tablename: 'data' } }, clientsecret: { // data object. be // either // (using everything step 1 here)[https://developers.google.com/sheets/api/quickstart/nodejs#step_1_turn_on_the_api_name] // // by (using everything step 1 here)[https://developers.google.com/drive/v3/web/quickstart/nodejs] }}defining expectationsrecipes using ci# run pwmetrics config package.jsonpwmetrics --expectationspackage.json... \"pwmetrics\": { \"url\": \"http://example.com/\", \"expectations\": { ... } }...# run pwmetrics config pwmetrics-config.jspwmetrics --expectations --config=pwmetrics-config.jsdefining submitsubmit results google sheetsinstructions:copy spreadsheet.copy id the spreadsheet the config value sheets.options.spreadsheetid property.setup google developer project get credentials. (everything step 1 here) a client_secret put into config value clientsecret property.# run pwmetrics config package.jsonpwmetrics --submit# run pwmetrics config pwmetrics-config.jspwmetrics --submit --config=pwmetrics-config.jspwmetrics-config.jsmodule.exports = { 'url': 'http://example.com/', 'sheets': { ... }, 'clientsecret': { ... }}defining uploadupload lighthouse traces google driveinstructions:setup google developer project get credentials. (everything step 1 here) a client_secret put into config value clientsecret property.# run pwmetrics config package.jsonpwmetrics --upload# run pwmetrics config pwmetrics-config.jspwmetrics --upload --config=pwmetrics-config.jspwmetrics-config.jsmodule.exports = { 'url': 'http://example.com/', 'clientsecret': { ... }}view lighthouse traces timeline-viewershow lighthouse traces timeline-viewer.required use upload flagtimeline-viewer - shareable urls your chrome devtools timeline traces.# run pwmetrics config package.jsonpwmetrics --upload --view# run pwmetrics config your-own-file.jspwmetrics --upload --view --config=-own-file.jspwmetrics-config.jsmodule.exports = { 'url': 'http://example.com/', 'clientsecret': { ... }}available metrics:ttfcp - contentful paintttfmp - meaningful paintpsi - perceptual speed indexfv - visual changevc - visually complete 100%tti - to interactivevc85 - visually complete 85%default lighthouse optionsdisablecputhrottling is set false default. means cpu throttling 5x is enabled. turn off, run pwmetrics http:example.com --disablecputhrottlingapiconst pwmetrics = require('pwmetrics');const pwmetrics = pwmetrics('http://example.com/', options); // _all available configuration options_ be used `options`pwmetrics.start(); // returns promiseoptions option type default description flags object { runs: 1, submit: false, upload: false, view: false, expectations: false, disablecputhrottling: false} feature flags expectations object {} defining expectations above. sheets object {} defining submit above. clientsecret object {} client secrete data generated google api console. setup google developer project get credentials apply everything step 1 here. recipesgulplicenseapache 2.0. google inc."
}