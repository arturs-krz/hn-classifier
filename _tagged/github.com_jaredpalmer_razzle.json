{
	"_id": "14352150",
	"site": "https://github.com/jaredpalmer/razzle",
	"title": "Create Server-Rendered Universal React Apps with No Configuration",
	"author": "palmdeezy",
	"date": "2017-06-13T13:57:47.306Z",
	"tags": {
		"categories": [
			"opensource",
			"isomorphic",
			"universal",
			"react",
			"preact",
			"inferno",
			"typescript",
			"reasonml",
			"reason-react",
			"rax",
			"webpack",
			"javascript"
		],
		"languages": [
			"javascript",
			"css"
		]
	},
	"content": "readme.md razzle universal javascript applications are tough setup. either buy a framework next.js react-server, fork boilerplate, set things yourself. razzle aims fill void abstracting the required tooling your universal javascript application a single dependency, then leaving rest the architectural decisions frameworks, routing, data fetching to .featuresrazzle comes the \"battery-pack included\" is part a complete javascript breakfast: universal hot module replacement, both client server update whenever make edits. annoying restarts necessarycomes your favorite es6 javascript goodies (through babel-preset-razzle)comes the same css setup create-react-appworks react, reason-react, preact, inferno, rax well angular vue that's thingescape hatches customization via .babelrc razzle.config.jstable contentsquick startgetting startedinstallationcreating appnpm start yarn startnpm run build yarn buildnpm run start:prod yarn start:prodcustomizationextending babel configextending webpackrazzle api referencerazzle startrazzle buildrazzle.config.jsenvironment variablesadding temporary environment variables your shellwindows (cmd.exe)linux, macos (bash)adding environment variables .env other .env files are be used? razzle works ( secret sauce)inspirationquick start$ npm -g create-razzle-appcreate-razzle-app -appcd -appnpm start with yarnyarn create razzle-app -appcd -app yarn start open http://localhost:3000/ see app. console should like :when re ready deploy production, create minified bundle npm run build.getting startedinstallation you the latest version yarn, can skip . otherwise:install razzle globally:npm -g create-razzle-appcreating app create app, run:create-razzle-app -app with yarn create (!):yarn create razzle-app -app can bootstrap one the examples adding --example <example-name> your command.create-razzle-app --example -preact -app with yarn createyarn create razzle-app -app -- --example -preact( -- is needed yarn ignore options meant create-razzle-app) will create directory called -app inside current folder.inside directory, will generate initial project structure install transitive dependencies.-app/ readme.md node_modules/ package.json .gitignore public/ favicon.ico robots.txt src/ app.css    app.js    client.js # client entry point    home.css    home.js    server.js .         # main server code ( express application)    react.svg index.js # server entry pointnote: default application is universal react application react router 4 an express server. don't this setup, a at of examples. each is installable just few commands.once installation is done, can run commands inside project folder:npm start yarn startruns project development mode. can view application http://localhost:3000 page reload you edits.npm run build yarn buildbuilds app production the build folder. build is minified the filenames include hashes. app is ready be deployed!npm run start:prod yarn start:prodruns compiled app production. can again view application http://localhost:3000customizationextending babel configrazzle comes most es6 stuff need. however, you to add own babel transformations, add .babelrc file the root your project.{ \"presets\": [ \"razzle/babel\", \"stage-0\" ]}extending webpack can extend underlying webpack config. create file called razzle.config.js your project's root.// razzle.config.jsmodule.exports = { modify: (config, {target, dev}, webpack) => { // something config return config }} word advice: razzle.config.js is escape hatch. however, since 's javascript, can should publish modify function npm make reusable across projects. example, imagine added custom webpack loaders published as package npm my-razzle-modifictions. could write razzle.config.js so:// razzle.config.jsconst modify = require('-razzle-modifictions');module.exports = { modify}last not least, you find yourself needing more customized setup, razzle is very forkable. is webpack configuration factory is 300 lines code, 3 scripts (build, start, init). paths setup is shamelessly taken create-react-app, the rest the code related logging.razzle api referencerazzle startruns razzle development mode. can view application http://localhost:3000razzle buildbuilds razzle project production. final build located build directory.razzle.config.js are a few settings should about.// razzle.config.jsmodule.exports = { modify: (config, { target, dev }, webpack) => { // something return config return config }}environment variables environment variables are embedded during build . since razzle produces static html/css/js bundle an equivalent static bundle your server, cannot possibly read at runtime.process.env.razzle_public_dir: path the public directory.process.env.razzle_assets_manifest: path a file containing compiled asset outputsprocess.env.verbose: default is false, setting to true not clear console you edits development (useful debugging).process.env.port: default is 3000, unless changedprocess.env.host: default is 0.0.0.0process.env.node_env: 'development' 'production'process.env.build_target: either 'client' 'server' can create own custom build- environment variables. must start razzle_. other variables except ones listed above be ignored avoid accidentally exposing private key the machine could the same name. changing environment variables require to restart development server it is running. environment variables be defined you process.env. example, having environment variable named razzle_secret_code be exposed your js process.env.razzle_secret_code.adding temporary environment variables your shelldefining environment variables vary between oses. s important know this manner is temporary thelife the shell session.windows (cmd.exe)set razzle_secret_code=abcdef&&npm start(note: lack whitespace is intentional.)linux, macos (bash)razzle_secret_code=abcdef npm startadding environment variables .env define permanent environment variables, create file called .env the root your project:razzle_secret_code=abcdef other .env files are be used?.env: default..env.local: local overrides. file is loaded all environments except test..env.development, .env.test, .env.production: environment-specific settings..env.development.local, .env.test.local, .env.production.local: local overrides environment-specific settings.files the left more priority files the right:npm start: .env.development.local, .env.development, .env.local, .envnpm run build: .env.production.local, .env.production, .env.local, .envnpm test: .env.test.local, .env.test, .env (note .env.local is missing) variables act the defaults the machine does explicitly set .please refer the dotenv documentation more details.note: you are defining environment variables development, ci /or hosting platform most likely need defined well. consult documentation to this. example, the documentation travis ci heroku. razzle works ( secret sauce)tl;dr: 2 configs, 2 ports, 2 webpack instances, both watching hot reloading same filesystem, parallel during development a little webpack.output.publicpath magic. development mode (razzle start), razzle bundles both client server code using different webpack instances running hot module replacement parallel. while server is bundled run whatever port specify src/index.js (3000 is default), client bundle (.e. entry point src/client.js) is served via webpack-dev-server a different port (3001 default) its publicpath explicitly set localhost:3001 ( not / many setups ). then server's html template points the absolute url the client js: localhost:3001/static/js/client.js. since both webpack instances watch same files, whenever make edits, hot reload exactly same . best all, they the same code, same webpack loaders, the same babel transformations, never run a react checksum mismatch error.inspirationpalmerhq/backpacknytimes/kytfacebookincubator/create-react-apphumblespark/sambellzeit/next.jsauthorjared palmer"
}