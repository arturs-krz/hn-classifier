{
	"_id": "14405810",
	"site": "https://github.com/taviso/loadlibrary",
	"title": "Porting Windows Dynamic Link Libraries to Linux",
	"author": "dmit",
	"date": "2017-06-13T13:56:41.351Z",
	"tags": {
		"categories": [
			"opensource",
			"linux",
			"porting",
			"windows"
		],
		"languages": [
			"c",
			"c++",
			"other"
		]
	},
	"content": "readme.md porting windows dynamic link libraries linuxintroduction repository contains library allows native linux programs load call functions a windows dll. a demonstration, 've ported windows defender linux.$ ./mpclient eicar.commain(): scanning eicar.com...enginescancallback(): scanning inputenginescancallback(): threat virus:dos/eicar_test_file identified. does work? peloader directory contains custom pe/coff loader derived ndiswrapper. library process relocations imports, provide dlopen- api. code supports debugging gdb (including symbols),basic block coverage collection, runtime hooking patching. works? intention is allow scalable efficient fuzzing self-containedwindows libraries linux. candidates might video codecs,decompression libraries, virus scanners, image decoders, so .c++ exception dispatch unwinding.loading additional symbols ida.debugging gdb (including symbols), breakpoints, stack traces, etc.runtime hooking patching.support asan valgrind detect subtle memory corruption bugs. you need add support any external imports, writing stubs is usuallyquick easy.why?distributed, scalable fuzzing windows be challenging inefficient. is especially true endpoint security products, use complexinterconnected components span across kernel user space. often requires spinning an entire virtualized windows environment fuzz or collect coverage data. is less a problem linux, i've found porting components windows antivirus products linux is often possible. allows to run code m testing minimal containers very little overhead, easily scale testing. is personal opinion, i think linux has better tools. ¯\\_()_/¯windows defendermsmpeng is malware protection service is enabled default windows8, 8.1, 10, windows server 2016, so . additionally, microsoft securityessentials, system centre endpoint protection various microsoftsecurity products share same core engine. core component msmpeng responsible scanning analysis is calledmpengine. mpengine is vast complex attack surface, comprising handlers dozens esoteric archive formats, executable packers, full systememulators various architectures interpreters various languages. of code is accessible remote attackers.building build test client, simply type .$ makedependenciesnote the .i686 :i386 suffixes are important, need 32bit libraries use 32bit dll.fedora / redhatubuntu / debiancommentglibc-devel.i686libc6-dev:i386libgcc.i686gcc-multilibreadline-devel.i686libreadline-dev:i386optional, used mpscript.cabextractcabextractused extract definitions. will need download 32-bit antimalware update file this page:https://www.microsoft.com/security/portal/definitions/adl.aspx#manual should a direct link the right file:http://.microsoft.com/fwlink/?linkid=121721&arch=x86 will download file called mpam-fe.exe, is cabinet file can extracted cabextract. extract files the enginedirectory:$ cabextract mpam-fe.exeextracting cabinet: mpam-fe.exe extracting mpsigstub.exe extracting mpavdlta.vdm extracting mpasdlta.vdm extracting mpavbase.vdm extracting mpasbase.vdm extracting mpengine.dll done, errors. you to which version got, try :$ exiftool mpengine.dll | grep 'product version number'product version number : 1.1.13701.0running main mpengine loader is called mpclient, accepts filenames scan a parameter.$ ./mpclient netsky.exemain(): scanning netsky.exe...enginescancallback(): scanning inputenginescancallback(): threat worm:win32/netsky.p@mm identified. are other sample tools, mpstreamfuzz mpscript.debugging you to debug crash, single step through routine set breakpoints,follow examples. , you need map file ida.microsoft doesn't release public symbols every build, sometimes symbols lag behind a few months release. sure 're using mpengine version public symbols available. the following sample commandline generate map idb files.> idaw - -p+ -s\"createmap.idc mpengine.map\" mpengine.dll you generate map files windows, 'll crlf line terminators, fix like :$ dos2unix mpengine.map you run mpclient under gdb, will detect debugger print commands need enter teach gdb the symbols:$ gdb -q ./mpclient(gdb) r testfile.txtstarting program: mpclientmain(): gdb: add-symbol-file engine/mpengine.dll 0xf6af4008+0x1000main(): gdb: shell bash genmapsym.sh 0xf6af4008+0x1000 symbols_19009.o < mpengine.mapmain(): gdb: add-symbol-file symbols_19009.o 0program received signal sigtrap, trace/breakpoint trap.0x0804d213 main (argc=1, argv=0xffffcc64, envp=0xffffcc6c) mpclient.c:156156 __debugbreak();(gdb) you enter commands shows gdb, will symbols available.note genmapsym.sh assumes 're using gnu awk.(gdb) add-symbol-file engine/mpengine.dll 0xf6af4008+0x1000add symbol table file \"engine/mpengine.dll\" .text_addr = 0xf6af5008reading symbols engine/mpengine.dll...done.(gdb) shell bash genmapsym.sh 0xf6af4008+0x1000 symbols_19009.o < mpengine.map(gdb) add-symbol-file symbols_19009.o 0add symbol table file \"symbols_19009.o\" .text_addr = 0x0reading symbols symbols_19009.o...done.(gdb) p as3_parsemetadata_swf_vars_t$1 = {void (void)} 0xf6feb842 <as3_parsemetadata_swf_vars_t> you continue, it run normal.(gdb) cbreakpoints, watchpoints backtraces work normal, although may more reliable use hardware breakpoints software breakpoints. use hardware breakpoints gdb, just hb hbreak instead break. note you get limited number hardware breakpoints.(gdb) b as3_parsemethodinfo_swf_vars_tbreakpoint 1 0xf6feb8da(gdb) ccontinuing.main(): scanning test/input.swf...enginescancallback(): scanning inputbreakpoint 1, 0xf6feb8da as3_parsemethodinfo_swf_vars_t ()(gdb) bt#0 0xf6feb8da as3_parsemethodinfo_swf_vars_t ()#1 0xf6dbad7f swfscanfunc ()#2 0xf6d73ec3 ufsscannerwrapper__scanfile_scanresult_t ()#3 0xf6d6c9e3 ufsclientrequest__fscan_scan_reply ()#4 0xf6d6a818 ufsnode__scanloophelper_wchar_t ()#5 0xf6d6a626 ufsnode__analyze_ufsanalyzesetup ()#6 0xf6d71f7f ufsclientrequest__analyzeleaf_wchar_t ()#7 0xf6d71bb9 ufsclientrequest__analyzepath_wchar_t ()#8 0xf6dbbd88 std___string_alloc_std___string_base_types_char_std__allocator_char______myptr_void_ ()#9 0xf6d75e72 ufscmdbase__executecmd__lambda_c80a88e180c1f4524a759d69aa15f87e____lambda_c80a88e180c1f4524a759d69aa15f87e__ ()backtrace stopped: previous frame inner this frame (corrupt stack?)(gdb) x/3i $pc=> 0xf6feb8da <as3_parsemethodinfo_swf_vars_t+7>:lea ebx,[edx+0x1c] 0xf6feb8dd <as3_parsemethodinfo_swf_vars_t+10>:push esi 0xf6feb8de <as3_parsemethodinfo_swf_vars_t+11>:mov edx,ebx about wine winelib? project does replace wine winelib.winelib is used port windows c++ projects linux, wine isintended run full windows applications. project is intended allownative linux code load simple windows dlls. closest analogy be ndiswrapper for userspace.licensegpl2"
}