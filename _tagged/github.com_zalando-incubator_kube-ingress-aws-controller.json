{
	"_id": "14137413",
	"site": "https://github.com/zalando-incubator/kube-ingress-aws-controller",
	"title": " Kubernetes Ingress Controller for AWS",
	"author": "ZalandoTech",
	"date": "2017-06-13T13:35:12.671Z",
	"tags": {
		"categories": [
			"opensource",
			"kubernetes",
			"ingress",
			"aws",
			"golang",
			"skipper",
			"docker-image",
			"ingress-controller"
		],
		"languages": [
			"go",
			"makefile"
		]
	},
	"content": "readme.md kubernetes ingress controller aws is ingress controller kubernetes open-source container deployment,scaling, management system aws. runs inside kubernetes cluster monitor changes your ingressresources orchestrate aws load balancers accordingly. ingress controller uses ec2 instance metadata the worker node where 's currently running find additional details the cluster provisioned kubernetes top aws. information is used manage aws resources each ingress objects the cluster.featuresuses cloudformation guarantee consistent stateautomatic discovery ssl certificatesautomatic forwarding requests all worker nodes, with auto scalingautomatic cleanup unnecessary managed resourcesdevelopment status controller is work progress, under active development. aims be -of--box useful anyonerunning kubernetes. jump down the quickstart try out please let know you trouble getting running filing issue. of writing, 's being used in small production cases zalando, is yet battle-tested. 're actively seeking devs/teams/companies try out share feedback we make improvements. are eager bring contributors board. our contributor guidelines get started, claim \"help wanted\" item.why created ingress controller maintainers this project are building infrastructure runs kubernetes top aws large scale ( nearly 200 delivery teams), with automation. such, 're creating own tooling support new infrastructure. couldn't find existing ingress controller operates this does, we created ourselves.'re using ingress controller skipper, http router zalandohas used production more a as part its front-end microservices architecture. skipper's opensource. feel free use , or another ingress your choosing. it works controller continuously polls api server check ingress resources. runs infinite loop. each cycle creates load balancers new ingress resources, deletes load balancers obsolete/removedingress resources. is achieved using aws cloudformation. more details check cloudformation documentation controller not manage security groups required allow access the internet the load balancers. assumes their lifecycle is external the controller itself.discovery startup, controller discovers aws resources required the controller operations: autoscalinggroupsimple lookup the auto scaling group name matches aws:autoscaling:groupname tag theec2 instance running controller. security grouplookup the \"name\" tag the security group matching stack the controller node thetag aws:cloudformation:logical-id matching value ingressloadbalancersecuritygroupcreating load balancers the controller learns new ingress resources, uses host specified it automatically determine most specific, valid certificate use. certificate has be valid at least 7 days. example ingress:apiversion: extensions/v1beta1kind: ingressmetadata: name: test-appspec: rules: - host: test-app.example.org http: paths: - backend: servicename: test-app-service serviceport: main-port application load balancer created the controller have both http listener an https listener. latter use automatically selected certificate.alternatively, can specify amazon resource name (arn) the desired certificate an annotation the shown here:apiversion: extensions/v1beta1kind: ingressmetadata: name: myingress annotations: zalando.org/aws-load-balancer-ssl-cert: arn:aws:acm:eu-central-1:123456789012:certificate/f4bd7ed6-bf23-11e6-8db1-ef7ba1500c61spec: rules: - host: test-app.example.org http: paths: - backend: servicename: test-app-service serviceport: main-port new application load balancers a custom tag marking as managed load balancers differentiate from load balancers. tag looks this:`kubernetes:application` = `kube-ingress-aws-controller` also share clusterid tag other resources the same cloudformation stack.deleting load balancers the controller detects a managed load balancer the current cluster doesn't a matching ingressresource anymore, deletes the previously created resources.building project provides makefile you use build either binary a docker image. have have glide installed doglide install, before building.building binary build binary the linux operating system, simply run or build.linux.building docker image create docker image instead, execute build.docker. can push docker image the dockerregistry your choice.deploy deploy ingress controller, the example yaml the descriptor. cancustomize image used the example yaml file. provide registry.opensource.zalan./teapot/kube-aws-ingress-controller:latest a publicly usable docker imagebuilt this codebase. can deploy with 2 easy steps:replace placeholder your region inside example yaml, ex., eu-west-1 kubectl execute command kubectl apply -f deploy/ingress-controller.yamltrying out ingress controller's responsibility is limited managing load balancers, described above. have fullyfunctional setup, additionally the ingress controller, can skipper route traffic the application. setup follows 'sdescribed here. can deploy skipper a daemonset using another example yaml executing following command:kubectl apply -f deploy/skipper.yaml complete setup, 'll need fulfill additional requirements regarding security groups iamroles; more info here.dns have convenient dns names your application, can thekubernetes-incubator project, external-dns.'s strictly necessary this ingress controller work,though.contributing welcome contributions, ideas bug reports via issues pull requests;here are those contributor guidelines again.contactcheck maintainers file email addresses.license mit license (mit) copyright Â© [2017] zalando se, https://tech.zalando.compermission is hereby granted, free charge, any person obtaining copy this software associated documentation files ( software), deal the software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /or sell copies the software, to permit persons whom software is furnished do , subject the following conditions: above copyright notice this permission notice shall included all copies substantial portions the software. software is provided is, without warranty any kind, express implied, including not limited the warranties merchantability, fitness a particular purpose noninfringement. no event shall authors copyright holders liable any claim, damages other liability, whether an action contract, tort otherwise, arising , out or connection the software the or dealings the software."
}