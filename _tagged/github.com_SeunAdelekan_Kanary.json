{
	"_id": "14486347",
	"site": "https://github.com/SeunAdelekan/Kanary",
	"title": "Kanary: A Kotlin web framework for building scalable and expressive RESTful APIs",
	"author": "iyanuadelekan",
	"date": "2017-06-13T14:10:07.875Z",
	"tags": {
		"categories": [
			"opensource",
			"kotlin",
			"kanary",
			"rest-api",
			"server",
			"microservice",
			"java"
		],
		"languages": [
			"kotlin"
		]
	},
	"content": "readme.md kanary minimalist kotlin web framework building scalable expressive restful apisfun main(args: array<string>) { val app = kanaryapp() val server = server() val userrouter = kanaryrouter() val usercontroller = usercontroller() userrouter \"users/\" usercontroller userrouter.post(\"/\", usercontroller::createuser) userrouter.(\"details/\", usercontroller::retrieveuser) app.mount(userrouter) server.handler = apphandler(app) server.listen(8080) }installationframework resources are contained the package com.iyanuadelekan.kanary can included your application via maven, gradle ivy. include necessary of following your application:maveninclude jcenter a plugin repository<repositories> <repository> <id>jcenter</id> <name>jcenter</name> <url>https://jcenter.bintray.com/</url> </repository></repositories>add kanary a project dependency<dependencies> ... <dependency> <groupid>com.iyanuadelekan</groupid> <artifactid>kanary</artifactid> <version>0.9.1</version> </dependency> ...</dependencies>gradlerepositories { jcenter()}dependencies { compile 'com.iyanuadelekan:kanary:0.9.1'}ivy<dependency org='com.iyanuadelekan' name='kanary' rev='0.9.1'> <artifact name='kanary'></artifact></dependency>others other cases, can download jars bintrayfeaturesexpressive routingfocus code claritysupport controllersinclusion http helpersfull support asynchronous middlewarepresence concise english 'one liners'availability action lifecycle callback methodsquick start breakdown project packages is here.creating kanary app starting server simple kanary app listens a port is created initializing istance kanaryapp, creating server object, creating apphandler instance, setting instance the server's handler starting server listen a specified port.fun main(args: array<string>) { val app = kanaryapp() val server = server() server.handler = apphandler(app) server.listen(8080)}creating controllers controller is instance a class extends kanarycontroller. class below is simple controller class does nothing.class dummycontroller : kanarycontroller()creating controller actionsthough fact the above class is controller is correct, generally 'll to specify actions within controller route requests .an action is controller function takes three parameters its arguments: instance request ( mutable request object) instance httpservletrequest ( immutable request object) instance httpservletresponse ( response object) valid action is shown within controller belowclass usercontroller : kanarycontroller() { fun createuser(baserequest: request, request: httpservletrequest, response: httpservletresponse) { // action code goes here } }controller action lifecycle callbacks are distinct action lifecycle callbacks can declared within kanarycontroller. are:beforeaction - declared, executes immediately before action is executedafteraction - declared, executes immediately an action is executeddeclaring two callbacks is easy declaring function within controller:class usercontroller : kanarycontroller() { override fun beforeaction(request: httpservletrequest, response: httpservletresponse?) { println(\" execute before anything else!\") } override fun afteraction(request: httpservletrequest, response: httpservletresponse?) { println(\" execute once action is completed!\") } fun createuser(baserequest: request, request: httpservletrequest, response: httpservletresponse) { // action code goes here } }routing routing is done one more specified routers. router is instance kanaryrouter:val userrouter = kanaryrouter()declaring route pathsuserrouter \"users/\" usercontroller //router uses usercontroller cater all routes prefixed '/users'userrouter.post(\"/\", usercontroller::createuser) //maps post '/users/' to createuser action usercontroller above also done :userrouter.post(\"users//\", usercontroller::createuser, usercontroller)mounting routers application single router be mounted a kanaryapp instance follows:app.mount(userrouter)numerous routers be mounted a :app.mount(routera, routerb, routerc, ..., routern)middleware middleware the form a lambda. single nullable instance httpservletrequest is passed every middleware added the application.app. { println(\"'m middleware!\") }app. { println(\"request path info: ${.pathinfo}\") }multiple middleware be added a :app.({ println(\"'m middleware!\") }, { println(\"request path info: ${.pathinfo}\") } ) is important note all middleware execute a non blocking fashion parrallel the main application thread.bundled middleware sole middleware bundled kanary is 'simpleconsolerequestlogger'. prints succinct information each request received the console.app.(simpleconsolerequestlogger)working requests responseshandling requests most cases, request handling should done the of immutable httpservletrequest instance passed your controller actions. instance is object java's httpservletrequest kanary specific helper functions. additional functions provided are:functiondescriptionreturn typegetbody()used retrieve http request body contentjsonnode?getbodyasjson()used retrieve http request body content the form a json stringstring mutable request object is exposed the form a request instance. request implements httpservletrequest as such has behaviours characteristics similar those possessed the httpservletrequest instance passed an action. addition the functions shown the table above, request instance passed has:functiondescriptionreturn typedone()used specify a request has been successfully handledunitresponding a requestresponses are sent a client the of httpservletresponse passed an action. addition all characteristics behaviours exposed this instance, following kanary specific helper functions are available:functiondescriptionreturn typewithstatus(status: int)sets response status codeunitsend(message: string)sends plain text message a clientunitsendjson(responsenode: jsonnode?)sends json response a clientunitend()ends http response processunitsendstatus(status: int)sends response status code plain textunitsendfile(file: file, contenttype: string=\"\", contentlength: int=0)sends file a clientunitredirect(url: string)redirects request the specified urlunitsendhtml(html: string)sends html content a clientunit functions above except 'sendfile' be written infix notation ( recommended of writing code kanary). permits writing beautiful, clear expressive code responding clients.thus send plain text message a client:class usercontroller : kanarycontroller() { fun createuser(baserequest: request, request: httpservletrequest, response: httpservletresponse) { response withstatus 201 send \"user successfully created!\" baserequest.done() } }packagesclasspackagekanaryappcom.iyanuadelekan.kanary.appkanarycontrollercom.iyanuadelekan.kanary.corekanaryroutercom.iyanuadelekan.kanary.coreapphandlercom.iyanuadelekan.kanary.handlersservercom.iyanuadelekan.kanary.serverdependenciesjetty ( an application server engine)jackson-databind ( json serialization/deserialization)philosophykanary was created order facilitate quick implementation stable non verbose restful apis the kotlin programming language.convention versus configurationkanary was designed utilise respectful approach aiding engineers developers create micro-service based applications. a consequence this approach, conventions are forced upon developers. means which application is implemented is the sole discretion the implementer.road mapaddition testscreation a vast array sample applications demonstrating use kanarycreation cli utilities support rapid creation kanary applicationsaddition hot reloading capabilities change save app program filesimplementation a mailerimplementation a template engine system those wish use kanary an mvc oriented adding support other popular application servers tomcat nettycontributingcontributions are welcome all corners the world! read contributions.rst file get started.individuals interested becoming part the core development team connect me linkedin here send message expressing interest.kanary was created iyanu adelekan. is current project lead.licenseapache 2.0"
}