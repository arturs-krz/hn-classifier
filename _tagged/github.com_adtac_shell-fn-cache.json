{
	"_id": "14462293",
	"site": "https://github.com/adtac/shell-fn-cache",
	"title": " Like Python's lru_cache, but for shell functions",
	"author": "adtac",
	"date": "2017-06-13T13:05:02.861Z",
	"tags": {
		"categories": [
			"opensource",
			"python",
			"shell"
		],
		"languages": [
			"shell"
		]
	},
	"content": "readme.md shell-fn-cacheever wished python's incredibly useful @lru_cache existed shell functions? , now be good to start. this library, can cache shell functions calls. a simple liner, can memoize functions that every subsequent call the one is near-instantaneous. examplelet's you've written glorious function scrapes url curl greps a particular keyword. the keyword exists, function print exists.function keyword_search() { [ -z \"$(curl -s \"$1\" | grep -o \"$2\")\" ]; printf \"does exist\" else printf \"exists\" fi}every call this function take time depending how your network connection is. example,$ keyword_search \"https://httpbin.org/robots.txt\" \"user-agent\"exists... took 1.8 seconds my laptop. similarly,$ keyword_search \"https://httpbin.org/robots.txt\" \" string does exist\"does exist... took 1.9 seconds. you guarantee the response be same, every subsequent keyword_search \"https://httpbin.org/robots.txt\" \"user-agent\" still about 1.8 seconds. if told there's app the market cached output return code the function? do , simply source script ('m assuming 're using zsh here):$ source fn-cache.zsh you specify functions want cached:$ cache_fn \"keyword_search\" this, first call make a particular set arguments take regular . but every subsequent call be near instantaneous:$ keyword_search \"https://httpbin.org/robots.txt\" \"user-agent\" # will 1.8 secondsexists$ keyword_search \"https://httpbin.org/robots.txt\" \"user-agent\" # instantaneousexists$ keyword_search \"https://httpbin.org/robots.txt\" \"user-agent\" # instantaenousexists don't worry, return codes are preserved, course ( function still return same return code used before caching, faster ).to a couple other useless examples, the examples/ directory.supported shellscurrently, fn-cache supports following shells:zsh you to your favorite shell supported, please open issue. alternatively, can contribute code adds support. do , create new file named fn-cache.(bash|zsh|ksh|fish) an api 's same the zsh . you may add examples the examples/ directory (either adapt existing ones create ones altogether).license work is licensed under mit license. see more, click here."
}