{
	"_id": "14261224",
	"site": "https://github.com/provejs/provejs-jquery",
	"title": " Prove.js, jquery form validation",
	"author": "dhollenbeck",
	"date": "2017-06-13T13:32:06.517Z",
	"tags": {
		"categories": [
			"opensource",
			"jquery-plugin",
			"validation"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md jquery plugin client-side validation html forms.introductionjquery-prove is client-side form validation plugin:input validators are jquery plugins.input decorators are jquery plugins.validators share data decorators via events.validators be:synchronous - return result immediately.asynchronous - return jquery deferred returns result later.delegated events the form the form dom be modified anytime.explict control configuration options via dynamic booleanators.modular design via suite jquery utility plugins.live form submit validation.stateful validations.input sanitization.meets accessibility standards section 508 wcag 2.0 (, aaa, aaaa).open source mit license.table contentsexamplesoptionsvalidatorsdecoratorsmethodseventsdestroyroadmapexamplesplease examples folder.prove optionsprove optionsprove accepts a single options config.form.prove({debug: false,fields: {// fields options below},submit: {// submit options below}});debugtype: bool,required: false,default: false,description: print debug info the developer console.fieldstype: object,required: true,description: defines field validations be performed. below more details.submittype: object,required: false,description: defines submit intercept handler options. below more details.field optionsform.prove({fields: {field1: {debug: false,enabled: true,selector: '[name=\"field1\"]',trigger: 'click change',stateful: true,sanitize: true,group: false,validators: {// validator options}},field2: {// ...},field3: {// ...}}});debugtype: boolrequired: false,default: false,description: print some debug info the developer console. debug defaults false.enabledtype: booleanator,required: false,default: true,descrption: enable field validation. value ':visible' only validate input the input visible. booleanator is something (bool, selector, sudo-selector, function) evaluates either true false. for example, specify enabled: ':visible' the field config be enabled the input is visible. perhaps, enable validation the input is empty setting enabled ':filled'.selectortype: string,required: false,default: '[name=\"field\"]',description: jquery selector you shift context the validation.triggertype: string false,required: false,default: 'change keyup click blur',description: events which want live validation happen. value false disable live validation. default value trigger changes two conditions 1) input type 2) the input is already the form dom the form.prove() is called. other words, you are dynamically inserted form inputs form.prove() you should specify event trigger values. you are dynamically inserted form inputs you all prove determine live event triggers. $.fn.provetriggers() details the default triggers.throttletype: int,required: false,default: 0,description: number milliseconds throttle (aka debounce) live validation.statefultype: bool,required: false,default: true,description: jquery-prove is stateful validator. can disable stateful validation setting stateful false. prove hashes input value determine the input value has changed since last validation. prove does stateful validation without keeping dom reference any inputs.sanitizetype: bool string,required: false,default: false,description: jquery-prove sanitize input values. jquery-prove has default sanitizer plugin ($.fn.sanitize) replaces common ms word unicode characters their equivalent ascii characters. can replace default sanitizer plugin your own specify specific sanitizer each input field using string value represents plugin name.grouptype: bool,required: false,default: false all radio inputs,description: should jquery-prove validate found inputs a group validate found inputs indivdually.validator optionsprove has powerful set validators. validator is a jquery plugin. validators more information.form.prove({fields: {field1: {validators: {proverequired: {debug: true, // optional (bool), defaults falseenabled: true, //optional (booleanator), defaults truemessage: 'message pass the decorator.'},provepattern: {regex: /^[ regex pattern]$/,message: 'message pass the decorator'},// ...}},field2: {// ...},field3: {// ...}}});each validator has 's own set options below is set the common options all prove validators.debugtype: bool,required: false,default: false,description: enalbe validator print debug information the developer console.enabledtype: booleanator,required: false,default: true,description: enable disable validation depending the value the booleanator.messagetype: string,required: true,description: string is passed the validator allows custom validators modifiy . utlimately, string value is passed the decorators via event data.submit optionsjquery-prove uses submit intercept handler ensures successful form validation before allowing form submit. submit intercept handler is bound default form.('click', ':submit', handler) really intercept handler is really click handler. submit intercept handler accepts following options:form.prove({fields: {},submit: {selector: 'button:submit',validate: true,enabled: true,}})where:debugtype: bool,required: false,default: false,description: enalbe submit intercept handler print debug information the developer console.selectortype: - string,required: - false,default: - 'button:submit',description: - jquery selector used bind submit intercept handler.validatetype: - booleanator,required: - false,default: - true,description: - determines validation should happen the intercept handler is invoked. you the form submit without validation set to value false, 'button:submit:('.skip-validation')' add class 'skip-validation' ( booleanator) your code just call `form.submit()'.enabledtype: - booleanator,required: false,default: true,description: enables form submit it validates true.should want stop normal form submission will need bind handler the form submit event:form.submit(function(event){event.preventdefault(); // stop form submit// something else, ajax submission form});should want have form no submit button will need submit form via ajax. can this adding form submit handler.form.submit(function(e) {// stop form submitting without validatione.preventdefault();// validate entire formvar url = '//server/path';var dfd = form.validate();var data = {field1: field1.val()};// wait validation completedfd.done(function(isvalid){ (isvalid !== false) {// submit data via ajax$.post(url, data);// update ui here}});});prove validatorsinput validation is handled jquery validator plugins.prove decoratorsform decoration is handled jquery decorator plugins.prove methods form automatically validated the user clicks submit button. however, can programatically validate form:var dfd = form.validate();dfd.done(function(isvalid){console.log('validation', isvalid);}); code also validate input.input.validate(); //returns chainable input reference you to pass validation immediately submit form:form.submit();prove eventsprove is publisher events. events are triggered either input the form share data the decorators.status.form.prove - triggered the formstatus.input.prove - triggered the inputplease events more details.destroy can remove prove plugin either:form.data('prove').destroy();form.remove();booleanatormany the prove options are booleanators. booleanator is dynamic configuration option is evaluated prove immediately before is used. can defined either:bool:evaluation: uses bool value.values: true false,jquery dom selector:evaluation: the dom selection returns elements it evaluates true otherwise false.context: context the dom selection is window.document.examples: 'fieldset#section:visible', 'input[type=\"hidden\"]:empty', '#-checkbox:checked'jquery dom pseudo-selector:evaluation: the dom selection returns elements it evaluates true otherwise false.context - context the dom selection is input.examples: ':visible', ':empty'javascript function:evaluation: function should return either true false accepts inputs.example: function(){ return window.myvar; } illustrate power a booleanator consider following example where user is required enter either phone number email address:form.prove({fields: {email: {validators: {proverequired: {enabled: '[name=\"phone\"]:blank', //<=== booleanatormessage: 'please enter contact email phone number below.'},provepattern: {regex: patterns.commons.email,message: 'please enter valid email address.'}}},phone: {validators: {proverequired: {enabled: '[name=\"email\"]:blank', //<=== booleanatormessage: 'please enter contact phone email address above.'},provepattern: {regex: patterns.commons.phone,message: 'please enter valid phone number.'}}}}});form.decorate('bootstrap');contributingsetupnpm install gruntnpm install grunt-eslintnpm install grunt-contrib-concatnpm install grunt-contrib-uglifylintgrunt lintbuildgrunt buildroadmapnpmhttp://blog.npmjs.org/post/112712169830/making--jquery-plugin--better--npmmailcheckhttps://github.com/mailcheck/mailcheck#usage-without-jqueryunobtrusive configurationperhaps support unobtrusive configuration via $.fn.proveconfig().var options = form.proveconfig();form.prove(options);// if dynamically insert input, for reason did already config fieldinput.proveconfig();unit testsneed unit tests.http://qunitjs.com/https://www.sitepoint.com/unit-test-javascript-mocha-chai/https://github.com/rstacruz/jsdom-globalhttp://digitalbush.com/2011/03/29/testing-jquery-plugins--node-js--jasmine/https://gist.github.com/yaireo/d281bf017d203556f96chttps://github.com/verba/jquery-readyselector/blob/master/test/jquery.readyselector_spec.jshttps://sean.is/writing/client-side-testing--mocha--karma/http://codeutopia.net/h/subscribe/https://coderwall.com/p/qaebwq/running-mocha-tests-without--browser--even-phantomjsfaqcreate faq frequenty asked questions answers."
}