{
	"_id": "14473144",
	"site": "https://github.com/sakurity/securelogin",
	"title": "SecureLogin Protocol",
	"author": "nuII",
	"date": "2017-06-13T13:55:01.908Z",
	"tags": {
		"categories": [
			"opensource",
			"authentication",
			"passwords",
			"password-manager",
			"oauth2",
			"2fa"
		],
		"languages": [
			"javascript",
			"other"
		]
	},
	"content": "readme.md securelogin protocolabstracttry demo ?securelogin is decentralized authentication protocol websites apps. classic passwords/2fa are poorly designed, hard backup inconvenient use. securelogin is all--one solution creates cryptographic private key your email master password sign everywhere helps to forget passwords.blog post 1.0 release our principles.here are 5 major problems solves:password reuse: securelogin's #1 goal is fix password reuse simplify authentication process. should for everyone, only geeks.usability: existing onboarding process is disaster conversion: email, confirm email, password, confirm password, wait need digit one capital letter, of new password, sign and to email box click \"confirm email\" 1000th in life. securelogin, 's two clicks.central authority: currently every account depends an email, can used set new password. email is very centralized - majority uses services gmail. is worse sms, is owned telecom corporations. attack is currently exploited the wild against political activists, there's need wait someone hack major email/sms provider securelogin 's central authority, central server no to hijack account.man--the-middle: interaction the user computer the server is often compromised between: broken https, cloudflare, malicious browser extensions, man--the-browser xss be prevented the user explicitly signs every critical transaction.malware: securelogin 2.0 doublesign stops malware trying act behalf your account usually steal money. doublesign is a \" man rule\" - server must verify signatures \"scope\" includes every detail the transaction e.g. swift, amount, currency, account number bitcoin address. entire transaction is signed both devices (usually desktop + mobile) compromise one them wouldn't enough empty bank account (unlike it is ).phishing: many security experts tend say phishing is problem the users looking the url type password . it's totally wrong. belive phishing is extremely important problem we built- the protocol a to phishing impossible: every message is either sent a web/extension via postmessage, revealing real event.origin to native app via ws://127.0.0.1:3101 revealing origin header.securelogin vs xsecurelogin is a oauth single sign like mozilla persona facebook connect, a password manager, a 2fa option. 's three one protocol.let's list popular auth methods some esoteric ones see they deal these 5 problems normal users.please note, password managers are in table there's such thing a \"password manager auth method\" - manager is merely enforceable. however is tiny 1% password managers users. auth scheme reuse/3rd party leak central authority register/login/recovery usability mitm / malware stealing money phishing cost standard people reuse passwords email provider set pw terrible ux - ```diff+free (except cost mail services)``` standard + totp ```diff- ( \"factor\" isn't fixed)``` password is enough login terrible ux + inconvenient \"paper\" backup codes + typing 6 digits every delayed, prevented (malware wait the user enter otp code) free standard + u2f/yubikey - password is enough login terrible ux, usable backup strategy all, ios support delayed, prevented $19+ per plastic dongle standard + sms / authy / duo - \"second\" factor is central authority too like email provider. plus vendor lock-. duo offers nice user interface, register/login experience is still slow painful delayed, prevented $3+/mo/user, $0.1/request, $0.05/sms magic link email / mozilla persona per-site passwords - reuse email provider login behalf your account greatly improved ux: 's why slack medium already adopted magic links - free oauth / openid / saml / sso per-site passwords oauth provider login behalf your account, vendor lock- best ux: 2 clicks - free trezor + signing key never leaves hardware token requires using token every , writing down 24 words, ios support - $128 securelogin per-site passwords cryptographic key never leaves device excellent sign- and login user experience. works all platforms all browsers 2.0 doublesign protect malware scope-specific signature free open source it works?, let's include tiny helper:securelogin = function(scope){ function toquery(obj){ return object.keys(obj).reduce(function(,k){.push(encodeuricomponent(k)+'='+encodeuricomponent(obj[k]));return },[]).join('&') } var opts = { provider: location.origin, callback: 'ping', state: crypto.getrandomvalues( uint8array(32)).reduce(function(,k){return +''+(k%32).tostring(32)},'') } (securelogin.pubkey) opts.pubkey = securelogin.pubkey (scope) opts.scope = toquery(scope) var query = toquery(opts) (localstorage.securelogin || confirm(\" you securelogin app installed?\")){ localstorage.securelogin = 1 location = 'securelogin://#'+query }else{ window.open('https://securelogin.pw/#' + query) } return opts.state} \"secure login\" button your website/app opens native securelogin app: securelogin://#provider=https://.app&state=state the following parameters:provider - required. origin your app eg https://.appstate - required. generate random string. securelogin app ping https://.app/securelogin?state=state&response=sltoken while initial request is waiting sltoken. the same it sends request your /login action:loginaccount.onclick=function(){ xhr('/login',{ sltoken: securelogin(), //returns state opens app authenticity_token: csrf }, function(d){ (d == 'ok'){ // force focus, useful chrome full screen //(document.visibilitystate!='visible') alert(\"logged successfully.\") location.reload() }else{ console.log(d) } }) return false;} the app is installed opens https://securelogin.pw instead offers native apps all platforms along a web version. users must type email master password create profile. securelogin client runs key derivation function (scrypt) logn=18 p=6 takes to 20 seconds. keypair derivation is deterministic: running following code generate same profile any machine:derived_root = require(\"scrypt\").hashsync(\"masterpassword\",{\"n\":math.pow(2,18),\"r\":8,\"p\":6},32,\"user@email.com\").tostring(\"base64\")opening securelogin://#provider=https://.app&state=state clicking \"login\" make following request internally:https://.app/securelogin?state=state&act=ping&response=https%3a%2f%2fmy.app%252chttps%3a%2f%2fmy.app%2fsecurelogin%252c%252c1496586322%2c2ynnncbnq7won%2b13azjjqebrrea9ctjyq%2fdwugqagy8laqgnuh6oe10olxv4kgjjhflnqdu0qy8bbc08v969cg%3d%3d%252c%2fbf0p0dbddcqlak07uzpr4ynzpc2qw40jcsz1nauw%2bs%3d%2ckdbjcc08ybkwdcy56lqjii92wcgow%2bkcmvbsghn6wbu%3d%252c1up20qu%2bwyvff1kaxn3re0zyd2pm5vldqhgkxtcjl44%3d%2chomakov%40gmail.com is handled /securelogin path:def securelogin state = params[:state].gsub(/[^-z0-9]/,'') response = params[:response].to_s redis.setex(\"sl:#{state}\", 100, response) html \"ok\"end code puts params[:response] redis key-value storage the simultaneous /login request user made few seconds ago pick up proceed.def self.await(state) sltoken = false state = state.gsub(/[^-z0-9]/,'') # user is given 20 seconds approve request 20.times{ sleep 1 sltoken = redis.(\"sl:#{state}\") break sltoken } sltokenendonce sltoken is received internal ping, /login action must check validity:def self.csv(str) str.to_s.split(',').map{|f| uri.decode(f) }endmessage, signatures, authkeys, email = csv(response)pubkey, secret = csv(authkeys)signature, hmac_signature = csv(signatures)rbnacl::verifykey.(base64.decode64(pubkey)).verify(base64.decode64(signature), message) rescue error = 'invalid signature' provider, client, scope, expire_at = csv(message)scope = rack::utils.parse_query(scope)error = \"invalid provider\" unless %w{http://128.199.242.161:8020 http://c.dev https://cobased.com}.include? providererror = \"invalid client\" unless %w{http://128.199.242.161:8020/securelogin http://c.dev/securelogin https://cobased.com/securelogin}.include? clienterror = \"expired token\" unless expire_at.to_i > .now.to_i opts[:change] == true error = \" mode=change token\" unless scope[\"mode\"] == 'change' && scope.size == 2else error = \"invalid scope\" unless scope == (opts[:scope] || {})end unpacks comma-separated-values sltoken ensure provider is equal https://.app, client is equal https://.app/securelogin ( will learn why clients be a 3rd party domain later), scope is equal empty string (login request), that expire_at is valid.format sltoken:csv(csv(provider, client, scope, expire_at), csv(signature, hmac_signature), csv(pubkey, secret), email) sure signature is valid given pubkey. the user given pubkey does exist, simply create new account given email. all assertions are correct, can log user def login sltoken = securelogin.await(params[:sltoken]) return html \"timeout, please try again\" unless sltoken parsed = securelogin.parse(sltoken) record = user.find_by(securelogin_pubkey: parsed[:securelogin_pubkey]) || user.create(parsed) obj = securelogin.verify(sltoken, { pubkey: record.securelogin_pubkey, secret: record.securelogin_secret }) obj[:error] render plain: obj[:error] else session[:user_id] = record.id html \"ok\" endendwarning email verification: protocol does confirm user email does intend do . in vision email provided is merely address mails, a primary key / identifier in classic authentication scheme. .e. accounts have equal email. don't recommend confirm / verify at and let user specify whatever want unless are obligated law require explicit email confirmationcheck real verification ruby code our playground. please in touch any help implementation.sdk, implementations librariesruby rails implementationhelp needed implementations :wordpressdjangosoft transition devise omniauthnode.js other cms platformfaq1. password managers already exist, 's point?, market penetration rate password managers is joke - less 1%. may it, of friends may it, the rest the world does and not. are enforceable your users.second, are very inconvenient, especially mobile. try look a human, looking inputs prefilling . securelogin makes websites implement defined authentication protocol instead. popular managers are even open source cost money. using closed-source software is giant -no this kind product. more importantly, do solve problem all accounts belong centralized email services via \"reset password\" functionality.2. master password is single point failure this systemyes, in password managers, 's way recover private key without password recovery key.'s common misunderstanding email is different: try reset gmail password (backup email doesn't count it's turtles the down). the end any authentication scheme will a password you cannot forget. securelogin removed unnecessary levels \"backups\" \"recovery codes\", scheme boils down one master password, to master password backup file/paper/sim card/email account etc.3. web version is easier use. why install native apps?although web version exists, one should it anything serious. users should install native clients don't depend the securelogin.pw web server generate private key much faster javascript.4. is open source? it free the future? protocol the client are completely open source. are free and will remain free the future. is monetization plan except one where sakurity gets more clients saving internet a -decades long problem. is even technically possible start charging money anything: protocol works client side, external servers, api. 's a promise, 's fact.5. is only websites? if have mobile app? supports desktop native apps well. due the fact custom protocols are registered a public repository domains, provider/client parameters are limited web origin format. 're free pass sltoken to app:// your web-based client url.6. it trusted? if 's backdoor?currently 's ~600 loc js 200 loc html. programmers audit in hour. are instructions build for platforms, we're doing best implement reproducable builds soon possible.7. do change master password?many bashing deterministc approaches that 's hassle manually change password every website, while password+vault approach just change encryption password keep actual content the vault same. is naive it's paranoid enough think sometime the future actual vault leak, it's stored a dropbox- service.nevertheless, change functionality is : it's called change securelogin opens sl scope=mode=change. this mode sl client offers change current profile another profile added the app. confirming website must update pubkey a one, no can log with old sl profile that account. would to it every service, it be automated some extent.compatibility & known issues core functionality securelogin is based opening native app, getting signed sltoken returning user focus to same page. 's easy all.macoschrome, firefox: seamless experience. full screen mode 's possible focus using alert() chrome ( firefox alert does focus)safari: localstorage /s proxy cannot detect users native app ( of default privacy settings drop 3rd party trackers). 's why ask user confirm( you app) everytime. no to avoid ' you to allow page open securelogin.app?' dialog every .torbrowser: securityerror: operation is insecure trying open securelogin://windows 10edge: does support custom protocol handlers securelogin://. all. don't provide roadmap. the web version.chrome: working fine.linuxiossafari: same in desktop safari, /s proxy does work localstorage is blocked iframes.'s disallowed simply close app, to back previous screen (safari) user must press top left corner icon, is really small barely visible.androidchrome: seamless experience, no to minimize app need 2 seconds delay before going previous screenanti-phishing concerns's potential possibility phishing attacks callback=ping : another hostile page may open securelogin://state=theirstate while 're navigating target website. would know tab your browser actually opened sl client, 's way js safely share location.origin the native app.planned mitigations:ip binding sltoken is recommendedalert the app was fired twice a rowpostmessage event.origin check ( for web app)cordovacordova is used ios android platforms. 's exactly smooth platform, there be native clients the future, it does job.cordova create sl securelogincd slcordova platform add androidcordova platform add ioscordova plugin add https://github.com/crypho/cordova-plugin-scrypt.gitcordova plugin add cordova-plugin-customurlscheme --variable url_scheme=securelogincordova plugin add cordova-plugin-splashscreencordova plugin add cordova-plugin-whitelistcordova plugin add cordova-plugin-deviceplugins are ready, last step is replacing www our codebase:rm -rf wwwgit clone git@github.com:sakurity/securelogin.git www you use cordova run ios / cordova run androidelectronelectron is employed macos, windows linux apps. this repository. here are useful commands building packages distribution.outside mac app storeelectron-packager . \"securelogin\" --osx-sign --overwrite --arch=x64 --icon=www/electron.icnselectron-installer-dmg securelogin-darwin-x64/securelogin.app securelogin mac app storeelectron-packager . \"securelogin\" --platform=mas --osx-sign --overwrite --arch=x64 --icon=www/electron.icnselectron-osx-flat securelogin-mas-x64/securelogin.app windowselectron-packager . \"securelogin\" --overwrite --arch=x64 --platform=win32roadmaptarget developer community (hence everything is github there is marketing site). developers validate idea decide implement focus sdk libaries plugins major cms/frameworks/languagesengage users see 's unclear/buggy them.securelogin connect replace oauth users registred securelogin. simply put client=http://consumer provider=http://identity.provider - the user see \"x requests access your y account\" the future, 2.0 support binding devices together approving scope desktop + mobile.invest more efficient derivationinconsistent derivation is issue among platforms, especially mobile. the future, current derivation scheme be called \"weak\" (18,6) new ones be added ( \"strong\" logn=18 p=20 ). move argon2.design brandingproper logo improve graphical design.implement native apps ios androidwhile cordova electron are usable, securelogin is small enough app is cheap implement every platform using native architecture.verifiable builds https://reproducible-builds.org/ all platformssetup bug bounty program sure don't forget master passwords is very important since target audience is \"general public\": need draw line between legacy passwords could forget used entire life master passwords you need one, cannot forget. hygiene is completely different.track usage remind 3, 10 30 successful signins try type master password again. secure enclaves localstorage analogs"
}