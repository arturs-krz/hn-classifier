{
	"_id": "14487407",
	"site": "https://github.com/Uberi/speech_recognition",
	"title": "Speech recognition module for Python",
	"author": "happy-go-lucky",
	"date": "2017-06-13T14:10:06.815Z",
	"tags": {
		"categories": [
			"opensource",
			"python",
			"audio",
			"speech-recognition",
			"speech-to-text"
		],
		"languages": [
			"python",
			"shell"
		]
	},
	"content": "readme.rst speechrecognitionlibrary performing speech recognition, support several engines apis, online offline.speech recognition engine/api support:cmu sphinx (works offline)google speech recognitiongoogle cloud speech apiwit.aimicrosoft bing voice recognitionhoundify apiibm speech textquickstart: pip install speechrecognition. the \"installing\" section more details. quickly try out, run python -m speech_recognition installing.project links:pypisource codeissue trackerlibrary reference library reference documents every publicly accessible object the library. document is included under reference/library-reference.rst. notes using pocketsphinx information installing languages, compiling pocketsphinx, building language packs online resources. document is included under reference/pocketsphinx.rst.examples the examples/ directory the repository root usage examples:recognize speech input the microphonetranscribe audio filesave audio data an audio fileshow extended recognition resultscalibrate recognizer energy threshold ambient noise levels ( recognizer_instance.energy_threshold details)listening a microphone the backgroundvarious useful recognizer featuresinstalling, make sure have the requirements listed the \"requirements\" section. easiest to install is using pip install speechrecognition.otherwise, download source distribution pypi, extract archive. the folder, run python setup.py install.requirements use of functionality the library, should :python 2.6, 2.7, 3.3+ (required)pyaudio 0.2.9+ (required if need use microphone input, microphone)pocketsphinx (required if need use sphinx recognizer, recognizer_instance.recognize_sphinx)google api client library python (required if need use google cloud speech api, recognizer_instance.recognize_google_cloud)flac encoder (required if system is x86-based windows/linux/os x) following requirements are optional, can improve extend functionality some situations: python 2, only python 2, functions ( recognizer_instance.recognize_bing) run slower you not monotonic python 2 installed. using cmu sphinx, may to install additional language packs support languages international french mandarin chinese. following sections over details each requirement.python first software requirement is python 2.6, 2.7, python 3.3+. is required use library.pyaudio ( microphone users)pyaudio is required and if want use microphone input (microphone). pyaudio version 0.2.9+ is required, earlier versions overflow issues recording certain machines. not installed, everything the library still , except attempting instantiate microphone object raise attributeerror. installation instructions are quite as pyaudio v0.2.9. convenience, are summarized below: windows, install pyaudio using pip: execute pip install pyaudio a terminal. debian-derived linux distributions ( ubuntu mint), install pyaudio using apt: execute sudo apt- install python-pyaudio python3-pyaudio a terminal. the version the repositories is too old, install latest release using pip: execute sudo apt- install portaudio19-dev python--dev python3--dev && sudo pip install pyaudio (replace pip pip3 using python 3). os x, install portaudio using homebrew: brew install portaudio && sudo brew link portaudio. , install pyaudio using pip: pip install pyaudio. other posix-based systems, install portaudio19-dev python--dev ( python3--dev using python 3) packages ( their closest equivalents) using package manager your choice, then install pyaudio using pip: pip install pyaudio (replace pip pip3 using python 3).pyaudio wheel packages 64-bit python 2.7, 3.4, 3.5 windows linux are included convenience, under third-party/ directory the repository root. install, simply run pip install wheel followed pip install ./third-party/wheel_filename (replace pip pip3 using python 3) the repository root directory.pocketsphinx-python ( sphinx users)pocketsphinx-python is required and if want use sphinx recognizer (recognizer_instance.recognize_sphinx).pocketsphinx-python wheel packages 64-bit python 2.7, 3.4, 3.5 windows are included convenience, under third-party/ directory. install, simply run pip install wheel followed pip install ./third-party/wheel_filename (replace pip pip3 using python 3) the speechrecognition folder. linux other posix systems (such os x), follow instructions under \"building pocketsphinx-python source\" notes using pocketsphinx installation instructions.note the versions available most package repositories are outdated will work the bundled language data. using bundled wheel packages building source is recommended. notes using pocketsphinx information installing languages, compiling pocketsphinx, building language packs online resources. document is included under reference/pocketsphinx.rst.google api client library python ( google cloud speech api users)google api client library python is required and if want use google cloud speech api (recognizer_instance.recognize_google_cloud). not installed, everything the library still , except calling recognizer_instance.recognize_google_cloud raise requesterror.according the official installation instructions, recommended to install is using pip: execute pip install google-api-python-client (replace pip pip3 using python 3).alternatively, can perform installation completely offline the source archives under ./third-party/source code google api client library python its dependencies/ directory.flac ( some systems) flac encoder is required encode audio data send the api. using windows (x86 x86-64), os x (intel macs , os x 10.6 higher), linux (x86 x86-64), is already bundled this library - do need install anything.otherwise, ensure you the flac command line tool, is often available through system package manager. example, would usually sudo apt- install flac debian-derivatives, brew install flac os x homebrew.monotonic python 2 ( faster operations some functions python 2) python 2, only python 2, you not install monotonic python 2 library, functions run slower they otherwise (though everything still correctly). python 3, library's functionality is built the python standard library, makes unnecessary. is monotonic is necessary handle cache expiry properly the face system changes other -related issues. monotonic functionality is available, things access token requests not cached. install, pip: execute pip install monotonic a terminal.troubleshooting recognizer tries recognize speech when 'm speaking, after 'm done speaking.try increasing recognizer_instance.energy_threshold property. is basically sensitive recognizer is when recognition should start. higher values mean it be less sensitive, is useful you are a loud room. value depends entirely your microphone audio data. is one-size-fits- value, good values typically range 50 4000., check your microphone volume settings. it is too sensitive, microphone may picking a lot ambient noise. it is too insensitive, microphone may rejecting speech just noise. recognizer 't recognize speech right it starts listening the time. recognizer_instance.energy_threshold property is probably set a value is too high start off , and being adjusted lower automatically dynamic energy threshold adjustment. before is a level, energy threshold is high speech is considered ambient noise. solution is decrease threshold, call recognizer_instance.adjust_for_ambient_noise beforehand, will set threshold a value automatically. recognizer doesn't understand particular language/dialect.try setting recognition language your language/dialect. do , see documentation recognizer_instance.recognize_sphinx, recognizer_instance.recognize_google, recognizer_instance.recognize_wit, recognizer_instance.recognize_bing, recognizer_instance.recognize_api, recognizer_instance.recognize_houndify, recognizer_instance.recognize_ibm. example, your language/dialect is british english, is better use \"en-gb\" the language rather \"en-\".the recognizer hangs recognizer_instance.listen; specifically, it's calling microphone.microphonestream.read. usually happens you're using raspberry pi board, doesn't audio input capabilities itself. causes default microphone used pyaudio simply block we try read . if happen be using raspberry pi, 'll need usb sound card ( usb microphone).once do , change instances microphone() microphone(device_index=microphone_index), where microphone_index is hardware-specific index the microphone. figure what value microphone_index should , run following code:import speech_recognition sr index, name enumerate(sr.microphone.list_microphone_names()): print(\"microphone name \\\"{1}\\\" found `microphone(device_index={0})`\".format(index, name)) will print something the following:microphone name \"hda intel hdmi: 0 (hw:0,3)\" found `microphone(device_index=0)`microphone name \"hda intel hdmi: 1 (hw:0,7)\" found `microphone(device_index=1)`microphone name \"hda intel hdmi: 2 (hw:0,8)\" found `microphone(device_index=2)`microphone name \"blue snowball: usb audio (hw:1,0)\" found `microphone(device_index=3)`microphone name \"hdmi\" found `microphone(device_index=4)`microphone name \"pulse\" found `microphone(device_index=5)`microphone name \"default\" found `microphone(device_index=6)`, to the snowball microphone, would change microphone() microphone(device_index=3). code examples raise unicodeencodeerror: 'ascii' codec 't encode character run. you're using python 2, your language uses non-ascii characters, the terminal file- object 're printing only supports ascii, error is raised trying write non-ascii characters. is in python 2, recognizer_instance.recognize_sphinx, recognizer_instance.recognize_google, recognizer_instance.recognize_wit, recognizer_instance.recognize_bing, recognizer_instance.recognize_api, recognizer_instance.recognize_houndify, recognizer_instance.recognize_ibm return unicode strings (u\"something\") rather byte strings (\"something\"). python 3, strings are unicode strings. make printing unicode strings in python 2 well, replace print statements your code the following form:print some_unicode_string the following:print some_unicode_string.encode(\"utf8\") change, however, prevent code working python 3. program doesn't run compiled pyinstaller. of pyinstaller version 3.0, speechrecognition is supported of box. you're getting weird issues compiling program using pyinstaller, simply update pyinstaller. can easily this running pip install --upgrade pyinstaller. ubuntu/debian, get annoying output the terminal saying things \"bt_audio_service_open: [...] connection refused\" various others. \"bt_audio_service_open\" error means you a bluetooth audio device, as physical device is currently connected, can't actually it - you're using bluetooth microphone, this be safely ignored. you are, audio isn't working, double check make sure microphone is actually connected. does seem be simple to disable messages. errors the form \"alsa lib [...] unknown pcm\", this stackoverflow answer. basically, get rid an error the form \"unknown pcm cards.pcm.rear\", simply comment pcm.rear cards.pcm.rear /usr/share/alsa/alsa.conf, ~/.asoundrc, /etc/asound.conf. \"jack server is running cannot started\" \"connect(2) call /dev/shm/jack-1000/default/jack_0 failed (err= such file directory)\" \"attempt connect server failed\", are caused alsa trying connect jack, can safely ignored. 'm aware any simple to turn those messages off this , besides [entirely disabling printing while starting microphone](https://github.com/uberi/speech_recognition/issues/182#issuecomment-266256337). os x, get childprocesserror saying it couldn't find system flac converter, though 's installed.installing flac os x directly the source code not , since doesn't correctly add executables the search path.installing flac using homebrew ensures the search path is correctly updated. , ensure have homebrew, run brew install flac install necessary files.developing hack this library, make sure have the requirements listed the \"requirements\" section. of library code lives speech_recognition/__init__.py.examples live under examples/ directory, the demo script lives speech_recognition/__main__.py. flac encoder binaries are the speech_recognition/ directory.documentation be found the reference/ directory.third-party libraries, utilities, reference material are the third-party/ directory. install/reinstall library locally, run python setup.py install the project root directory.before release, version tags are created using git config gpg.program gpg2 && git config user.signingkey db45f6c431de7c2dcd99ff7904882258a4063489 && git tag -s version_goes_here -m \"version version_goes_here\".releases are done running -release.sh build python source packages, sign , and upload to pypi.testing run the tests:python -m unittest discover --verbosetesting is done automatically travisci, upon every push. set the environment offline/local travis- testing a debian- system:sudo docker run --volume \"$(pwd):/speech_recognition\" --interactive --tty quay.io/travisci/travis-python:latest /bin/bashsu - travis && cd /speech_recognitionsudo apt- update && sudo apt- install swig libpulse-devpip install --user pocketsphinx monotonic && pip install --user flake8 rstcheck && sudo pip install --user -e .python -m unittest discover --verbose # run unit testsflake8 --ignore=e501,e701 speech_recognition tests examples setup.py # ignore errors long lines multi-statement linesrstcheck readme.rst reference/*.rst # ensure rst is -formedflac executables included flac-win32 executable is official flac 1.3.1 32-bit windows binary. included flac-linux-x86 flac-linux-x86_64 executables are built the flac 1.3.1 source code manylinux ensure it's compatible a wide variety distributions. built flac executables should bit--bit reproducible. rebuild , run following inside project directory a debian- system:# download extract flac source codecd third-partysudo apt- install --yes docker.io# build flac inside manylinux i686 docker imagetar xf flac-1.3.1.tar.xzsudo docker run --tty --interactive --rm --volume \"$(pwd):/root\" quay.io/pypa/manylinux1_i686:latest bash cd /root/flac-1.3.1 ./configure ldflags=-static # compiler flags make static build exitcp flac-1.3.1/src/flac/flac ../speech_recognition/flac-linux-x86 && sudo rm -rf flac-1.3.1/# build flac inside manylinux x86_64 docker imagetar xf flac-1.3.1.tar.xzsudo docker run --tty --interactive --rm --volume \"$(pwd):/root\" quay.io/pypa/manylinux1_x86_64:latest bash cd /root/flac-1.3.1 ./configure ldflags=-static # compiler flags make static build exitcp flac-1.3.1/src/flac/flac ../speech_recognition/flac-linux-x86_64 && sudo rm -r flac-1.3.1/ included flac-mac executable is extracted xact 2.38, is frontend flac conveniently includes binaries all its encoders. specifically, is copy xact 2.38/xact.app/contents/resources/flac xact2.38.zip.authorsuberi <azhang9@gmail.com> (anthony zhang)bobsayshilolarvindch <achembarpu@gmail.com> (arvind chembarpu)kevinismith <kevin_i_smith@yahoo.com> (kevin smith)haas85delightrun <changxu.mail@gmail.com>maverickagmkamushadenes <kamushadenes@hyadesinc.com> (kamus hadenes)sbraden <braden.sarah@gmail.com> (sarah braden)tb0hdan (bohdan turkynewych)thynix <steve@asksteved.com> (steve dougherty)please report bugs suggestions the issue tracker! to cite library (apa style):zhang, . (2017). speech recognition (version 3.6) [software]. available https://github.com/uberi/speech_recognition#readme. to cite library (chicago style):zhang, anthony. 2017. speech recognition (version 3.6). check the python baidu yuyin api, is based an older version this project, adds support baidu yuyin. note baidu yuyin is available inside china.licensecopyright 2014-2017 anthony zhang (uberi). source code this library is available online github.speechrecognition is made available under 3-clause bsd license. license.txt the project's root directory more information. convenience, the official distributions speechrecognition already include copy the necessary copyright notices licenses. your project, can simply that licensing information speechrecognition be found within speechrecognition readme, make sure speechrecognition is visible users they wish see .speechrecognition distributes source code, binaries, language files cmu sphinx. files are bsd-licensed redistributable long copyright notices are correctly retained. speech_recognition/pocketsphinx-data/*/license*.txt third-party/license-sphinx.txt license details individual parts.speechrecognition distributes source code binaries pyaudio. files are mit-licensed redistributable long copyright notices are correctly retained. third-party/license-pyaudio.txt license details.speechrecognition distributes binaries flac - speech_recognition/flac-win32.exe, speech_recognition/flac-linux-x86, speech_recognition/flac-mac. files are gplv2-licensed redistributable, long the terms the gpl are satisfied. flac binaries are aggregate separate programs, these gpl restrictions not apply the library your programs use library, to flac itself. license-flac.txt license details."
}