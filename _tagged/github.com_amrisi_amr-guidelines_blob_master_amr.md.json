{
	"_id": "14444960",
	"site": "https://github.com/amrisi/amr-guidelines/blob/master/amr.md",
	"title": "Abstract Meaning Representation",
	"author": "mutor",
	"date": "2017-06-13T13:55:21.960Z",
	"tags": {
		"categories": [
			"opensource",
			"abstract"
		],
		"languages": []
	},
	"content": "abstract meaning representation (amr) 1.2.2 specificationseptember 18, 2015laura banarescu, claire bonial, shu cai, madalina georgescu, kira griffitt,ulf hermjakob, kevin knight, philipp koehn, martha palmer, nathan schneidertable contents generated doctocabstract meaning representation (amr) 1.2 specificationpart . introductionexampleabstraction away englishmore logical syntaxfocusamr sloganslimitations amr 1.2part ii. concepts relationspart iii. phenomenacore rolesmodalitynegationwh-questions interrogatives & imperativesarticles, plurals, tense, aspect, quotes, hyphensimplicit rolesimplicit conceptsmain verb nouns invoke predicatesadjectives invoke predicatesadverbs -lynon-core roles:source:destination:path:beneficiary:accompanier:topic:duration:instrument:medium:manner:purpose:cause:concession:condition:part:subevent:consist-:example:direction:frequency:extentfocusreificationphrasal verbsprepositionsrelative clausesmultiple relations the same nameconjunctionsquantifiers scopedegreevariables co-referencepossessionpertainymsordinalssubsetsnamed entities wikificationspecial frames roles (-org-role-91, -rel-role-91)exact numbersapproximate numbersquantitiesmathematical operators entities: dates, times, percentages, phone, email, urlsamr freak showcyclespart . introductionamr captures is doing to whom a sentence. each sentence isrepresented a rooted, directed, acyclic graph labels edges(relations) leaves (concepts). a parse tree, amr provides single, traversable structure takes words account. is a disconnected set annotation layers. unlike parse tree, amr is abstract. may represent number naturallanguage sentences. amr does annotate individual words a sentence, a dependency parse does.amr implements simplified, standard neo-davidsonian semantics [davidson 1967,higginbotham 1985], using standard feature structure representation [shieber1986, carpenter 1992]. amrs formal origins are unification systems [kay1979, knight 1989, moore 1989] natural language generation [mann 1982,elhadad 1988, knight & hatzivassiloglou 1995]. predicates senses coresemantic roles amr are drawn the amazing ontonotes project.amr does say anything how wants be processed. is closer english to languages. is an interlingua.example amr means (roughly): is wanting event, whose arg0 (wanter) is boy, whose arg1 (wanted thing) is believing event. believing eventhas arg0 (believer), is girl, it has arg1 (believed thing), is same boy mentioned. here, boy plays roles: (1) is arg0 want-01, (2) is arg1 believe-01. amr captures with directed edges pointing the same node. (per ontonotes,predicate senses are marked suffixes -01 -02, while arg0,arg1, etc., denote core, predicate-specific roles.)here is text-friendly to write same amr:(w / -01 :arg0 (b / boy) :arg1 (b2 / believe-01 :arg0 (g / girl) :arg1 b)) variables w, b, b2, g correspond internal nodes the graph above.note b appears twice this format, first as (b / boy) thesecond simply b. amr also viewed conjunction logical triples, omitting rootinformation:instance(w, -01) ^ /* w is instance wanting */instance(b, boy) ^ /* b is instance boy */instance(b2, believe-01) ^ /* b2 is instance believing */instance(g, girl) ^ /* g is instance girl */arg0(w, b) ^ /* b is wanter w */arg1(w, b2) ^ /* b2 is wantee w */arg0(b2, g) ^ /* g is believer b2 */arg1(b2, b) /* b is believee b2 */abstraction away english amr above be expressed variously english: boy desires girl believe .the boy desires be believed the girl. boy has desire be believed the girl. boys desire is the girl believe .the boy is desirous the girl believing .etc. concept desire-01 might realized a verb (desire), noun ( desire), an adjective (desirous). think amr leaf-labels concepts rather words. do point an element an amr say is noun that is verb. rather, say is object that is event. single entity (boy) play multiple roles simultaneously (e.g., arg0 desire-01, arg1 believe-01). amr does talk pronouns zero-pronouns, though are natural mechanisms expressing multiple roles english. many cases, english function words not show at in amr:( / adjust-01 :arg0 (b / girl) :arg1 (m / machine)) girl made adjustments the machine. girl adjusted machine. machine was adjusted the girl.(k / kill-01 : (y / yesterday)) killing happened yesterday. killing took place yesterday.( / and :op1 (b / boy) :op2 (g / girl)) boy the girlboth boy the girl(b / boat :poss (h / ))his boat own boatmore logical syntaxamr strives a more logical, less syntactic representation. example, boy must go the boy may go are syntactically similar, the placement negation (:polarity -) is very different the amrs:(o / obligate-01 :arg2 (g / -02 :arg0 (b / boy) :polarity -)) boy must go. is obligatory the boy go.(p / permit-01 :arg1 (g / -02 :arg0 (b / boy)) :polarity -) boy may go. boy is permitted go. is permissible the boy go. boy does have permission go. amr transparently represents is being negated. note the conceptpermit-01 be realized a modal, participle, a noun.focus root an amr binds contents a single, traversable directedgraph. also serves a rudimentary representation overall focus. we:(w / white-03 :arg1 (m / marble)) marble is white. whiteness the marble(m / marble :arg1- (w / white-03)) white marble marble is white(s / -01 :arg0 (b / boy) :arg1 (w / white-03 :arg1 (m / marble))) boy sees the marble is white. boy sees whiteness the marble.(s / -01 :arg0 (b / boy) :arg1 (m / marble :arg1- (w / white-03))) boy sees white marble. boy sees marble is white. can write :domain- as inverse :domain, we often shorten to:mod.inverse roles are useful maintaining single rooted structure, e.g.:(s / -01 :arg0 (b / boy) :arg1 (g / girl :arg0- (w / -01 :arg1 b))) boy saw girl wanted .the boy saw girl he was wanted .the girl wanted boy was seen him. this amr, role :arg0- connects girl want-01 a natural .to re-focus amr, can lift any node the root, then imagine other nodes falling down. example, we lift the w node above, get same content, rearranged:(w / -01 :arg0 (g / girl :arg1- (s / -01 :arg0 (b / boy))) :arg1 b) girl was seen the boy wants .the boy is wanted the girl saw. is matter focusing: first amr (rooted see-01) is theseeing, while second amr (rooted want-01) is the wanting.another example an inverse role (:instrument-):(c / change-01 :arg1 (d / document :instrument- (r / regulate-01))) regulatory documents were changed.amr sloganshere are slogans make easier work amr:amr captures rough meaning a sentence a single, traversable directed acyclic graph.amr does say anything how wants be processed.amr is an interlingua. are nouns verbs amr. we write amr hand, constituent trees dependency trees are generally needed. cannot read off unique english sentence an amr. amr is a foreign-language translation. someone creates amr english may provide links between amr concepts english word tokens. it is reasonable think doing such alignment later (perhapsautomatically), as is reasonable align tokens bilingual texts.limitations amr 1.2amr 1.2 is -simple many ways: is geared toward english the vocabulary english. does represent quantifier scope, even universal quantification all. does represent co-references cross sentence boundaries. drops grammatical number, tense, aspect, quotation marks, etc. does deeply capture many noun-noun noun-adjective relations. does include deep frames such earthquake ( roles magnitude, epicenter, casualties, etc) pregnancy ( roles mother, father, baby gender, since inception, etc). amr 1.2 looks forward amr 2.0!part ii. concepts relationsconcepts are tokens appear the leaves amr graphs. amr does formally carve world into events, objects, features, etc., though mayrefer a certain concept instance an event. following amr has threeconcepts (boy, , believe):(w / -01 :arg0 (b / boy) :arg1 (b2 / believe-01 :arg0 b)) boy wants believe. slash (/) is shorthand the :instance relation. relation shows more clearly amr graph format ( introduction).concepts amr 1.2 are usually written english words phrases. concepts core semantic relations may sense tags, identify semanticframe:(b / believe-01 :arg0 (b / boy)) boy believes.amr semantic relations are best described through examples; the next section(phenomena). here, only provide brief summary listing.core :argx roles. amr 1.2 uses numbered :argx ontonotes::arg0, :arg1, :arg2, :arg3, :arg4, :arg5non-core roles::accompanier, :age:beneficiary:compared-, :concession, :condition, :consist-:degree, :destination, :direction, :domain, :duration:example, :extent:frequency:instrument:location:manner, :medium, :mod, :mode:name:ord:part, :path, :polarity, :poss, :purpose:quant:scale, :source, :subevent:, :topic, :unit:value:wikiroles used date-entity::calendar, :century, :, :dayperiod, :decade, :era, :month, :quarter, :season, :timezone, :weekday, :, :year2roles the form :opx are used conjunctions, in certain types locations times::op1, :op2, :op3, :op4, roles the form :prep-x are used cases where is good relation the list above. amr likes avoid . here is partial list. is partial, other :prep-x relations are legal amr.:prep-against, :prep-along-, :prep-amid, :prep-among, :prep-, :prep-:prep-:prep-, :prep-:prep-, :prep--addition-, :prep-:prep-, :prep--behalf-, :prep--of:prep-, :prep-toward:prep-under:prep-, :prep-withoutetc. conjunctions are not -covered under list non-core roles.amr likes avoid , but sometimes have good alternative::conj--ifetc. relations above inverses the form :x-.:arg0-, :arg1-:location-etc.part iii. phenomenacore rolescore roles are taken the ontonotes semantic role layer. ontonotespredicates are sense-labeled words (e.g., sentence-01). arepredicate-specific numbered. example::arg0 charge-01 is person doing charging.:arg1 charge-01 is person being charged.:arg2 charge-01 is role crime ( which :arg0 is charging :arg1). - `:arg0` `sentence-01` is person doing sentencing. - `:arg1` `sentence-01` is person being sentenced. - `:arg2` `sentence-01` is role crime. - `:arg0` `fine-01` is person doing fining. - `:arg1` `fine-01` is amount the fine (e.g., $1000). - `:arg2` `fine-01` is person being fined. - `:arg3` `fine-01` is role crime.note predicate-sensitivity: person might naturally the :arg1 sentence-01, simultaneously :arg2 fine-01. semantic frame may realized vastly different ways english:(d / describe-01 :arg0 (h / ) :arg1 (m / mission) :arg2 (f / failure)) described mission a failure. he described , the mission was failure. description the mission: failure.here, amr does worry representing words , it, was.note ontonotes documentation predicates roles is often loose humorous. example, :arg0 :arg1 research-01 are nicknamedstudent subject, this does mean research-01 is restricted situations where :arg0 is literally student. ontonotes is missing predicate, amr accepts -00:(c / comeback-00 :arg0 (b / band)) band experienced comebackmodalityamr represents syntactic modals concepts possible-01, likely-01,obligate-01, permit-01, recommend-01, prefer-01, etc.:(p / possible-01 :arg1 (g / -02 :arg0 (b / boy))) boy go. is possible the boy goes.(o / obligate-01 :arg2 (g / -02 :arg0 (b / boy))) boy must .the boy is obligated go. is obligatory the boy .(o / permit-01 :arg1 (g / -02 :arg0 (b / boy))) boy may .the boy is permitted go. is permissible the boy .(p / possible-01 :arg1 (r / rain-01)) may rain. might rain.rain is possible.s possible it rain.(r / recommend-01 :arg1 (g / -02 :arg0 (b / boy))) boy should .it is recommended the boy .(l / likely-01 :arg1 (g / -02 :arg0 (b / boy))) boy is likely go. is likely the boy go.amr ignores modal , except cases :(p / prefer-01 :arg0 (b / boy) :arg1 (g / -02 :arg0 b)) boy rather .the boy prefers go.another example:(u / -02 :arg0 ( / i) :arg1 (w / -01 :arg0 ))i am used working.negationamr represents negation logically, using :polarity.(g / -02 :arg0 (b / boy) :polarity -) boy doesnt .(p / possible-01 :arg1 (g / -02 :arg0 (b / boy)) :polarity -) boy t .its possible the boy go. (p / possible-01 :arg1 (g / -02 :arg0 (b / boy) :polarity -)) is possible the boy to .it is possible the boy not .(p / obligate-01 :arg2 (g / -02 :arg0 (b / boy)) :polarity -) boy doesnt to .its necessary the boy go.(p / obligate-01 :arg2 (g / -02 :arg0 (b / boy) :polarity -)) boy must go.s obligatory the boy go.(t / -01 :arg0 (b / boy) :arg1 (w / win-01 :arg0 (t2 / team :poss b) :polarity -)) boy thinks team wont win. boy doesnt his team win. (colloquially, ambiguously)(t / -01 :arg0 (b / boy) :arg1 (w / win-01 :arg0 (t2 / team :poss b)) :polarity -)s true the boy thinks team win. boy doesnt his team win. (colloquially, ambiguously)(h / -01 :polarity - :arg0 ( / i) :arg1 (m / money)) dont any money. have money.negative english affixes are represented the :polarity role:( / appropriate-02 :polarity - :arg1 (d / dress)) dress is inappropriate dress is appropriate(d / dress :arg1- (a / appropriate-02 :polarity -)) inappropriate dress dress is inappropriate dress is appropriatewh-questions capture wh-questions, amr uses concept amr-unknown (-place!) indicate wh-questions:(f / find-01 :arg0 (g / girl) :arg1 ( / amr-unknown)) did girl find?(f / find-01 :arg0 (g / girl) :arg1 (b / boy) :location ( / amr-unknown))where did girl find boy?(f / find-01 :arg0 (g / girl) :arg1 (b / boy) :manner ( / amr-unknown)) did girl find boy?(f / find-01 :arg0 (g / girl) :arg1 (t / toy :poss ( / amr-unknown)))whose toy did girl find?(r / run-01 :arg0 (g / girl) :manner (f / fast :degree ( / amr-unknown))) fast did girl run?(g / -01 :arg0 (g / girl) :arg1 ( / amr-unknown :arg1- (p / purple-02))) purple thing did girl ?(l / lead-01 :arg0 (s / ) :arg1 ( / amr-unknown :domain ( / investigate-01))) investigation did lead?note wh- words relative clauses are treated differently, using inverseroles instead amr-unknown:(k / -02 :arg0 ( / i) :arg1 (p / person :arg1- (s / -01 :arg0 (y / ))))i who saw. know person saw. interrogatives & imperativesamr uses :mode indicate yes- questions:(f / find-01 :arg0 (g / girl) :arg1 (b / boy) :mode interrogative)did girl find boy?(f / find-01 :arg1 (b / boy) :mode interrogative)was boy found?amr uses :mode yes- embedded clauses:(k / -01 :polarity - :arg0 (b / boy) :arg1 (c / -01 :arg1 (g / girl) :mode interrogative)) boy doesnt whether girl came. boy doesnt if girl came. contrast with:(k / -01 :polarity - :arg0 (b / boy) :arg1 (c / -01 :arg1 (g / girl))) boy doesnt that girl came. boy doesnt the girl came.:mode is used imperatives. exclamatory imperatives are imperatives amr.(g / -02 :mode imperative :arg0 (y / ))go.!(g / -02 :mode imperative :arg0 (w / ))lets .lets !finally, :mode expressive is used mark exclamational words such ah, ha, hmm, oh, wow, yippee express emotions, don't refer a clear event, object property. not :mode expressive mere emphasis (text allcaps), exclamation marks (!) disfluency markers (uh), are annotated amr.(yippee :mode expressive)yippee!(yes :mode expressive)yes!!!note yes. a normal answer a question is marked any :mode, it plainly conveys information based the preceding question. a celebratory yes!!! your favorite sports team scores imporant point should marked using :mode expressive.articles, plurals, tense, aspect, quotes, hyphensamr 1.2 does represent event times (outside the explicit : relation),articles, plurals, quotation marks:(g / -02 :arg0 (b / boy)) boy went. boys went. boy went. boy goes. boy go.demonstratives are included:(b / boy :mod (t / ))that boythose boys(b / boy :mod (t / ))this boy boysdemonstrative pronouns are included they no antecedent thesentence:(s / shame :domain (t / ))that is shame. a hyphenated word be broken down component meanings, do :(a / account :mod (m / market :mod (m2 / money)))money-market account(p / president :mod (v / vice))vice-presidentvice president when is hard get component meanings , then leave together:(b / brother--law)brother--law any case, never the hyphen itself (-) an amr concept.implicit rolesamr roles may implicit rendered english. amr includes such roles there is real debate what is happening the world. consider:(c / charge-05 :arg1 (h / ) :arg2 ( / and :op1 ( / intoxicate-01 :arg1 h :location (p / public)) :op2 (r / resist-01 :arg0 h :arg1 (a2 / arrest-01 :arg1 h)))) was charged public intoxication resisting arrest.here, variable h appears four times, including the arg1 arrest-01, it is clear h is resisting own arrest ( someone elses).however, do include anything the effect the charging agent thearresting agent are same entity, that is debatable.implicit concepts we build amr text, introduce implicit roles, we generally not introduce implicit concepts, e.g., full below:(h / hopeful-03 : (f / full :arg1 (g / girl)) :poss (h / hope) :arg1 (g / girl)) hopeful girl exception is named entity types entities lack , as covered belowunder named entities.main verb predicate adjectives are usually represented :domain, unless have adjective frame ontonotes:(s / small :domain (m / marble)) marble is small.noun is noun constructions use :domain:(l / lawyer :domain (m / man)) man is lawyer.(m / man :mod (l / lawyer)) man is lawyer is there are simple amr representations:(b / boy) boy is boy.(b / boy :quant 4 :arg0- (m / -01 :arg1 (p / pie)))four boys making pies are four boys making pies.nouns invoke predicatesamrs principle is maximize use ontonotes predicates, regardless english parts speech. section gives examples this principle.amr represents events, verbs. , destroy destruction the sameamr representation. consistency, amr uses sense-tagged english verbs ontonotes:(d / destroy-01 :arg0 (b / boy) :arg1 (r / room)) boy destroyed room. boys destruction the room destruction the room the boy using destroy-01, fully exploit semantic frames ontonotes, are developed english verbs. never :(d / destruction )(d / destruction-01 )recent versions ontonotes noun predicate frames destruction-01, we not amrs contain both destroy-01 destruction-01.therefore, avoid destruction-01. nominalizations ( explosion) refer a whole event, while others( proposal) refer role player the event:(e / explode-01) explosion(t / thing :arg1- (p / propose-01)) proposal thing proposed got proposed always search an ontonotes predicate, if noun is much morefrequent the verb (opinion is thing is opined):(t / thing :arg1- (o / opine-01 :arg0 (b / boy))) boys opinion opinion the boy which was opined the boy the boy opinedinverse roles are used represent many -er nouns. enables to maximal of of ontonotes predicate frames, instead defaulting :mod :poss :prep-:(o / organization : (m / maker :arg0- (m / -01 :mod (c / chip)) :arg1 (c / chip)))chip makermaker chips(p / person :arg0- (i / invest-01))investor(p / person :arg0- (i / invest-01 :arg2 (b / bond))) bond investor(p / person : (i / investor :arg0- (i / invest-01 :mod (s / small)) cant you! :mod (s / small)))small investor(p / person :arg0- (i / invest-01) :mod (n / nerd))nerdy investor a nouns meaning is significantly different the verbal form, amrdoes break down meaning. example, treasurer is essentiallysomeone treasures:(t / treasurer) : (p / person :arg0- (t / treasure-01))treasurer(p / president) : (p / person :arg0- (p2 / preside-01))president when meaning an -er noun does break down comfortably, amr does automatically reach an inverse (-) role. example, boy is hard worker means boy works hard:(w / -01 : (b / boy :arg0 (b / boy) :arg0- (w / -01 :manner (h / hard-02)) :manner (h / hard-02))) boy is hard worker boy works hardadjectives invoke predicates nouns, adjectives invoke predicates:(m / man :arg0- (a / attract-01)) attractive man( / attract-01 :arg0 (m / man)) man is attractive man attracts( / attract-01 :arg0 (m / man) :arg1 (w / woman)) man is attractive women man attracts womenadjectives following can often represented ontonotes verbalpredicates:( / realize-01 : (a / aware :arg0 (s / soldier) :arg1 (s / soldier) :arg1 (b / battle)) :prep- (b / battle)) soldier was aware the battle. soldier realized was battle.many adjectives natural english verbal predicates: aware ( x) realize-01 worth (x) value-01 like (x) resemble-01 afraid ( x) fear-01 adjectives not, which case use adjective the predicate name. responsible ( x) responsible-01 (cause), responsible-02 (trustworthy), responsible-03 (duty) nervous ( x) nervous-01 serious ( x) serious-01 ( kidding), serious-02 (grave) efficient ( x) efficient-01(r / responsible-03 :arg0 (b / boy) :arg1 (w / ))the boy is responsible the .the boy is responsible doing work. boy has responsibility the .in way, avoid awkward syntactic representations english functionwords ( for has). boy responsibles work isnt english, though is chinese.arg0 often refers the thing being described the adjective, while arg1names next natural argument. use arg1/arg2 the adjective is agentive. about adjectives sad, white, free? should usesadden-01, whiten-01, free-01? because something is white, doesnt mean it was whitened. such cases, only ontonotes verbalpredicates there is implied event process:(s / sad-02 :arg1 (g / girl)) girl is sad.(s / sadden-01 :arg1 (g / girl) :arg2 (d / disaster)) girl was saddened the disaster. disaster saddened girl.almost -ed adjectives (e.g., acquainted) immediately suggest ontonotesverb frames. example:( / acquaint-01 :arg1 (b / boy) :arg2 (m / magic)) boy is acquainted magic :arg0 such cases (here, acquainter) is usually unspecified. mayquibble a boy become acquainted magic without someoneacquainting , but maybe acquainted himself.ontonotes is resourceful -ed tool. you x was fed with y, don't surprised feed-03 solves amr. feeder fed y x? justleave :arg0 blank. now, amrs should surprise:(w / -01 :arg0 (b / boy) :arg1 (p / please-01 :arg0 b))boys to please.(e / easy-05 :arg1 (p / please-01 :arg1 (g / girl)))girls are easy please. is easy please girls.pleasing girls is easy.note please-01 girl are closely related semantically (via :arg1),though contiguous girls are easy please. we girls areeasy please, automatically re-formulate as more logicaleasy(please(girl)). likewise, you are safe drink safe(drink(, this)).english adjectives be formed verbs nouns other ways, e.g., adding -able -ful. the resulting adjective has own idiosyncraticmeaning, we not break down further. if can break downwithout introducing concepts ( relations), we ahead:(s / sandwich :arg1- (e / eat-01 :arg1- (p / possible-01))) edible sandwich sandwich can eaten sandwich it is possible eat(s / sandwich :arg1- (e / eat-01 :arg1- (p / possible-01 :polarity -))) inedible sandwichenglish is wily opponent though. you own taxable fund, getting taxed ismore just possibility, friend:(f / fund : (f / fund :arg3- (t / tax-01)) :arg3- (t / tax-01 :arg1- (p / possible-01))) taxable fundadverbs -lyadverbs stemmed adjective form:(o / observe-01 :arg0 ( / i) :arg1 (m / move-01 :arg0 ( / army) :manner (q / quick-02))) observed the army moved quickly. observed quick movement the army observed army moving quickly.non-core roles have seen roles :time :location. amr includes non-core roles::source:destination(d / drive-01 :arg0 (h / ) :direction (w / west) :source (c / city :wiki \"houston\" :name (n / name :op1 \"houston\")) :destination (c2 / city :wiki \"austin,_texas\" :name (n2 / name :op1 \"austin\"))) drove west, houston austin.:path(d / drive-01 :arg0 ( / i) :destination (c / city :wiki \"indianapolis\" :name (n / name :op1 \"indianapolis\")) :path (r / road :wiki \"interstate_65\" :name (n2 / name :op1 \"-65\"))) drove indianapolis i-65.(d / drive-01 :arg0 ( / i) :path (t / tunnel)) drove through tunnel.:beneficiary:accompanier(s / hum-02 :arg0 (s2 / soldier) :arg1 (t2 / tune) :beneficiary (g / girl) : (w / walk-01 :arg0 g :accompanier s2 :destination (t / town))) soldier hummed tune the girl he walked her town.:topic( / information :polarity - :topic (c / case)) is information the case.(p / person :wiki - :name (n / name :op1 \"jay\" :op2 \"bartroff\") :arg0- (h / -org-role-91 :arg1 (u / university :wiki \"university_of_southern_california\" :name (n2 / name :op1 \"usc\")) :arg2 (p2 / professor :mod ( / associate) :topic (m / mathematics))))usc associate professor mathematics jay bartroff:duration(w / -01 :arg0 (h / ) :duration (t / temporal-quantity :quant 2 :unit (h2 / hour))) worked two hours.:instrument:instrument describes physical object used an action, typically tool, device, weapon, a body part such a finger fist. you to describe or what something is done, the more general :manner instead.(e / eat-01 :arg0 ( / i) :arg1 (p / pasta) :instrument (f / fork)) ate pasta a fork.( / attack-01 :arg0 (c / country :wiki \"iraq\" :name (n / name :op1 \"iraq\")) :instrument (m / missile))iraq launched missile attack.:medium role :medium is used channels communications such a newspaper, tv channel, web, youtube, facebook, speech, well languages:(t / talk-01 :arg0 (s / ) :arg2 (h / ) :medium (l / language :wiki \"french_language\" :name (n / name :op1 \"french\"))) talked him french.( / announce-01 :arg0 (p / person :wiki - :name (n / name :op1 \"john\")) :arg1 (b / bear-02 :arg1 (p2 / person :arg0- (h / -rel-role-91 :arg1 p :arg2 (s / son)))) :medium (p3 / product :wiki \"twitter\" :name (n2 / name :op1 \"twitter\")))john announced birth his son twitter.:manner:manner is used annotate description answering \" is something done?\" is already covered a more specific role such :instrument :medium.(s / sing-01 :arg0 (b / boy) :manner (b2 / beautiful-02 :degree (v / very))) boy sang very beautifully.(d / decorate-01 :arg0 (h / ) :arg1 (r / room) :manner (c / creative)) decorated room a creative .:manner describes method action do something, sometimes referred as means:(p / propose-01 :arg0 (p3 / person :arg0- (h2 / -org-role-91 :arg2 (m / mayor))) :arg1 (l / lower-01 :arg1 (c / crime) :manner (h / hire-01 :arg2 (p4 / person :arg0- (h3 / -org-role-91 :arg1 (p2 / police) :arg2 (o / officer)) :mod (m2 / more))))) mayor proposed lower crime hiring more police officers.:manner describes modes transportation:(g / -02 :arg0 (p / person :wiki - :name (n / name :op1 \"nicole\")) :arg4 (c / country :wiki \"england\" :name (n2 / name :op1 \"england\")) :manner (t / train))nicole went england train.:purpose(g / -02 :arg0 (h / ) :arg4 (s / store) :purpose (b / buy-01 :arg0 h :arg1 (w / wood :purpose (f / fence :mod (n / )))))he went the store buy wood a fence.:cause(m / murmur-01 :arg0 (b / boy) :manner (s / soft-02) :purpose (s2 / soothe-01 :arg1 (g / girl)) :cause (w / worry-01 :arg0 b :topic g)) boy murmured softly soothe girl, he worried her.note: amr editor automatically reifies :cause :cause- to cause-01, we call :cause shortcut.:concession (c / continue-01 :arg1 (g / game) :concession (r / rain-01)) game continued although rained. game continued despite rain.(c / continue-01 :arg1 (g / game) :concession (e / -if :op1 (r / rain-01))) game continue if rains.(f / fear-01 :arg0 (t / ) :arg1 (h / ) :concession (e / -when :op1 ( / imprison-01 :arg1 h))) feared even he was behind bars.:condition(s / sing-01 :arg0 (b / boy) :condition (g / -01 :arg1 (m / money) :arg2 b)) boy sing he is given money. the boy is given money, will sing. boy sing case a money donation.(s / sing-01 :arg0 (b / boy) :polarity - :condition (g / -01 :arg1 (m / money) :arg2 b)) boy sing unless is given money.unless boy is given money, will sing. amr, x :cause y means the cause x is y. likewise, y :cause- xmeans y is cause x. ( the section reification below using concept cause-01 instead :cause :cause-.) (s / strike-01 :arg0 (t / torpedo) :cause- (d / damage-01 :arg1 (s2 / ship))) torpedo struck, causing ship be damaged. torpedo struck, causing damage the ship. torpedo struck, damaging ship. can difficult tease apart :purpose :cause. example, visited because was sick (cause) i visited to deliver news(purpose). the amr editor, :cause/:cause- is automatically converted cause-01.( section reification below.)occasionally, numbered :argx role refer exactly :location,:beneficiary, some named non-core role. this case, use :argxrole, e.g.:(p / provide-01 : (p / provide-01 :arg0 (b / boy) :arg0 (b / boy) :arg1 (c / chocolate) :arg1 (c / chocolate) :arg2 (g / girl)) :beneficiary (g / girl)) boy provided chocolate the girl. boy provided girl chocolate.sometimes isnt clear :location, :, etc., should modify amrsinvolving creation events. tend put on event, rather on created thing:(b / build-01 : (b / build-01 :arg0 (t / ) :arg0 (t / ) :arg1 (b2 / bridge) :arg1 (b2 / bridge :location )) :location (s / state :wiki \"maryland\" :name (n / name :op1 \"maryland\")) : (d / date-entity :month 12)) built bridge maryland december. bridge was built them maryland december.here are more non-core roles::part(e / engine :part- (c / car)) engine the car cars engine(u / unit :part- (c / company)) unit the company companys unit do use :part set membership, in ceo a company.(s / south :part- (c / country :wiki \"france\" :name (n / name :op1 \"france\"))) south francesouthern france:subevent(w / win-01 :arg0 (b / boy) :arg1 (r / race-01 :subevent- (g / game :wiki \"olympic_games\" :name (n / name :op1 \"olympics\")))) boy won race the olympics.:consist-(r / ring :consist- (g / gold)) ring gold(t / team :consist- (m / monkey)) team monkeys:example(c / company :example ( / and :op1 (c2 / company :wiki \"ibm\" :name (n / name :op1 \"ibm\")) :op2 (c3 / company :wiki \"google\" :name (n2 / name :op1 \"google\"))))companies ibm google:direction(d / drive-01 :arg0 (h / ) :direction (w / west)) drove west.:frequency:frequency describes often something occurs.(m / meet-03 :frequency 3 :arg0 (w / ))we met three times. special frame rate-entity-91 is used describe recurring events other rate entities such \"every 3000 miles\" \"$3 per gallon\".(r / rate-entity-91 :arg1 2 :arg2 (t / temporal-quantity :quant 1 :unit (y / )))twice year(p / play-01 :arg0 (w / ) :arg1 (b / bridge) :frequency (r / rate-entity-91 :arg4 (d / date-entity :weekday (w2 / wednesday) :dayperiod ( / afternoon)))) play bridge every wednesday afternoon.core roles rate-entity-91::arg1 rate-entity-91 is quantity (default: 1):arg2 rate-entity-91 is reference quantity (\"per quantity\"):arg3 rate-entity-91 is regular interval between events (\"every 2 months\" - more specific :arg2):arg4 rate-entity-91 is entity which recurring events happen:extent(g / -on-15 :arg1 (r / road) :extent (f / forever)) road goes forever.focusinverse relations are often used focusing ( introduction):(s / sing-01 :arg0 (b / boy :source (c / college))) boy the college sang.(b / boy :arg0- (s / sing-01) :source (c / college)) singing boy the college is boy the college sang.(c / college :source- (b / boy :arg0- (s / sing-01))) college the singing boy came the concept focus applies the very top (root) the amr. aroot concept is selected, are more focus considerations -- else isdriven strictly semantic relations. example, once have selectedc / college the root, :source- must filled boy, withsing-01.reificationsometimes want use amr relation a -class concept. converting role a concept is called reification. here is example, where relation :cause is replaced cause-01. instead x :cause y, havex :arg1- (c / cause-01 :arg0 y).amr without reification: amr reification:(l / leave-01 (l / leave-01 :arg0 (g / girl) :arg0 (g / girl) :cause ( / arrive-01 :arg1- (c / cause-01 :arg1 (b / boy))) :arg0 ( / arrive-01 :arg1 (b / boy)))) girl left the boy arrived.amr without reification is simpler, why we to reify? reasonis make relation focus an amr fragment. example, suppose know is knife the drawer. might try focusing the knife:(k / -01 :arg0 (w / ) :arg1 (k2 / knife :location (d / drawer))) know knife is the drawer. (???) we might try focusing the drawer:(k / -01 :arg0 (w / ) :arg1 (d / drawer :location- (k2 / knife))) know drawer where knife is. (???) we really to focus the locating itself. amr therefore suppliesreifications many relations. the case :location, reification is-located--91, allowing to :(k / -01 :arg0 (w / ) :arg1 (b / -located--91 :arg0 (k2 / knife) :arg1 (d / drawer))) know knife is the drawer.note be-located--91 has roles, :arg0 ( thing exists space) :arg1 (where thing is). also reification we to modify relation. example:(k / -01 :arg0 (w / ) :arg1 (b / -located--91 :arg0 (k2 / knife) :arg1 (d / drawer) :polarity - : (y / yesterday))) know knife was in drawer yesterday.here are amr reifications. reifications often correspond ontonotespredicates, which case, just the :arg relations the natural .read chart : x :relation y = x :domain- (z / reification :range y) example: x :location y = x :arg0- (b / -located--91 :arg1 y)relationreificationdomainrangeexample:accompanieraccompany-01:arg0:arg1's him:ageage-01:arg1:arg2's 41 years old:beneficiarybenefit-01:arg0:arg1 5k run is kids:causecause-01:arg1:arg0 came 'cause her:concession-concession-91:arg1:arg2 came despite her:condition-condition-91:arg1:arg2 comes she comes:destination-destined--91:arg1:arg2'm off atlanta:durationlast-01:arg1:arg2's 15 minutes long:exampleexemplify-01:arg0:arg1cities such atlanta:extent-extent-91:arg1:arg2trip was 2500 miles:frequency-frequency-91:arg1:arg2 came three times:instrument-instrument-91:arg1:arg2forks are eating:location-located--91:arg1:arg2's here:manner-manner-91:arg1:arg2 was done quickly:mod-mod-91:arg1:arg2 is half chinese\":name-name-91:arg1:arg2 city formerly named constantinople:part-part-91:arg1:arg2 roof the house:polarity-polarity-91:arg1:arg2 don't .:possown-01, -03:arg0:arg1 dog's mine:purpose-purpose-91:arg1:arg2's eliminate bugs:quant-quant-91:arg1:arg2 are 4 rabbits:source-from-91:arg1:arg2's ipanema:subevent-subevent-91:arg1:arg2presentation a conference:subsetinclude-91:arg2:arg110% the workers:be-temporally--91:arg1:arg2 party is friday:topicconcern-02:arg0:arg1 show's me relations not reifications::arg0, :arg2, :arg2, ... :op1, :op2, :op3, :op4, :calendar, :century, :, :dayperiod, :decade, :era, :month, :quarter, :season, :timezone, :weekday, :, :year2:unit, :value, :mode, :compared-, :degree, :direction, :scale, the question remains: to reify? potential answer is whenever feel it. unfortunately, singlesentence may receive different amrs. either the following amrs reasonable represent girl left the boy arrived, neither beingcanonical:amr without reification: amr reification:(l / leave (l / leave :arg0 (g / girl) :arg0 (g / girl) :cause ( / arrive :arg1- (c / cause-01 :arg0 (b / boy))) :arg0 ( / arrive :arg0 (b / boy))))furthermore, might reasonably tend use first amr the girl left the boy arrived, prefer second for girl left, due the boy's arrival. we cannot guarantee these sentences thesame amr. second potential answer is reify the , which completelyeliminate relations :cause, :location, :subset amr, favor concepts cause-01, -located--91, include-91. this iscumbersome -- is easy typical simply type :location. resolution: consider amr reification be real amr, non-reified relations semantic sugar. therefore, you are translatingenglish amr, rule is whenever feel it, your amrs be normalized reified form behind scenes.phrasal verbsamr strips away light-verb constructions:( / adjust-01 :arg0 (g / girl) :arg1 (m / machine)) girl adjusted machine. girl made adjustment the machine.(t / bathe-01 :arg0 (b / boy)) boy bathed. boy took bath. also combines verb-particle constructions, using ontonotes predicate frames.here -05 is defined look : seek.(l / -up-05 :arg0 (b / boy) :arg1 ( / answer)) boy looked the answer. boy looked answer .sometimes particle doesnt change meaning the verb very much, ontonotes may still two separate predicates. example, close-06 meansbecome nearer, while close--07 is close : become nearer. such cases,amr canonicalizes the non-particle frame, e.g., close-06.prepositions prepositions signal semantic frame elements are dropped amr:(s / default-01 :arg1 (n / nation) : (d / date-entity :month 6)) nation defaulted june.(d / die-01 :arg1 (m / man) :location (h / house :poss m)) man died his house. time location prepositions are kept they carry additionalinformation, using amrs :opn. :op1 is different the :op1 used conjunctions.(s / default-01 :arg0 (n / nation) : (b / :op1 (w / war-01))) nation defaulted the war.(d / die-01 :arg1 (m / man) :location (n / near :op1 (h / house :poss m))) man died near house.(d / die-01 :arg1 (m / man) :location (b / between :op1 (h / house) :op2 (r / river))) man died between house the river.sometimes, content a prepositional phrase cannot easily slotted apredicate-argument structure, into generic role :time :location.amr cringes while employing default :prep-x representation:(s / sue-01 :arg1 (h / ) :prep- (s / case)) was sued the case.amr combines phrasal prepositions:(f / file :arg1 (b / brief) :prep--behalf- (g / government)) brief was filed behalf the government. tradition, frequent phrase according gets special handling:(s / -01 :arg0 (s2 / source :mod (g / government)) :arg1 (k / kill-01 : (y / yesterday)))according government sources, killing happened yesterday.government sources said the killing happened yesterday.relative clausesamr frequently represents relative clauses inverse roles, described the introduction:(b / believe-01 :arg0 (b2 / boy)) boy believes.(b / boy :arg0- (b2 / believe-01)) boy believesenglish uses relative clauses negating pre-nominal adjective isdifficult ( not-black car):(c / car :arg1- (b / black-04)) black car(c / car :arg1- (b / black-04 :polarity -)) car is blackjapanese simply marks adjectives a negative suffix.multiple relations the same name entity may several relations the same name:(s / system :mod (l / law) :mod (s2 / city :wiki \"shanghai\" :name (n / name :op1 \"shanghai\"))) shanghai legal system(b / boy :arg0- (w / -01 :arg1 (b2 / believe-01 :arg1 (g / girl))) :arg0- b2) boy wants believe girlconjunctions represent conjunction, amr uses concepts , or, contrast-01, either, neither, along :opx relations:( / and :op1 (b / boy) :op2 (g / girl)) boy the girl( / either :op1 (b / boy) :op2 (g / girl) :op3 (d / dog))either boy, girl, the dogconjoined adjectives are done without :(b / ball :mod (b2 / big) :mod (h / heavy)) big, heavy ball big heavy ball:opx is used clauses:( / and :op1 (c / shout-01) :op2 (l / leave-01 :arg0 (b / boy))) was shouting, the boy left.(c / contrast-01 :arg1 (c2 / shout-01) :arg2 (l / stay-01 :arg1 (b / boy))) was shouting, the boy stayed.sometimes, :op1 :arg1 may missing:(c / contrast-01 :arg2 (l / stay-01 :arg1 (b / boy))) the boy stayed.amr aims a logical representation when english elides core actors:( / and :op1 (c / shout-01 :arg0 (b / boy)) :op2 (l / leave-01 :arg0 b)) boy shouted left. need this is evident an entity plays different roles differentpredicates:( / and :op1 (a2 / arrive-01 :arg1 (b / boy)) :op2 (l / kill-01 :arg1 b :manner (p / prompt))) boy arrived was promptly killed.however, amr pulls non-core roles :time :location. here, :modifies entire conjunction rooted and:( / and : (d / date-entity :weekday (t / tuesday)) :op1 (a2 / arrive-01 :arg1 (b / boy)) :op2 (l / leave-01 :arg0 b)) boy arrived left tuesday. tuesday, boy arrived left.quantifiers scopeamr does have deep representation quantifiers. only canonicalizes position:(l / leave-01 :arg0 (b / boy :mod ( / all))) boys left. the boys left.each the boys left.(l / leave-01 :arg0 (b / boy :mod (n / )))no boy left.none the boys left.(l / leave-01 :arg0 (b / boy :mod ( / all :polarity -))) all the boys left.(l / leave-01 :arg0 (p / person :mod ( / all :polarity -))) everyone left. placement :polarity be troublesome. consider:(b / believe-01 :arg0 (g / girl) :arg1 (w / -01 :arg0 (b / boy) :manner (h / hard-02))) girl believes the boy works hard. we to represent girl doesnt believe the boy works hard, have decide whether place negative polarity under believe work hard. here should under hard:(b / believe-01 :arg0 (g / girl) :arg1 (w / -01 :arg0 (b2 / boy) :manner (h / hard-02 :polarity -))) girl believes the boy works a -hard manner. girl believes the boy doesnt hard. (colloquially) girl doesnt believe the boy works hard. (colloquially) we put :polarity elsewhere, change meaning:(b / believe-01 :arg0 (g / girl) :arg1 (w / -01 :polarity - :arg0 (b2 / boy) :manner (h / hard-02))) girl believes the boy refrains work, a hard manner.(b / believe-01 :polarity - :arg0 (g / girl) :arg1 (w / -01 :arg0 (b2 / boy) :manner (h / hard-02)))s true the girl believes boy works hard.(b / believe-01 :arg0 (g / girl :polarity -) :arg1 (w / -01 :arg0 (b2 / boy :polarity -) :manner (h / hard-02))) non-girl believes the non-boy works hard.amr apologizes not advising the placement negation respect quantifiers.degreecomparatives superlatives are represented :degree :compared-, e.g.:(b / bright-03 :arg1 (b2 / boy :mod (t / )) :degree (m / more)) boy is brighter. boy is more bright.(b / bright-03 :arg1 (b2 / boy :mod (t / )) :degree (m / ))that boy is brightest. boy is most bright.(p / plan-01 : (e / early :degree (m / more))) earlier plan (p / plan-01 :arg1- (g / -02 :degree (m / more))) better plan(p / plan-01 :arg1- (g / bad-07 :degree (m / more))) worse plan(p / plan-01 :mod (e / extreme :degree (t / too))) plan is too extreme(t / tall :degree (m / more) :domain (g / girl) :compared- (b / boy)) girl is taller the boy(g / girl :mod (t / tall :degree (m / ) :compared- (t2 / team)) :domain (s / ))she is tallest girl the teamamr apologizes, realizing the girl is taller the whole team, taller each individual.variables co-reference two variables are same, they refer the same entity:(w / -01 :arg0 (b / boy) :arg1 (g / -02 :arg0 b)) boy wants go. english, overt zero pronouns are often used realize co-reference, amr uses variables instead:(w / -01 :arg0 (b / boy) :arg1 (b2 / believe-01 :arg0 b :arg1 b)) boy wants believe himself. an overt pronoun has antecedent within sentence, amr uses pronoun:(s / -01 :arg0 (h / ) :arg1 (s / ))he saw .pronouns amr are always nominative (, she, , we, , ) and neveraccusative (, her, , us, , ). amr uses token y' for plural:(s / -01 :arg0 ( / i) :arg1 (y / y'))i saw (plural). saw y.i saw guys.possession relation :poss (possessed ) is very general form possession. amruses only possessives prepositional phrases of:(c / car :poss (h / ))his car car his(t / titan :poss (n / nation)) nations titans all possessives of phrases are represented :poss. amr often uses:part-, :consist-, etc.pertainymspertainym adjectives (e.g., atomic, adj. = , or pertaining , atoms) notappear amr. the stemmed noun form is used, along the :modrelation.(v / virus :mod (m / microbe))microbial virusmicrobe virus(w / war :mod ( / atom))atomic war pertainym may stemmed noun form, then subsequently verb form:(p / problem :mod (b / behave-01))behavioral problems.behavior problems.problems behavior.problems behaving. building amr english, rule is continue stemming toward verbform unless meaning is significantly altered.ordinals use role :ord the concept ordinal-entity express ordinals.(p / planet :ord (o / ordinal-entity :value 2)) second planetplanet number 2(v / visit-01 :arg0 (w / ) :ord (o / ordinal-entity :value 1 :range (t / temporal-quantity :quant 10 :unit (y / ))))our visit 10 yearssubsets often refer subsets we speak. amr uses roles :subset :subset-.(d / die-01 :arg1 (s / soldier :quant 9 :subset- (s3 / soldier :quant 20)))nine the twenty soldiers died.(h / -03 :arg0 (p4 / person :quant 4 :subset- (p2 / person :arg0- (s / survive-01) :quant 5) :subset (p3 / person :quant 3 :arg1- (d3 / diagnose-01))) :arg1 (d / disease))four the five survivors had disease, including three were diagnosed.features shared a subset its superset into superset , e.g.,survive above. reification :subset is include-91, we equivalently write:(d / die-01 :arg1 (s / soldier :quant 9 :arg1- (i / include-91 :arg2 (s3 / soldier :quant 20))))nine the twenty soldiers died.amr is sparing :subset -- otherwise things out control. example, do use for three the workers the plant, we rather interpret as three workers.note: amr editor automatically reifies :subset, :subset-, :superset :superset- to include-91, we call shortcuts.named entities concept instance amr have :name role. are restricted asmall set fixed categories countries people: ships, pets, computers also names.named entities are often referred in different ways, such \"us\", \"u.s.\", \"united states\" \"united states america\". annotate such named entities a canonical form, use wikipedia ( english) a standard mark nes a :wiki role such :wiki \"united_states\". is useful names themselves are ambiguous (such \"washington\" city, state, person; \"clinton\" \"bush\"). there is wikipedia page a given named entity, is marked :wiki -.(p / person :wiki \"margaret_brown\" :name (n / name :op1 \"mollie\" :op2 \"brown\"))mollie brown(p / person :wiki \"margaret_brown\" :name (n / name :op1 \"mollie\" :op2 \"brown\") :arg0- (s / slay-01 :arg1 (o / orc))) orc-slaying mollie brownmollie brown, slays orcs(s / ship :wiki \"rms_titanic\" :name (n / name :op1 \"titanic\")) titanic titanic ship named titanic(c / city :wiki \"marina_del_rey,_california\" :name (n / name :op1 \"marina\" :op2 \"del\" :op3 \"rey\")) marina del rey city marina del reyamr strings words :opn. does analyze semantic relationships inside named entity. example, the stop malaria foundation, do invoke predicate stop-01 malaria its :arg1.abbreviations proper names are expanded, abbreviated common nouns areexpanded. speaking common words, correct typos, we normalize american spelling, we not otherwise normalize variants.(s / state :wiki \"california\" :name (n / name :op1 \"calif.\"))calif.(r / rate :mod ( / advertise-01))advertising ratesad rates building amrs proper names -er nouns, need fill rootconcept ( top-level :instance role). doing , we face of threesituations.() in general, unless english text provides something more specific type, fill :instance slot a special list standard amr named entity types,e.g. person company. such cases, basically must hallucinate entity type. example:(p / person :wiki - :name (n / name :op1 \"pascale\"))pascale(c / company :arg0- (m / -01 :arg1 (c / chip))) chip makerhowever, do want amrs say person others say woman, some say company, others say organization. when are forced hallucinate entity type, amr requires to draw this canonical list (borrowing information extraction questionanswering):person, family, animal, language, nationality, ethnic-group, regional-group, religious-grouporganization, company, government-organization, military, criminal-organization, political-party, school, university, research-institute, team, leaguelocation, city, city-district, county, local-region, state, province, country, country-region, world-region, continent, ocean, sea, lake, river, gulf, bay, strait, canal, peninsula, mountain, volcano, valley, canyon, island, desert, forest, moon, planet, star, constellationfacility, airport, station, port, tunnel, bridge, road, railway-line, canal, building, theater, museum, palace, hotel, worship-place, market, sports-facility, park, zoo, amusement-parkevent, incident, natural-disaster, earthquake, war, conference, game, festivalproduct, vehicle, ship, aircraft, aircraft-type, spaceship, car-, work--art, picture, music, show, broadcast-programpublication, book, newspaper, magazine, journalnatural-objectlaw, treaty, award, food-dish, music-keybiomedical:molecular-physical-entity, small-molecule, protein, protein-family, protein-segment, amino-acid, macro-molecular-complex, enzyme, rnapathway, gene, dna-sequence, cell, cell-line, organism, disease always choose most specific applicable type. none these apply, we thing. examples:( / award :wiki \"nobel_prize\" :name (n / name :op1 \"nobel\" :op2 \"prize\")) nobel prize(g / government-organization :wiki \"national_security_agency\" :name (n / name :op1 \"nsa\") :mod (c / country :wiki \"united_states\" :name (n2 / name :op1 \"america\"))) american nsa(n / natural-object :wiki \"lone_cypress\" :name (n2 / name :op2 \"lone\" :op3 \"cypress\")) lone cypress(b) the text contains more specific english term describe type entity, use instead fill :instance role. example:(p / poet :wiki \"william_shakespeare\" :name (n / name :op1 \"william\" :op2 \"shakespeare\")) poet william shakespearewilliam shakespeare, poetpoet is more specific person.(v / village :wiki - :name (n / name :op1 \"odinaboi\")) village odinaboivillage is more specific city.(d / doctor :wiki - :name (n / name :op1 \"wu\"))doctor wu following example texts mention region, party spacecraft, in case prefer standard ne types country-region,political-party spaceship, the latter are more ( at least equally) specific:(c / country-region :wiki \"darfur\" :name (n / name :op1 \"darfur\") :location (c2 / country :wiki \"sudan\" :name (n2 / name :op1 \"sudan\")))sudan's darfur region(p / political-party :wiki \"christian_democratic_union_of_germany\" :name (n / name :op1 \"cdu\") :mod (c / conservative) :mod (c2 / country :wiki \"germany\" :name (n2 / name :op1 \"germany\")))germany's conservative cdu party(s / spaceship :wiki \"shenzhou_(spacecraft)\" :name (n / name :op1 \"shenzhou\")) spaceship shenzhou shenzhou spacecraftmere honorifics such mr., mrs., etc. are included part the name:(p / person :wiki - :name (n / name :op1 \"mr.\" :op2 \"wu\"))mr. wumister wu the next section \"special frames roles\" how annotate titles such \"president\". faced an appositive, amr calmly inserts facts slots:(g / group :wiki \"reed_elsevier#elsevier_nv\" :name (e / name :op1 \"elsevier\" :op2 \"n.v.\") :mod (c / country :wiki \"netherlands\" :name (h / name :op1 \"netherlands\")) :arg0- (p2 / publish-01))elsevier n.v. , dutch publishing group view object semantically a group, happens have known:name, plus a couple other properties describe .(c) text contains multiple english words vying the same :instance slot. happens occasionally. :instance is only relation cannotphysically appear twice amr, instead open the inverse :domain , .e. role :mod(d / doctor :wiki \"dr._seuss\" :name (n / name :op1 \"seuss\") :mod (p / poet)) poet dr. seuss all cases, hyphenated possessive words inside names are kept intact, broken .for example, \"dana-farber materials\" has :op1 :op2.special frames roles roles organizations, use frame -org-role-91:(p / person :wiki \"barack_obama\" :name (n / name :op1 \"obama\") :arg0- (h / -org-role-91 :arg1 (c / country :wiki \"united_states\" :name (n2 / name :op1 \"\")) :arg2 (p2 / president))) president obamacore roles have-org-role-91::arg0 have-org-role-91 is office holder, typically person:arg1 have-org-role-91 is organization, could be gpe:arg2 have-org-role-91 is title the office held, e.g. president:arg3 have-org-role-91 is description responsibilty (rarely used)typical -org-role-91 roles: ambassador, archbishop, bishop, ceo, chairman, chancellor, chief staff, commissioner, congressman, deputy, dictator, director, emperor, empress, envoy, foreign minister, governor, king, mayor, monarch, officer, official, pope, premier, president, principal, professor, queen, secretary, senator, spokesman, spokeswoman, treasurer etc. roles describe relation between people ( two entities the same type), use frame -rel-role-91:(h / -rel-role-91 :arg0 (h2 / ) :arg1 ( / i) :arg2 (b / brother--law)) is brother--law.core roles have-rel-role-91::arg0 have-rel-role-91 entity :arg1 have-rel-role-91 entity b:arg2 have-rel-role-91 role entity (must specified):arg3 have-rel-role-91 role entity b (often left unspecified):arg4 have-rel-role-91 relationship basis (contract, case; rarely used)typical -rel-role-91 roles: father, sister, husband, grandson, godfather, stepdaughter, brother--law; friend, boyfriend, buddy, enemy; landlord, tenant etc.exact numbersamr normalizes numbers:(b / boy :quant 40000)forty thousand boys40,000 boys( / atom :quant 1500000000) and half billion atoms1.5 billion atoms billion half atoms1,500,000,000 atomssuch normalization is often necessary we translate between asian-style10,000-based numeration western-style 1,000-based numeration.approximate numbersapproximate numbers are represented this :opn notation:(b / boy :quant (s / several :op1 100))several hundred boys(b / boy :quant (m / more- :op1 4000))more four thousand boysmore 4000 boys(b / boy :quant (m / between :op1 4000 :op2 5000))between 4000 5000 boysbetween four five thousand boysquantitiesexact quantities are represented their type :unit :quant arguments.(q / distance-quantity :unit (m / mile) :quant 10)ten miles10 miles10-mileapproximate quantities are represented using :opn notation, for approximatenumbers:( / about :op1 (q / distance-quantity :unit (m / mile) :quant 10)) 10 milesamr views quantified expressions two gallons milk milk:(b / buy-01 :arg0 (w / woman) :arg1 (m / milk :quant (q / volume-quantity :unit (g / gallon) :quant 2))) woman bought gallons milk. stretches time relative times, amr uses temporal-quantity.( absolute times, amr uses date-entity, described thenext section.)(t / temporal-quantity :unit (y / ) :quant 30)30 years(b / before :op1 (n / ) :duration (t / temporal-quantity :unit (y / ) :quant 30))during past 30 years(b / before :op1 (n / ) :quant (t / temporal-quantity :unit (y / ) :quant 30))30 years ago(b / before :op1 (n / ) :quant (m / more- :op1 (t / temporal-quantity :unit (y / ) :quant 30)))more 30 years agodisjunctions high:(o / :op1 (t / temporal-quantity :unit (y / ) :quant 3) :op2 (t2 / temporal-quantity :unit (y2 / ) :quant 4))three four years(o / :op1 (t / temporal-quantity :unit (m / month) :quant 6) :op2 (t2 / temporal-quantity :unit (y / ) :quant 1))six months a relative positions often include quantity:(c / crash-01 :arg1 (p / plane) :location (r / relative-position :op1 (g / city :wiki \"moscow\" :name (n / name :op1 \"moscow\")) :quant (d / distance-quantity :unit (m / mile) :quant 50) :direction (e / east))) plane crashed 50 miles east moscow. plane crash occurred 50 miles east moscow. x-quantity notation is used precise quantities. vague quantitiesstill the :quant role:(g / gather-01 :arg0 (p / person :quant (n / number :mod (l / large)))) large number people gathered.occasionally, measurement itself is primary concept:( / increase-01 :arg1 (n / number :quant- (p / person))) number people increased.quantity types include:monetary-quantity, distance-quantity, area-quantity,volume-quantity, temporal-quantity, frequency-quantity, speed-quantity,acceleration-quantity, mass-quantity, force-quantity, pressure-quantity,energy-quantity, power-quantity, voltage-quantity (zap!), charge-quantity,potential-quantity, resistance-quantity, inductance-quantity,magnetic-field-quantity, magnetic-flux-quantity, radiation-quantity,concentration-quantity, temperature-quantity, score-quantity,fuel-consumption-quantity, seismic-quantity.(q / monetary-quantity :quant 20 :unit (d / dollar :mod (e / country :wiki \"canada\" :name (n / name :op1 \"canada\"))))c$2020 canadian dollarsquantities where :quant 0 value does represent 0-quantity :scalerather :unit:(q / seismic-quantity :quant 7.9 :scale (r / richter))7.9 the richter scalemathematical operators special concepts product- and sum- support mathematicaloperators the meaning a text might include.(r / reach-01 :arg0 (v / velocity :poss ( / aircraft)) :arg1 (p / product- :op1 3 :op2 (s / speed :poss (s2 / sound)))) aircraft's velocity reached three times speed sound.(f / finish-01 :arg0 (p / person :wiki \"patrick_makau_musyoki\" :name (n / name :op1 \"patrick\" :op2 \"makau\")) :arg1 (r / run-02 :arg0 p :arg1 (m / marathon) :duration (s2 / sum- :op1 (t2 / temporal-quantity :quant 2 :unit (h / hour)) :op2 (t3 / temporal-quantity :quant 3 :unit (m2 / minute)) :op3 (t4 / temporal-quantity :quant 38 :unit (s3 / second)))))patrick makau finished marathon 2 hours, 3 minutes 38 seconds. entities: dates, times, percentages, phone, email, urls entities are described standard, canonical forms: (d / date-entity : 2012 :month 2 : 29)february 29, 201229 february 20122/29/2012(d / date-entity : 2012)2012 year 2012(d / date-entity :month 4)april(d / date-entity :weekday (f / friday))friday(d / date-entity : 2012 :month 2)february, 2012(d / date-entity :month 2 : 29 :weekday (w / wednesday))wednesday, february 29(d / date-entity : 29) 29th(d / date-entity :month 2 : 29 :weekday (w / wednesday) : 16:30 :timezone (z / pst))wednesday, february 29, 16:30 pst(d / date-entity : 16:30)16:304:30pm4:30 the afternoonhalf past four(d / date-entity :era (h / heisei) : 24 :month 2 : 29 :calendar (j / country :wiki \"japan\" :name (n / name :op1 \"japan\")))february 29, 24th of heisei era (d / date-entity : 2011 :quarter 4)4th quarter, 20112011q4(d / date-entity : 2011 :season (s / summer))summer 2011(d / date-entity : 2011 :year2 2012 :season (w / winter))winter 2011-2012 (d / date-entity : 2011 :year2 2012 :calendar (y / :mod ( / academia)))academic 2011-2012 (d / date-entity : 2012 :calendar (y / :mod (f / finance) :mod (g / government-organization :arg0- (g2 / govern-01 :arg1 (c / country :wiki \"united_states\" :name (n / name :op1 \"united\" :op2 \"states\"))))))united states government fiscal 2012(d / date-interval :op1 (d2 / date-entity : 2012 :month 3 : 8) :op2 (d3 / date-entity : 2012 :month 3 : 9))march 8-9, 2012(d / date-interval :op1 (d2 / date-entity : 1939 :month 9 : 1) :op2 (d3 / date-entity : 1945 :month 5 : 8))sept. 1, 1939 - may 8, 1945(p / percentage-entity :value 25)25%twenty-five percent25 percent(p / phone-number-entity :value \"18005551212\")1-800-555-12121 (800) 555-1212(e / email-address-entity :value \"president@whitehouse.gov\")president@whitehouse.gov(u / url-entity :value \"www.whitehouse.gov\")www.whitehouse.govamr freak show section is optional reading. some mathematical curiosities amr one bumps eventually, interest mathematicians children.cycles following amr might like has cycle, w being sub-node w, it is cyclic all, one the roles its path is inverse(:arg0-), which corresponds an arrow the opposite direction:(w / woman :arg0- (l / lose-02 :arg1 (s / scarf :poss w))) woman lost scarf.approximately 0.3% amrs are legitimately cyclic for example:(p / procedure :purpose (e / ensure-01 :arg0 p :arg1 (q / quality))) procedure ensure qualityamrs such cycles typically involving :concession, :condition, :manner, :purpose, :time. cycles magically disappear upon reification:(p / procedure :arg1- (h / -purpose-91 :arg2 (e / ensure-01 :arg0 p :arg1 (q / quality))))different textual ways encode graphfinally, have different ways encoding same propositional content( boy likes be believed):(l / -01 (l / -01 :arg0 (b / boy) :arg0 (b / boy :arg1 (b2 / believe-01 :arg1- (b2 / believe-01)) :arg1 b)) :arg1 b2)sensible will prefer version the left, though both versions relate same conjunction propositional triples."
}