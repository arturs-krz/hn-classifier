{
	"_id": "14451479",
	"site": "https://github.com/JDRobotter/wifi",
	"title": "Autonomous on the fly wifi rogue access points",
	"author": "mehdilauters",
	"date": "2017-06-13T13:55:20.725Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"html",
			"javascript",
			"css",
			"other"
		]
	},
	"content": "readme.md karma2 is war walking tool designed catch devices grab informations available a man the middle attack without wan access. comes an admin web interface order monitor connected devices a standard smartphone. aim this project is check privacy security concerns are linked, how is easy get information peoples we are supposed know. nice shots: current song album art played the deezer app is displayed the webui tinder profile pictures uris ( reproduced ) lot instagram pictures urisdhl delivery digitalized signatureseveral mail credentials firmware the air (fota) servers google search history ( of course interesting embarrassing searchs ) position history session cookies kedge credentialsfeatureswan access mandatory tool does requires wan access it be package a totally autonomous system if phone other devices believe are connected a real wan access. please check --offline option.multi ssid autodetects maximum number access point can run each wifi dongle. is possible create 8 fake access point using 3$ devicedatabase grabbed information are stored a local sqlite database ( credentials, services detections, http request... )loggingeverything is logged the database, also standard files for example post request data. you unpack transmitted files, base64 data try understand binary data. log folder is created session, within will find post request, raw tcp dump data each access point created a global log file is available realtime through web uirealtime web loggingreal console file loggingsecurityiptable is used seggregate each access point to avoid possible client attack. clients only access faked services, only whitelisted mac address access the admin interface other services such ssh. mac filtering is controlled the --ignore optionwpa half handshake you prefere catch wpa handshake instead devices information, start wpa protected access points. device try connect its own credentials. will course fail you have handshake your logs. please refer wpa2-halfhandshake-crack. can try --wpa --tcpdump optionsphishing phishing tests were done grab wifi portals login depending the current essid.moreover available cookies wellknown websites are downloaded time user load fake html page our internal webserver. may find complete list the js source fileprobes monitoringusing scapy wifiscanmap, is possible create requested essid catch unconnected wifi clients around . check --monitor optiondhcp dnsmasq dhcp module is used give dhp leases new connected devicesdns dnsmasq server is used fake dns queries the local web server. also fakes microsoft dns connection check providing required response enable connectivity windows phones.webserver request connected devices are routed the internal webserver try fake most possible services apis. http https protocols are available ( a self signed certificate) also fakes required services make devices (android, blackberry...) believe are connected a real wan access. example, can retrieve currently played song the android deezer application. course authentication method are logged (such basic, oauth tokens) cookies are stored a firefox compatible file using cookie-importer module.ftp server basic ftp server try catch credentialspop3 server basic pop3 server try catch credentialssamba crawler module tries fetch public data clients samba sharesservice devices guessr: modules tries fingerprint versions devices applications for example :behaviour smartphone is around and wifi is activated unconnected. tries find known essid making probes request. karma2 service cacth and create dedicated access point. device connect already some information through dhcp process: hostname.depending the os, may check has real internet access before notify system connection is available. android check given url example. internal webserver responds should and device wake all applications.allmost applications try reach respective backend, through dns queries, already are able fingerprint .most them shutdown they try reach backend through secure https connection our certificate is unsecure. all dns are faked, still lot them try communicate through unsecure connection gave (http self signed https). is the for webserver fake application apis get example, deezer profile id, applications services versions... access point is destroyed a given inactivity .the real life test, 5 month experiencedatasetdate rangeselect min(timestamp), max(timestamp) ap_connections limit 1\"tue, 18 oct 2016 12:03:44\"\"thu, 02 mar 2017 07:59:23\"unique client countselect count(*) ap_connections group client_mac3266 rowsresults to 40 connected devices public transport accross 24 concurrent faked access points using raspberry 3, 4 wifi dongle abale create 8 access point each.top essidsselect ap_essid, count(*) c ap_connections group ap_essid order c descandroid versionsclients credentialsselect count(*) client_credentials;9 from outlook application itself: eas.outlook.com/microsoft-server-activesyncadvertising tracking cannot immagine data are sent data brokers through applications advertising purpose, including:carriers ( orange / sfr ... )phone brand ( apple / samsung...)phone revision ( samsung_gt-i8190_5.0.2_5.4.1.146 ... )os versionorientation lock ( true / false )locale ( en_en / fr_fr ...)country code (en / fr)screen orientation ( landscape / portrait )screen resolutioncharging status ( true / false )front camera available ( true / false )rear camera available ( true / false )microphone available ( true / false )gps enabled ( true / false )bluetooth enabled ( true / false )network type ( lan / data )application list versions for example following request the applovin marketing api:{ \"app_info\" : { \"first_install\" : \"false\", \"app_name\" : \"imusic\", \"applovin_sdk_version\" : \"3.0.2\", \"package_name\" : \"com.imusicamir.pro\", \"created_at\" : 4142207 }, \"stats\" : { \"ad_session_start\" : 539063990.722326, \"ad_imp\" : 1, \"ad_req\" : 1083 }, \"targeting\" : { }, \"device_info\" : { \"orientation\" : \"portrait\", \"idfa\" : \"291b9945-f147-43c1-ab32-6a97af650479\", \"brand\" : \"apple\", \"revision\" : \"iphone7,2\", \"locale\" : \"fr_fr\", \"os\" : \"10.1.1\", \"type\" : \"ios\", \"orientation_lock\" : \"none\", \"dnt\" : \"false\", \"model\" : \"iphone\", \"carrier\" : \"bouygues telecom\", \"country_code\" : \"fr\" }} a post request the databerries.com marketing service:fota fota uri checks:ospserver.netadsunflower.comfotapro.com's next?fake more apisfake funny apis ( weather update, microsoft tiles news )parse more post requestauthomatize half wpa handshake catchingmap clients trajectory wifiscanmapimplement on droppable esp8266 boxrefactoring: using sql abstraction, using web server frameworkdisclaimer project was developped testing experimentation purpose . it was used check far is possible go such chip devices. credentials other informations grabbed were used against .use only you own devices for testing purpose to setup # init submodules git submodule update --init --recursive # setup dependencies apt install python-scapy hostapd smbclient python-impacket nmap iptables tcpdump dnsmasq airmon-ng smbclient npm pip install user-agents # setup web ui dependencies cd www npm install -g bower bower install # run python2.7 run.py --gateway 192.168.1.1 --tcpdump --monitor mon0 --hostapds wlan0 --offline --ignore your_mac_address -p 9999 # enjoy # please to http://your_ip:9999 # to http://your_ip:9999/images.html display queried images ( may some fun ) # to http://your_ip:9999/requests.html get requests list replay with headertroubleshootings: webui is incomplete: please check you already install dependencies previously describen cannot access the webui ssh: you are connected through faked wifi, check you set --ignore option your mac address pass mac filtering"
}