{
	"_id": "14412553",
	"site": "https://github.com/smartcat-labs/ranger",
	"title": " Ranger â€“ Contextual Test Data Generator",
	"author": "milansm",
	"date": "2017-06-13T13:06:44.749Z",
	"tags": {
		"categories": [
			"opensource",
			"contextual-data",
			"test-data",
			"data-generation",
			"data-generator"
		],
		"languages": [
			"java",
			"groovy",
			"shell"
		]
	},
	"content": "readme.md ranger allows developers quickly in simple manner define create large number objects whose attributes randomly selected values the configured set. can used following:quickly populate database meaningful valuescreate data based defined rules (e.g. create 100 users of 10 first name 'john' they are born 1980) order create test data automated unit integration tests meaningful data load testingobjectgenerator<user> usergenerator = objectgenerator.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\", \"only_lol_catz\", \"aragorn_the_gray\") .withvalues(\"firstname\", \"alice\", \"bob\", \"charlie\", \"david\") .withvalues(\"lastname\", \"zed\", \"yvette\",\"xavier\") .withranges(\"numberofcards\", 1l, 5l) .withranges(\"accountbalance\", 2.72, 2.73) .withsublist(\"favoritemovies\", \"predator\") .withsubset(\"nicknames\", \"al\", \"billie\", \"gray\") .withranges(\"birthdate\", localdatetime.(1975, 1, 1, 0, 0), localdatetime.(2001, 1, 1, 0, 0)) .withobjectgenerator(\"address\", addressgenerator) .tobegenerated(1000).build();aggregatedobjectgenerator<user> aggregatedusergenerator = aggregatedobjectgenerator.builder<>() .withobjectgenerator(usergenerator).build();list<user> users = aggregatedusergenerator.generateall(); can used a java library, programatically unit integration tests, from command line (though last is yet implemented). to ?artifact be fetched bintray.add following <repository> element your <repositories> section pom.xml:<repository> <id>bintray-smartcat-labs-maven</id> <name>bintray</name> <url>https://dl.bintray.com/smartcat-labs/maven</url></repository>add <dependency> element your <dependencies> section pom.xml specific version need:<dependency> <groupid>io.smartcat</groupid> <artifactid>ranger</artifactid> <version>version</version></dependency>similarly, dependency be added any build tool supporting maven dependencies. showcase usage examples, a at ranger demo application.why?totally random test data is so useful: is hard make by certain rules is hard reason it does reflect production data values nor distribution we do is contextual data generator create users whose attribute values sense the domain context. can say, example, 70% created users should females. table then like :how works?ranger uses reflection set property value generated the rule. rule be specified several ways, usually specifying list allowed values range distribution use.examplescreate 1000 instances user entity, of exactly 100 users first name john joan.objectgenerator<user> randomusergenerator = objectgenerator.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\", \"only_lol_catz\", \"aragorn_the_gray\") .withvalues(\"firstname\", \"alice\", \"bob\", \"charlie\", \"david\") ... .tobegenerated(900).build();objectgenerator<user> johnusergenerator = objectgenerator.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\", \"only_lol_catz\", \"aragorn_the_gray\") .withvalues(\"firstname\", \"john\", \"joan\") ... .tobegenerated(100).build();aggregatedobjectgenerator<user> generator = aggregatedobjectgenerator.builder<>() .withobjectgenerator(randomuserbuilder) .withobjectgenerator(johnuserbuilder).build();list<user> users = generator.generateall();create 1000 instances user entity, of exactly 100 users are born between 1980 1990.objectgenerator<user> randomusergenerator = randombuilder.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\", \"only_lol_catz\", \"aragorn_the_gray\") .withranges(\"birthdate\", localdatetime.(1975, 1, 1, 0, 0), localdatetime.(1980, 1, 1, 0, 0), localdatetime.(1990, 1, 1, 0, 0), localdatetime.(2001, 1, 1, 0, 0)) // creates values two ranges [1975, 1980) [1990,2001) ... .tobegenerated(900).build();objectgenerator<user> millenialuserbuilder = objectgenerator.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\", \"only_lol_catz\", \"aragorn_the_gray\") .withranges(\"birthdate\", localdatetime.(1980, 1, 1, 0, 0), localdatetime.(1990, 1, 1, 0, 0)) ... .tobegenerated(100).build();aggregatedobjectgenerator<user> usergenerator = aggregatedobjectgenerator.builder<>() .withobjectgenerator(randomuserbuilder) .withobjectgenerator(millenialuserbuilder).build();list<user> users = usergenerator.generateall();create 100 instances user entity addreses generated declared builder:objectgenerator<address> randomaddressgenerator = objectgenerator.builder<address>(address.class) .withvalues(\"city\", \" york\", \"san francisko\", \"boston\", \"los angelese\", \"las vegas\", \"austin\", \"denver\", \"seatle\") .withvalues(\"street\", \"anderson mill road\", \"14 tee dr\", \"3 oaks cir\", \"adobe trail\", \"clayton ln\", \"foy cir\") .withranges(\"housenumber\", 1l, 150l).build();objectgenerator<user> randomusergenerator = objectgenerator.builder<user>(user.class) .withvalues(\"username\", \"destroyerofw0rldz\") .withobjectgenerator(\"address\", randomaddressgenerator).tobegenerated(100).build();aggregatedobjectgenerator<user> generator = aggregatedobjectgenerator.builder<>() .withobjectgenerator(randomuserbuilder).build();list<user> users = generator.generateall();"
}