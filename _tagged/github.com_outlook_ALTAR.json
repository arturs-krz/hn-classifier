{
	"_id": "14267041",
	"site": "https://github.com/outlook/ALTAR",
	"title": " ALTAR, an Azure AD-based OpenSSH CA inspired by BLESS",
	"author": "thenewwazoo",
	"date": "2017-06-13T13:32:04.538Z",
	"tags": {
		"categories": [
			"opensource",
			"azure",
			"ssh",
			"openssh",
			"certificates",
			"certificate-authority",
			"keyvault",
			"azure-active-directory",
			"azure-app-service",
			"netflix-bless"
		],
		"languages": [
			"python",
			"shell"
		]
	},
	"content": "readme.md altar: azure limited- access regulatoraltar is, its core, ca openssh certificates. was inspired netflix' bless tool, serves similar function.altar combines few different azure technologies: azure web app service provides paas base the wsgi component altar performs various operations. azure key vault service is used store cryptographic material. the (near!) future, will used perform key generation signing operations.azure active directory is used restrict access altar, well the provider identity information the certificate holder. combining technologies, altar provides facility issuance delivery ssh certificates can used lieu authorized key files, that centralizes enforcement security requirements such 2fa, regular privilege review, centralized privilege escalation/access logging, more. the interests \"release early, release often\", altar is being published while still being tested developed internally. is considered experimental!architectural overview(source)installationinstallation is straightforward, is difficult.app service aad applicationsapp service creation, create web app. the azure portal, open app services blade. create \"web app\" service.next, the app's blade, select \"deployment options\". choose source appropriate your environment. testing, local git repository is convenient.web app creation configurationcreate new app, type \"native\" ( type is essential). redirect uri should set the url the app service web app 've created, the auth callback endpoint appended (https://${web_app_name}.azurewebsites.net/.auth/login/aad/callback).create new key, note key later .under required permissions, grant following permissions:windows azure active directory (microsoft.azure.activedirectory)sign and read user profile (user.read)access directory the signed- user (directory.accessasuser.)azure key vault full access the azure key vault service (user_impersonation)app service configurationopen web app's blade, select \"authentication/authorization\". turn app service authentication, select \"log with azure active directory\" the drop-down. click azure active directory option, set management mode \"advanced\". enter ${ad_web_app_name}'s client id, https://sts.windows.net/${tenant_id}/ the issuer url[, a client secret created this service]. set allowed token audience the url your web app, e.g. https://${web_app_name}.azurewebsites.net. update authentication-related configuration settings the web app. the web app's blade, click \"resource explorer\". descend tree through config, open authsetting document. edit document set:properties { ..., \"clientsecret\": \"...\", \"additionalloginparams\": [ \"response_type=id_token code\" ], ..., }where clientsecret is secret the aad web app created earlier.before doing first deployment altar, 'll need upgrade pip. open console the app service blade, run env\\scripts\\activate.bat, followed env\\scripts\\pip.exe install --upgrade pip.cli app creation configurationcreate another azure active directory app, type \"native\". uri here is used redirects, should set according your policy.under required permissions, grant \"access ${appsvc_ad_app_name}\" permission.key vault creation configurationcreate key vault, grant web service aad application read permissions secrets. note the vault url. back the web app's blade, open \"application settings\". the app settings section, add key named \"azure_keyvault_url\" a value set the url your key vault.adding keysn.b. uses ssh keys the present moment, will soon built- key vault functionality. a trusted device, generate new 2048-bit rsa key:$ ssh-keygen -t rsa -b 2048 -f ca not enter passphrase.create new secrets copy key files them; public key file is put the signing-pubkey secret, the private key file signing-key. line endings must preserved, most reliable to this is skip portal upload programmatically, example using azure cli.$ az keyvault secret set --name signing-key --file ./ca --vault-name ...configuring user authorizationusers authorized generate ssh certificates (, likely extension, log hosts) are expected belong a configurable group. grouping users according your environment, must configure web app. within web app's portal blade, open \"application settings\". the app settings section, add key named \"permitted_group\", a value matches display name the group wish authorize.configuring hostsaltar relies openssh's trustedusercakeys feature, must enabled the ssh server's config file. option specifies ca key will trusted user login. create file, owned and writeable (mode 0644 less) contains key. example, /etc/ssh/ca.pub. key is available via https the /pubkey address your web service.n.b. altar provides openssh authentication, does is sufficient user login! openssh refuse permit users present valid certificates that are known the underlying host. example, /etc/nsswitch.conf has line passwd compat ldap, the user principal (user@example.com) is in ldap in /etc/passwd, openssh reject login attempt. this is problem, check libnss-aad! to altaronce service is configured, users invoke altar.py command generate certificates. wrapper script, altar.sh is provided shows minimum necessary environment variables ( correspond options supported altar.py). resulting certificate is written ${identity}-cert.pub (e.g. ~/.ssh/id_rsa-cert.pub) altar.py.n.b. wrapper script also helpfully add certificate the macos keychain the system is darwin.security considerationsaccess the secrets stored the key vault should be granted the aad web app. goal is restrict users (human otherwise) signing access keys themselves. pay close attention the ownership chain the key vault its resource group ( well subscription administrators), sufficiently-privileged users grant themselves access the secrets leveraging resource management privileges.access the client secrets the aad web app are likewise extremely sensitive, obtaining could used impersonate web app acquire key vault secrets. bear mind any user read access the web service configuration obtain client secret, it is necessarily stored plaintext the config/authsettings document. user owns aad web app create secrets equivalent privileges, well."
}