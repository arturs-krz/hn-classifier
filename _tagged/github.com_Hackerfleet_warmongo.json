{
	"_id": "14213687",
	"site": "https://github.com/Hackerfleet/warmongo",
	"title": " A Python, Mongodb and JSONSchema based object model wrapper in ~300 LOC",
	"author": "ri0t",
	"date": "2017-06-13T13:33:03.543Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.md warmongo! fork is being used https://github.com/hackerfleet/hfos'll try maintain upstream will add certain features the circuits framework, we use:https://bitbucket.org/circuits/circuitsthings have changed:jsonschema is truly used validate objects ( validates far more just basetypes) do ignore mongo's object_id - sure this is good thing, it helps the schemata require ( spec) 'id' field lists uri the schema resulting field is enforced instantiated objects, too, clients validate schema-iddescription is package generating classes a json-schema are besaved mongodb (un)pickled via python's builtin json module others simplejson ujson. extends json schema supporting extra bson types:objectid - the \"object_id\" type your json schema validate a field is valid objectid.datetime - the \"date\" type your json schema validate a fieldis valid datetimeusagebuild schemaschema = {'name': 'country','id': '#country','properties': {'name': {'type': 'string'},'abbreviation': {'type': 'string'},},'additionalproperties': false,}connect your databaseimport warmongowarmongo.connect(\"test\")create modelcountry = warmongo.model_factory(schema)create object using modelsweden = country({\"name\": 'sweden', \"abbreviation\": 'se'})sweden.save()sweden._idobjectid('50b506916ee7d81d42ca2190')let object validate itself!sweden = country.find_one({\"name\" : \"sweden\"})sweden.name = 5traceback ( recent call last):file \"\", line 1, file \"warmongo/model.py\", line 254, setattrself.validate_field(attr, self._schema[\"properties\"][attr], value)file \"warmongo/model.py\", line 189, validate_fieldself.validate_simple(key, value_schema, value)file \"warmongo/model.py\", line 236, validate_simple(key, value_type, str(value), type(value)))warmongo.exceptions.validationerror: field 'name' is type 'string', received '5' (<type 'int'>)sweden.overlord = 'bears'traceback ( recent call last):file \"\", line 1, file \"warmongo/model.py\", line 257, setattrraise validationerror(\"additional property '%s' allowed!\" % attr)warmongo.exceptions.validationerror: additional property 'overlord' allowed! can update objects dictionaries:sweden.update({\"name\": \"sverige\"})sweden.save() get to browser other similar things, serialize :sweden.serializablefields(){'_id': '50b506916ee7d81d42ca2190', 'name': 'sverige', 'abbreviation': 'se', 'id': '#country'}choosing collection default warmongo use pluralized version the model's name. you to something else, put in json-schema:{ \"name\": \"mymodel\", ... \"collectionname\": \"some_collection\", ...}multiple databases use multiple databases, simply call connect() multiple times:>>> import warmongo>>> warmongo.connect(\"test\")>>> warmongo.connect(\"other_db\") default models use first database specified. you to a different , put in json-schema:{ \"name\": \"mymodel\", ... \"databasename\": \"other_db\", ...}licenceapache version 2.0change notice file has been changed the hackerfleet community a change notice hasbeen added all modified files accordance the apache license 2.0production examples hackerfleet uses warmongo orm system deal data objects a developer enduser friendly .see in action http://github.com/hackerfleet/hfos original author uses warmongo every at startup http://www.sweetiq.com/ share datadefinitions between python node.js applications. has been running production some now, it has been reasonably tested robustness performance."
}