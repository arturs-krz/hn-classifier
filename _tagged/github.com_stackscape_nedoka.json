{
	"_id": "14261295",
	"site": "https://github.com/stackscape/nedoka",
	"title": " Nedoka â€“ rapid creation and management of containerised environments",
	"author": "SmurfJuggler",
	"date": "2017-06-13T13:32:06.179Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"shell",
			"php",
			"css",
			"makefile"
		]
	},
	"content": "readme.md nedokanedoka is complete, vm-based sandbox the creation management arbitrarily complex prototype/development environments. globally available specs have extensive event-driven scripts defined inline, define comprehensive relationships letting easily define stitch together containers, stacks environments manage all using straightforward commands. automatic split-horizon dns reverse proxying ensures endpoints are immediately reachable friendly hostnames, while database management, user creation, package caching, environment injection, backups/restores etc. are automated the point effortlessness.highlightssimple usage - cli syntax configuration files controlling containers stacks is straightforward possible, dockerfile creation, content population, dns, reverse proxying, database password management etc. happen automatically.globally available container/stack specs - containers defined anywhere the config path reference each and controlled via command line without specifying exact locationcontainer relationships - containers stacks specify includes, define dependencies, cascade settings descendents, inherit overload/append/prepend each others' settingscontainer merging - containers stacks be created merging together multiple containers /or stacks, merge order be controlled individual settingscontent population - directory structures database dumps be included alongside container specs automatic population baseline filesystem content databasesinline scripts - extensive amount script types be defined inside container configs, files will created automatically runtimeuser creation & switching - a shorthand tag inject portable code create switch between users groups the scripts defined in configsdatabases - database abstraction layer automatically creates, backs and restores postgres, mysql mariadb databases required. databases be autopoulated baseline dump files.secrets - passwords are automatically created /or injected stored vault/consul referenced your configsbackups - containers are backed /restored automatically destroy/build manually demandcache modification - nedoka makes easy split layers cache bust any point your buildssplit horizon dns - dns zones are automatically created containers registered vm internal, hostonly, external interfacesreverse proxy - containers http/s endpoints defined are automatically reverse proxied you hit endpoints names definetls - certificate authority is created build, is used sign autogenerated certificates https endpointsdebugging - jump onto container build when container is running a simple command. -step rebuild containers cmd/entrypoint disabled provides way jump and debug problematic containershelper scripts - arbitrary helper scripts are triggered the host demand be defined inline a container specgetting startedinstall pre-requisites nedokaclone repo download extract zip wherever want to live your system. data backups be stored subdirectories that folder, put somewhere sensible.start vmnedoka comes a bootstrap/kickstart script will configure pretty much everything mac os ubuntu (16.0.4 tested ) if 're using of operating systems, cd the folder extracted, chmod +x nedoka.sh, bring nedoka vm using ./nedoka.sh otherwise skip ahead the manual setup section below it finishes installing pre-requisites configuring vm will dropped the vm automatically, future 'll able re-run ./nedoka.sh arguments do you need. there are errors running ansible playbook, try exiting vm, running vagrant provision start nedoka vm connectdown stop running nedoka vmrestartrestart running nedoka vmssh connect existing, running nedoka vmclean destroy nedoka vm recreatedestroydestroy nedoka vmfinally, edit network settings add dns server 127.0.0.1 search domain test you'll good go. that went , skip ahead adding camanual setup ():if are on mac os ubuntu 16 were unable use nedoka.sh set things automatically. 'll need do manual setup. here's rough guide what need know linux windows, best luck!manual setup (linux):install vagrant, virtualbox, dnsmasq whatever equivalent nfs-kernel-server is your distro.add address=/.test/192.168.125.99 dnsmasq.conf (wherever lives)add nameserver 127.0.0.1 dnsmasq.d/test (probably /etc)optionally, create profile aliases control vm - something this should the trick:alias nedoka-clean='cd ~/vagrant/nedoka && vagrant destroy --force ; vagrant && vagrant ssh'alias nedoka-='cd ~/vagrant/nedoka && vagrant halt ; vagrant && vagrant ssh'alias nedoka-down='cd ~/vagrant/nedoka && vagrant halt;'alias nedoka-restart='cd ~/vagrant/nedoka && vagrant reload && vagrant ssh'alias nedoka='cd ~/vagrant/nedoka && vagrant ssh'manual setup (windows): you're windows, 'll to install vagrant, virtualbox acrylic dns proxy. you don't any these already can chocolatey do by running in administrator cmd window.@powershell -noprofile -executionpolicy bypass -command \"iex ((-object system.net.webclient).downloadstring('https://chocolatey.org/install.ps1'))\" && set \"path=%path%;%allusersprofile%\\chocolatey\\bin\"choco install -y vagrant -version 1.9.2choco install -y virtualbox acrylic-dns-proxyopen \"edit acrylic configuration file\" your start menuchange ip the line primaryserveraddress=8.8.8.8 whatever primary dns server normally is ( just leave as google's 8.8.8.8)scroll down the secondaryserver section set server address affinity mask this:secondaryserveraddress=192.168.125.99secondaryserverdomainnameaffinitymask=*.testrestart acrylic dns proxy servicenet stop acrylicservicecontrollernet start acrylicservicecontrolleredit windows network settings add 127.0.0.1 your primary dns server, .test a suffix. you should able just hop the directory run vagrant followed vagrant ssh get connected the vm.note: malwarebytes does something screwy prevents local resolvers working correctly. 've been lazily disabling mbam testing nedoka windows get ready release ('m normally mac) might to dig a better solution you windows + mbamadding caduring build, nedoka creates certificate authority it uses sign certificates required. 'll find in data/ folder once vm has been provisioned. add to os keychain /or browser keystores trust to those delicious green padlocks.connecting the vmonce everything has downloaded built, dns settings are configured we've trusted ca, can connect the vm ( doesn't apply you used nedoka.sh) the directory vagrantfile lives , typevagrant sshgetting stuck assuming 've followed along this point haven't hit weird problems, vagrant box be , dns is configured you're ready start creating containers. number container stack definitions are available config/_misc, type nedoka list nedoka run [tab] see list all bundled containers. the rest this guide, 'll build a simple php stack ( an occasional detour here there). database dump frontend files already exist, don't worry, 're running through nedoka end things, won't writing bunch code neither us care .start opening file config/tutorial/tutorial.yml your text editor choice. could spread containers 'll describing this guide into files the config/ directory tree ( containers config/ reference each ) but 'll put everything tutorial.yml now.note: yml file put anywhere the container/ directory structure be checked container definitions, except nested a folder called 'files' add simple container can run, just need give a name tell which image use - 're going build little php stack, we'll call first container that, point at php:7-apache image docker hub.php-stack: image: php:7-apachebring up r php-stack (r is shorthand nedoka run - either works)note: shell completions are present yet the shorthand commands, you nedoka [cmd] n cmd can tab completion entering container name, can resolve paths within containers tab completion, e.g. n exec dns more /var/lib/bind/[tab] complete n exec dns more /var/lib/bind/internal.nedoka.hosts image be pulled, built a container run. haven't done port forwarding reverse proxying though, we won't able do much it yet.add http service endpoint below - services be called anything can specify ports, forwarded port a path. this case 've called service 'http' means nedoka handle reverse proxying automatically (similarly, a https service is defined 'll create sign certificate before doing reverse proxying)php-stack: image: php:7-apache services: http: port: 80run again r php-stack it finishes building time, 'll a .test url, you visit you'll the apache server running, by default php:7-apache image doesn't anything its web root, that \"forbidden\" page doesn't very nice, let's throw quick build script there add index just displays phpinfo.php-stack: image: php:7-apache services: http: port: 80 onbuild: | echo \"<?phpinfo();?>\" > /var/www/html/index.php can run again see new index or my word it you'll a phpinfo page, 's thrilling, i won't hold against if just keep reading instead. web piece this config comes handy elsewhere though, it's already provided a standalone snippet can merge any container. looks this:web: services: http: port: 80 to it instead, can change php-stack definition this:web php-stack: image: php:7-apache onbuild: | echo \"<?phpinfo();?>\" > /var/www/html/index.php declaring php-stack using web php-stack, 've created resulting container merging both definitions, you run r demo again you'll it looks exactly same. fact won't need rebuild the dockerfile nedoka creates behind scenes won't change.note: can this any number specs, will layered from left right. an example, built stack is defined :base x11 ssh base-ssh: build: base holds child containers ubuntu, alpine, arch, centos oracle, x11 is mount an environment variable x11 passthrough, ssh describes installation configuration an ssh daemon. individual specs are merged a spec called \"base-ssh\" - has \"build: \" because only ever to run children. we merge with another spec later that spec has image specified, don't a container called \"base-ssh\" build run.merging stacks way is very handy, bear mind 'll need have bit logic there you're merging different distros.adding database'll add database next, modify php-stack section below:web php-stack: image: php:7-apache onbuild: | echo \"<?phpinfo();?>\" > /var/www/html/index.php databases: - mysql/tutorialtry another r demo you'll the supporting containers are built, vault consul come for secrets storage, mysql come , a database user be created, all details necessary use will baked our demo container environment variables. you a at environment variables the php-stack container with x php-stack env | grep nedoka_db (x is shorthand nedoka exec) should something this:vagrant@nedoka:/opt/nedoka$ nedoka exec php-stack env | grep nedoka_dbnedoka_db_type_tutorial=mysqlnedoka_db_rootpass_tutorial=nzlizdhhzwzmn2i3yty1otninmy3mgnmnedoka_db_port_tutorial=3306nedoka_db_name_tutorial=php_stack_tutorialnedoka_db_username_tutorial=php_stack_tutorialnedoka_db_host_tutorial=mysqlnedoka_db_userpass_tutorial=n2y5mgeyyzllzgy2zgu1ogi5yzm2zduy names a little weird, that's nedoka is generating database names merging container's ancestry name the database name. don't need worry what databases are called though, 's provided an env var too (bolded).let's add phpmyadmin container a requirement . we keep seperate run manually r phpmyadmin-mysql - run both r phpmyadmin-mysql demo, we'll require in php-stack stack nedoka handle bringing up us it's offline we need .web php-stack: requires: - phpmyadmin-mysql image: php:7-apache onbuild: | echo \"<?phpinfo();?>\" > /var/www/html/index.php databases: - mysql/tutorialr demo again you'll it'll bring our phpmyadmin container. can hit http://phpmyadmin-mysql take look the database.looking the database will show various tables exist. were imported config/tutorial/php-stack/mysql/tutorial.sql - let's break down why looked there subdirectory subdirectoryconfig/ - root config foldertutorial/ - directory .yml file lives php-stack/ - name the containermysql/ - database typetutorial.sql - db dump named the same name our database happens automatically, if create file config/-project/testing/test.yml in , define container called mycontainer a postgres database called backend, nedoka automatically try import database dump config/-project/testing/mycontainer/pgsql/backend.sql you baseline (or container derived it)anyway, getting on track, 've been working a single container far, we called 'php-stack' a reason. this hypothetical scenario 're working something intend be compatible php5 php7, we're going build php-stack container into proper stack hosting php5 7 containers , we'll mount frontend code. thing do is destroy php-stack - won't using again, also don't care backing up we'll --nobackup (-nb) we to rid the database, we'll use --remove-databases (-rmdb) complete command is d php-stack -nb -rmdb (d is shorthand nedoka destroy)next, 'll remove line specifying image php-stack, instead add 2 children.web php-stack: requires: - phpmyadmin-mysql databases: - mysql/tutorial onbuild: | echo \"<?phpinfo();?>\" > /var/www/html/index.php children: php7: image: php:7-apache php5: image: php:5-apachefire off r php-stack, php7 php5 be built, 'll both their own databases db users. ahead visit sites, index.php show php version 're running. let's toss a mountpoint the frontend, change build script it installs pdo bits need wire all .web php-stack: requires: - phpmyadmin-mysql databases: - mysql/tutorial mountpoints: /data/tutorial: /var/www onbuild: | docker-php-ext-install pdo pdo_mysql children: php7: image: php:7-apache php5: image: php:5-apacheru again same and 'll we've got working frontends talking their own databases. spin off new stack called php-stack-pgsql hosts postgres equivalents, adding following the end the file:php-stack php-stack-pgsql: requires: - \"-\" - pgadmin databases: - \"-\" - pgsql/tutorial onbuild: | - _install libpq-dev docker build php-ext-install pdo pdo_pgsqlrun again it'll bring /create it needs make sites available the same urls. speaking urls, you type nedoka urls 'll a list defined endpoints running containers. did couple new things we created pgsql stack. 've merged stack another ( 'as') we've subtracted existing settings the requirements, databases, onbuild using single hyphen the start, followed a newline the string (onbuild) surrounded quotes the lists (requires/databases - quotes are because 's yml, if write - - 's treated a list a hyphen it, 's treated a list within list)note if 'd changed name php-stack, 'd had rename directory structure database dump lives - it's worth bearing in mind. renaming containers involves renaming backup directory, i don't really and fix somehow a later date.anyway, adding hyphen the start, followed a newline strings surrounded quotes lists, 's possible destroy inherited settings. can this dictionaries too by providing as empty. e.g. completely remote requirements, could written:php-stack-mysql php-stack-pgsql: requires: databases: - \"-\" ... well the minus symbol, can use plus - controls where info gets merged, e.g:alpine cat1: onrun: | echo \"sat \" >> /tmp/catsat children: cat3: onrun: | + echo \" mat\" >> /tmp/catsat children: alpine cat3: onrun: | echo \" cat\" >> /tmp/catsat + running cat3, onrun script create file the lines correct order, each inherited setting is being put where plus symbol is.'s for detour within detour though 'm afraid... note how container specs chosen. far we've been running containers, 's been single containers entire stacks, it's possible bring individual containers within stacks providing path. bring just php7 the php-stack-pgsql stack , type r php-stack-pgsql/php7, this bit's important: container is acted upon is first encountered scanning directory tree files within - no container that name is running instance you run r php7 have containers called \"foo/php7\" \"bar/php7\" defined that order within file, foo/php7 be used. nedoka is but 's a mind reader, if feed an ambiguous container name no context, 'll the one finds... however: given ambiguous name, nedoka always treat active containers the assumed contextgiven same example, if foo/php7 occurs when containers are indexed, bar/php7 is running, r php7 rebuild , rather replacing with foo/php7.'ve really scratched surface what's possible, sadly is where quickstart ends. more info, can read reference the docs/ directory, look the builtin containers config/ see i've approached creation the builtin containers. tutorials are being posted all backers patreon time allows. now, fun, make cool stuff!"
}