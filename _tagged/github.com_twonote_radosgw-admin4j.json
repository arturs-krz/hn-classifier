{
	"_id": "14210776",
	"site": "https://github.com/twonote/radosgw-admin4j",
	"title": " Radosgw-Admin4j â€“ A Ceph Object Storage Admin Client for Java",
	"author": "okwap",
	"date": "2017-06-13T13:33:04.220Z",
	"tags": {
		"categories": [
			"opensource",
			"ceph",
			"radosgw",
			"rgw",
			"s3",
			"openstack-swift",
			"aws-s3",
			"radosgwadmin4j"
		],
		"languages": [
			"java"
		]
	},
	"content": "readme.md radosgw-admin4j is ceph object storage admin client allows provisioning control a ceph object storage deployment. includes support user/subuser management, quota management, usage report, bucket/object management, etc.highlightfully support operations the least ceph version. easier to manage radosgw. avoid troubles working radosgw admin apis, especially docs are bit confusing inconsistent the code base.quality compatibility - continuous integration tests against least ceph version (jewel lts/kraken stable currently)contributor friendly - typical contribution process, wired policies, contributions are welcome!start using can obtain radosgw-admim4j maven central using following identifier:io.github.twonote.radosgw-admin4j:0.1.0configurationusing plain-old-javargwadmin rgw_admin = rgwadminbuilder() .accesskey(accesskey) .secretkey(secretkey) .endpoint(adminendpoint) .build();using spring frameworkadd class spring bean config:@configurationpublic class rgwadminbeanconfig { @value(\"${radosgw.adminaccesskey}\") private string accesskey; @value(\"${radosgw.adminsecretkey}\") private string secretkey; @value(\"${radosgw.adminendpoint}\") private string adminendpoint; @bean rgwadmin init() { return rgwadminbuilder() .accesskey(accesskey) .secretkey(secretkey) .endpoint(adminendpoint) .build(); }} your [project home]/src/main/resources/[...]/spring.yml contains ( example):radosgw: adminendpoint: ${radosgw.admin.endpoint:http://127.0.0.1:8080/admin} adminaccesskey: ${radosgw.admin.accesskey:qqq} adminsecretkey: ${radosgw.admin.secretkey:qqq} you get use rgwadmin (bean) your :@resourcergwadmin rgw_admin;usage exampleplease check available operations user management// list user the systemlist<user> users = rgw_admin.listuserinfo();// create userrgw_admin.createuser(userid);// user information show keysuser user = rgw_admin.getuserinfo(userid).();user.gets3credentials().stream().peek(system.::println);// create subusersubuser subuser = rgw_admin.createsubuser(userid, \"subuserid\", subuser.permission.full, credentialtype.swift);// suspend userrgw_admin.suspenduser(userid, true);// remove userrgw_admin.removeuser(userid);quota management// allow user owns more bucketsrgw_admin.modifyuser(userid, immutablemap.(\"max-buckets\", string.valueof(integer.max_value)));// set quota causes user have most thousand objects the maximal usage is 1 gibrgw_admin.setuserquota(userid, 1000, 1048576);bucket management// transfer bucket owner the user created the administratorbucketinfo bucketinfo = rgw_admin.getbucketinfo(bucketname).();rgw_admin.linkbucket(bucketname, bucketinfo.getid(), adminuserid);// remove bucketrgw_admin.removebucket(bucketname);usage report// retrieve show usage report a given userusageinfo userusage = rgw_admin.getuserusage(userid).();userusage.getsummary().stream().peek(system.::println);radosgw setup kick off, need ready use radosgw instance one radosgw account proper admin capabilities. follow guide below have radowgw setup you fire example code. do have radosgw setup currently could refer ceph official manual setup ceph cluster radosgw quickly. fact, is a piece cake you not familiar ceph. things be easier you docker your environment. setup setup instance an admin account powered the ceph demo image, follow instructions below:$ sudo docker run -d --net=host -v /etc/ceph/:/etc/ceph/ -e mon_ip=127.0.0.1 -e ceph_public_network=127.0.0.0/24 -e ceph_demo_uid=qqq -e ceph_demo_access_key=qqq -e ceph_demo_secret_key=qqq -e ceph_demo_bucket=qqq --name rgw ceph/demo@sha256:7734ac78571ee0530724181c5b2db2e5a7ca0ff0e246c10c223d3ca9665c74ba$ sleep 10$ sudo docker exec - rgw radosgw-admin --id admin caps add --caps=\"buckets=*;users=*;usage=*;metadata=*\" --uid=qqqcheck setup succeeded the following command:$ sudo docker ps | grep rgw(optionally) can enter running container take look, watch log, execute radosgw-admin management tool the following command:$ sudo docker exec - rgw /bin/bashonce above procedure is done, can run radosgw-admin4j tests without config the client side, since default config is meet case. run tests :$ git clone https://github.com/twonote/radosgw-admin4j.git$ cd radosgw-admin4j$ mvn test already a radosgw instance hand, you need admin account. you yet it, create account the following command:$ radosgw-admin user create --uid=qqq --display-name=\"qqq\" --access-key=qqq --secret-key=qqq$ radosgw-admin admin caps add --caps=\"buckets=*;users=*;usage=*;metadata=*\" --uid=qqqsecond, enter key pair (qqq,qqq) add radosgw endpoint the config filenote radosgw does enable usage log default. you need feature ( run test cases), sure you enable usage log ceph config file. example ceph.conf:...[client.radosgw.gateway]rgw enable usage log = truergw usage log tick interval = 1rgw usage log flush threshold = 1rgw usage max shards = 32rgw usage max user shards = 1...'s !contributing contributions are welcome. code style is google java style we google-java-format do code formatting. nothing else special.legalcopyright 2016 twonote & \"radosgw-admin4j\" contributors.licensed under apache license, version 2.0 ( \"license\"); may use file except compliance the license. may obtain copy the license http://www.apache.org/licenses/license-2.0unless required applicable law agreed in writing, softwaredistributed under license is distributed an \" is\" basis,without warranties conditions any kind, either express implied. the license the specific language governing permissions limitations under license."
}