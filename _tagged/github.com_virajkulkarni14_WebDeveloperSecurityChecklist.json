{
	"_id": "14359729",
	"site": "https://github.com/virajkulkarni14/WebDeveloperSecurityChecklist",
	"title": "Web Developer Security Checklist on GitHub",
	"author": "virajkulkarni",
	"date": "2017-06-13T13:57:47.031Z",
	"tags": {
		"categories": [
			"opensource",
			"information-security",
			"checklist",
			"web-development"
		],
		"languages": []
	},
	"content": "readme.md web developer security checklist checklist important security issues should consider creating web application.introduction checklist has been reproduced verbatim michael o' brien's blog post the same name.contentsdatabasedevelopmentauthenticationdenial service protectionweb trafficapisvalidationcloud configurationinfrastructureoperationtestfinally, a plan checklistdatabase encryption data identifying users sensitive data access tokens, email addresses billing details. your database supports low cost encryption rest ( aws aurora), enable to secure data disk. sure backups are stored encrypted well. minimal privilege the database access user account. dont the database root account. store distribute secrets using key store designed the purpose. dont hard code your applications. fully prevent sql injection only using sql prepared statements. example: using npm, dont npm-mysql, npm-mysql2 supports prepared statements.development ensure all components your software are scanned vulnerabilities every version pushed production. means o/s, libraries packages. should automated the ci-cd process. secure development systems equal vigilance what use production systems. build software secured, isolated development systems.authentication ensure passwords are hashed using appropriate crypto such bcrypt. never write own crypto correctly initialize crypto good random data. implement simple adequate password rules encourage users have long, random passwords. multi-factor authentication your logins all service providers.denial service protection sure dos attacks your apis wont cripple site. a minimum, rate limiters your slower api paths login token generation routines. consider captcha front-end apis protect -end services against dos. enforce sanity limits the size structure user submitted data requests. distributed denial service (ddos) mitigation via global caching proxy service cloudflare. can turned if suffer ddos attack otherwise function your dns lookup.web traffic tls the entire site, just login forms responses. never tls just login form. cookies must httponly secure be scoped path domain. csp without allowing unsafe-* backdoors. is pain configure, worthwhile. x-frame-option, x-xss-protection headers client responses. hsts responses force tls access. redirect http request https the server backup. csrf tokens all forms use new samesite cookie response header fixes csrf once for newer browsers.apis ensure no resources are enumerable your public apis. ensure users are fully authenticated authorized appropriately using apis.validation & encoding client-side input validation quick user feedback, never trust . validate every last bit user input following whitelist approach the server. never untrusted user input sql statements server-side contexts are being evaluated. always validate encode user input before displaying responses.cloud configuration ensure services minimum ports open. while security through obscurity is protection, using non-standard ports make a little bit harder attackers. host backend database services private vpcs are visible any public network. very careful configuring aws security groups peering vpcs can inadvertently services visible the public. isolate logical services separate vpcs peer vpcs provide inter-service communication. ensure services accept data a minimal set ip addresses. restrict outgoing ip port traffic minimize apts botification. always aws iam roles not root credentials. minimal access privilege all ops developer staff. regularly rotate passwords access keys according a schedule.infrastructure ensure can upgrades without downtime. ensure can quickly update software a fully automated manner. create infrastructure using tool such terraform, not via cloud console. infrastructure should defined code be able be recreated the push a button. zero tolerance any resource created the cloud handterraform then audit configuration. centralized logging all services. should never need ssh access retrieve logs. dont ssh services except one-off diagnosis. using ssh regularly, typically means have automated important task. dont keep port 22 open any aws service groups a permanent basis. instead consider allowing authorized ips ssh the box. create immutable hosts instead long-lived servers you patch upgrade. ( immutable infrastructure be more secure). an intrusion detection system sensedeep service minimize apts.operation power off unused services servers. most secure server is that is powered down.test audit design implementation. penetration testinghack yourself, also someone than pen testing well.finally, a plan a threat model describes you are defending against. should list prioritize possible threats actors. a practiced security incident plan. day, will need .contributingcontributions welcome! read contribution guidelines .similar listscheck or add similar security checklists here.license the extent possible under law, viraj kulkarni has waived copyright related neighboring rights this ."
}