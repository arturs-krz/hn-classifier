{
	"_id": "14156856",
	"site": "https://github.com/timofurrer/colorful",
	"title": " Terminal string styling done right, in Python",
	"author": "tuxtimo",
	"date": "2017-06-13T13:34:46.898Z",
	"tags": {
		"categories": [
			"opensource",
			"python",
			"python3",
			"terminal",
			"string",
			"colors",
			"linux",
			"windows",
			"macosx",
			"console",
			"ansi",
			"truecolor",
			"256-colors",
			"style",
			"nesting-styles"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.md colorfulterminal string styling done right, python here's teaseimport colorful# create colored string using clever method translationprint(colorful.bold_white('hello world'))# create colored string using `str.format()`print('{c.bold}{c.lightcoral_on_white}hello world{c.reset}'.format(c=colorful))# nest colorsprint(colorful.red('red {0} red'.format(colorful.white('white'))))print(colorful.red('red' + colorful.white(' white ', nested=true) + 'red'))# combine styles stringsprint(colorful.bold & colorful.red | 'hello world')# true colorscolorful.use_true_colors()# extend default color palettecolorful.update_palette({'mint': '#c5e8c8'})print(colorful.mint_on_snow('wow, is actually mint'))# choose predefined stylecolorful.use_style('solarized')# print official solarized colorsprint(colorful.yellow('yellow'), colorful.orange('orange'), colorful.red('red'), colorful.magenta('magenta'), colorful.violet('violet'), colorful.blue('blue'), colorful.cyan('cyan'), colorful.green('green'))# directly print colorscolorful.print('{c.bold_blue}hello world{c.reset}')# choose specific color mode one block colorful.with_8_ansi_colors() c: print(c.bold_green('colorful is awesome!'))# create choose own color palettemy_company_palette = { 'companyorange': '#f4b942', 'companybaige': '#e8dcc5'} colorful.with_palette(my_company_palette) c: print(c.companyorange_on_companybaige('thanks choosing product!'))# f-string ( python >= 3.6)print(f'{colorful.bold}hello world')key featuresexpressive consistent api (docs)support different color modes (8 ansi, 256 ansi, true colors) (docs)support predefined awesome styles (solarized, ...) (docs)support custom color palettes (docs)support nesting styles (docs)support different platforms (using colorama windows)context managers clean color mode, color palette style switch (docs)support len() colored strings (docs)support color names x11 rgb.txt (docs) dependenciesusagecolorful supports major python versions: 2.7, 3.2, 3.3, 3.4, 3.5 3.6. recommend use latest version released pypi:pip install colorfulnote: a windows system will install colorama a dependency ensure proper ansi support.colorful does require special setup order be used:import colorfulprint(colorful.italic_coral_on_beige('hello world'))print(colorful.italic & colorful.coral_on_beige | 'hello world')print('{c.italic_coral_on_beige}hello world{c.reset}'.format(c=colorful)) the style string section more information!color modes days terminals only support ancient 8 ansi colors often support to 16 million colors true color. if don't support true color might support 256 ansi color palette least.colorful supports following color modes: colors / disable (colorful.no_colors)8 colors -> 8 ansi colors (colorful.ansi_8_colors)256 colors -> 256 ansi color palette (8bit colorful.ansi_256_colors)16'777'215 colors -> true color (24bit, colorful.true_colors) default colorful tries auto detect best supported color mode your terminal. consult colorful.terminal more details.however, sometimes makes sense specify color mode should used.colorful provides multiple ways do :(1) specify color mode globally via python apicolorful.disable()colorful.use_8_ansi_colors()colorful.use_256_ansi_colors()colorful.use_true_colors() you change color mode during runtime takes affect immediately globally.(2) enforce color mode globally via environment variablecolorful_disable=1 python eggs.py # process not any coloringcolorful_force_8_colors=1 python eggs.py # process use 8 ansi colors defaultcolorful_force_256_colors=1 python eggs.py # process use 256 ansi colors defaultcolorful_force_true_colors=1 python eggs.py # process use true colors default(3) specify color mode locally via python api (contextmanager) colorful.with_8_ansi_colors() c: print(c.italic_coral_on_beige('hello world')) colorful.with_256_ansi_colors() c: print(c.italic_coral_on_beige('hello world')) colorful.with_true_colors() c: print(c.italic_coral_on_beige('hello world'))color palettecolorful's python api is based color names in colorful.bold_white_on_black('hello'). during runtime color names are translated proper ansi escape code sequences supported the color mode use. however, color names are registered a color palette is basically mapping between color names it's corresponding rgb value. very much this:color_palette_example = { 'black': '#000000', 'white': '#ffffff',}note: depending the color mode is used rgb value be reduced fit the value domain the color mode. default color palette is x11 rgb.txt palette - 's shipped colorful, thus, don't to provide own. you wish have another rgb.txt file your default color palette can set colorful_default_color_palette environment variable this file:colorful_default_color_palette=/usr/share/x11/rgb.txt python spam.pycolorful supports update replace default color palette custom colors. colors to specified rgb hex channel values:# corporate identity colorsci_colors = { 'mint': '#c5e8c8', # rgb hex value 'darkred': '#c11b55', # rgb hex value 'lightblue': (15, 138, 191) # rgb channel triplet}# replace default palette my custom colorful.use_palette(ci_colors)# update default palette my custom colorful.update_palette(ci_colors)# can these colorsprint(colorful.italic_mint_on_darkred(' company'))stylescolorful supports famous color palettes using 's called styles colorful:colorful.use_style('solarized')# print official solarized colorsprint(colorful.yellow('yellow'), colorful.orange('orange'), colorful.red('red'), colorful.magenta('magenta'), colorful.violet('violet'), colorful.blue('blue'), colorful.cyan('cyan'), colorful.green('green')) following styles are already supported: solarized - website monokai note: you some awesome color palettes could a style colorful, please contribute !style stringcolorful provides multiple ways use style string. useful expressive is probably method syntax where specify modifiers colors the method name itself pass string argument this method. however, can all following methods achive similars things:(1) style string a method call colorful.[<modifiers...>]_[<fgcolor>]_[on_<bgcolor>](str, nested=false)print(colorful.red(' am red'))print(colorful.italic_yellow(' am italic yellow'))print(colorful.black_on_white(' am black white')) method syntax be of:colorful.<modifier>colorful.<modifier1>_<modifier2>colorful.<fg_color>colorful.on_<bg_color>colorful.<modifiers>_<fg_color>colorful.<modifiers>_<bg_color>colorful.<fg_colors>_on_<bg_color>colorful.<modifiers>_<fg_color>_on_<bg_color>note multiple <modifier>s be specified once.available modifiers are:reset (explicitely reset styles before passed argument)bolddimmed ( widely supported)italicunderlinedblinkslowblinkrapidinversed ( widely supported)concealed ( widely supported)struckthrough available colors depend the color palette are using. default x11 rgb.txt colors are available. type the return value such style method is colorful.colorfulstring. correctly supports str() methods including len(). you see the syntax the section name, colorful supports nesting styles. nesting styles.(2) style string & and |colorful implements __or__ __and__ protocol combine styles pipe strings them:print(colorful.bold & colorful.red | 'hello world')print(colorful.bold_red_on_black | 'hello world')print(colorful.bold | colorful.red_on_black('hello world')note: piping | has same effect doing method call the style. you do (colorful.bold & colorful.red)('hello world')(3) style string colorful.format(string, *args, **kwargs)print(colorful.format('{c.red} am {}{c.close_fg_color}', ='red'))# alternatively ``c.close_fg_color`` can reset every style ``c.reset``print(colorful.format('{c.red} am red{c.reset}'))print(colorful.format('{c.italic_yellow} am italic yellow{c.no_italic}{c.close_fg_color}'))print(colorful.format('{c.black_on_white} am black white{c.close_fg_color}{c.close_bg_color}'))colorful replace {c.<style>} the correspnding style. 's necessary pass colorful object c format() - colorful handle . every format argument ({<name>}) has be pass the colorful.format() call args kwarg.note: same syntax, modifiers colors the style {c.<style>} be used for (1) style string a method call.(4) style print string colorful.print(*strings, sep=' ', end='', file=sys.stdout, flush=false)colorful.print('{c.italic_yellow} am italic yellow{c.no_italic}{c.close_fg_color}')colorful.print('{c.red} am red{c.reset}', end='', file=open('log.txt', '+'))the colorful.print() method accepts same arguments the python 3.x built- print() function.note: python 2 have import print function: __future__ import print_function.(5) style string str.format()print('{c.red} am red{c.close_fg_color}'.format(c=colorful))# alternatively ``c.close_fg_color`` can reset every style ``c.reset``print('{c.red} am red{c.reset}'.format(c=colorful))print('{c.italic_yellow} am italic yellow{c.no_italic}{c.close_fg_color}'.format( c=colorful))print('{c.black_on_white} am black white{c.close_fg_color}{c.close_bg_color}'.format( c=colorful))note: same syntax, modifiers colors the style {c.<style>} be used for (1) style string a method call.nesting stylescolorful supports nest styles it's method call syntax setting parameter nested true. you are using str.format() in first example below don't need nested=true flag! following examples show behavior:print(colorful.red('red {0} red'.format(colorful.white('white'))))print(colorful.red('red' + colorful.white(' white ', nested=true) + 'red'))# using ``nested=true`` you don't actually nest# 's absolutely fine will as expected.print(colorful.red('red', nested=true) + ' default color')correctly support len() protocolcolorful correctly supports len() protocol (__len__) the styled strings. mentioned above, you style string colorful.colorfulstring object is returned. object returns length ( calling len()) it be the unstyled string integrate styled strings seemlessly your application.>>> s = 'hello world'>>> len(s)11>>> len(colorful.yellow(s))11>>> assert len(s) == len(colorful.yellow(s))temporarily change colorful settingscolorful provides hand full convenient context managers change colorful settings temporarily:(1) change color mode 8 ansi colors: colorful.with_8_ansi_colors() c: print(c.red(' am red')) 256 ansi colors: colorful.with_256_ansi_colors() c: print(c.red(' am red')) true colors: colorful.with_true_colors() c: print(c.red(' am red'))(2) change color palette# replace entire color palette colorful.with_palette(my_palette) c: print(c.customred(' am custom red'))# update color palette colorful.with_updated_palette(my_palette) c: print(c.customred(' am custom red'))(3) change style colorful.with_style('solarized') c: print(c.red(' am solarized red')) project is published under mit. timo furrer project.- -"
}