{
	"_id": "14400700",
	"site": "https://github.com/danielquinn/django-encrypted-filefield",
	"title": "Django-encrypted-filefield â€“ Encrypt uploaded file, stream it back unencrypted",
	"author": "kraymer",
	"date": "2017-06-13T13:56:40.922Z",
	"tags": {
		"categories": [
			"opensource",
			"django",
			"encryption"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.rst django-encrypted-filefieldencrypt uploaded files, store wherever like stream backunencrypted.why exists's increasingly common use products s3 host static files, sometimes those static files aren't exactly meant public eyes. mightpush bit personal information s3 then anyone the url be able see .sure, url may really hard guess, i'm a fan \"securitythrough obscurity\" i wrote to encrypt stuff push s3. , onlyencrypted blobs are available publicly, internally, behind mypermissionrequiredmixin, images documents are loaded magically transparently.'s work?encryptedfilefield is thin wrapper around django's native filefield transparently encrypts whatever user has uploaded passes off now encrypted data whatever storage engine 've specified. alsooverrides .url value return reference your own view, does decryption you the back the user. where may once had :# my_app/models.pyclass mymodel(models.model): name = models.charfield(max_length=128) attachment = models.filefield(upload_to=\"attachments\") image = models.imagefield( upload_to=\"images\", width_field=\"image_width\", height_field=\"image_height\" ) image_width = models.positiveintegerfield() image_height = models.positiveintegerfield() you to is change file fields you've got encrypted files# my_app/models.py django_encrypted_filefield.fields import ( encryptedfilefield, encryptedimagefield)class mymodel(models.model): name = models.charfield(max_length=128) attachment = encryptedfilefield(upload_to=\"attachments\") image = encryptedimagefield( upload_to=\"images\", width_field=\"image_width\", height_field=\"image_height\" ) image_width = models.positiveintegerfield() image_height = models.positiveintegerfield()# my_app/views.py django.contrib.auth.mixins import authmixin django_encrypted_filefield.views import fetchviewclass mypermissionrequiredmixin(authmixin) \"\"\" own rules live here \"\"\" passclass myfetchview(mypermissionrequiredmixin, fetchview): pass# my_app/urls.py django_encrypted_filefield.constants import fetch_url_name myapp.views import myfetchviewurlpatterns = [ # ... url( r\"^-fetch-url/(?p<path>.+)\", # to , but path is required myfetchview.as_view(), # view, permissions name=fetch_url_name ), # ...] do configure ?configuration the package requires setting three values either environment (recommended) in settings.py. values are:deff_salt: salt value for generating synchronous encryptiondeff_password: password value the same thingdeff_fetch_url_name: named url intend use download files they're decrypted -the-fly.outside that, follow above you should good go. do run tests? this project depends the setting three environment variables, have set for tests. , the tests are expecting values, don't change :$ deff_salt=\"salt\" deff_password=\"password\" deff_fetch_url_name=\"fetch\" ./manage.py testis a demo? is! check the code run mini django app the demodirectory:$ git clone git@github.com:danielquinn/django-encrypted-filefield.git$ cd django-encrypted-filefield/demo$ export deff_salt=\"salt\"$ export deff_password=\"password\"$ export deff_fetch_url_name=\"fetch\"$ ./manage migrate$ ./manage.py runserver... open http://localhost:8000 submit files via form. thiscase 're using django's default_storage, the same logic should apply all storage engines.stuff doesn't since file changes before 's saved, can't apply validator acts the contents the file. example, you've got validator uses mime-magic determine file type, will always returntext/plain , unless 's you're checking , will break validation. make things more interesting, django appears applyvalidation field values every save, just the field haschanged, even the validator were work the run, whenever would update object the admin, validator barf this case.'s status the project?stable. 'm actively using in production environment and been some without issue. isn't guarantee it'll foreveryone every case course, it's enough me use word :-)"
}