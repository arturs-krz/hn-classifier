{
	"_id": "14511729",
	"site": "https://github.com/Canner/coren",
	"title": "Coren: React Pluggable Serverside Render",
	"author": "wwwy3y3",
	"date": "2017-06-13T14:09:56.909Z",
	"tags": {
		"categories": [
			"opensource",
			"react",
			"ssr",
			"server-side-rendering"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md corenreact pluggable serverside renderis serverside render big headache your single page app? you need head title, description, jsonld, og...perhaps fetch data db, render redux preloadedstate many things need be rendered html about use more flexible to solve ?what we let component define they need static method? if could fetch database component?coren provide pluggable, flexible to render htmltable contentfeaturesinstallationsimple exampleconceptsdefinelifecycle hookcollectorappserverside rendererapiappcollectorusagegetting started to create own collectorexamplefeaturespluggable: can customize own collector your own needaccess component props: componentdidconstruct method lifecycle hook can access component propspass variables component: collector pass anything want(db query, server api) define methodinstallation$ npm install coren --savesimple examplehere's simple example components using collectorhead'll insert component as <title> htmlreact@collector()export default class user extends component { // put `user ${props.userid}` title tag html static definehead(props) { return { title: `user ${props.userid}` } } render() { return <div> ... </div>; }} headcollector insert head multiroutesrenderer, headcollector insert head using appendtoheadclass headcollector { constructor() { .heads = []; } // ... componentdidconstruct(id, component, props) { .heads.push(component.definehead(props)); } getfirsthead() { return .heads[0] || {}; } // ... appendtohead($head) { const {title, description} = .getfirsthead(); $head.append(`<title>${title}</title>`); $head.append(`<meta name=\"description\" content=\"${description}\">`); }}serversideconst app = app({ path: path.resolve(__dirname, 'path//app')});// headcollector data `definehead()`app.registercollector(\"head\", headcollector());// ssrconst ssr = multiroutesrenderer({app});ssr.rendertostring().(result => { console.log(result); // [{route: \"/\", html: \"<html><head>user 1</head>...</html>\"}]}).catch(err => console.log(err));redux preloaded state coren render __preloaded_state__react@collector()export default class product extends component { // fetch data // then, during serverside render, put `window.__preloaded_state__=${state}` html static definepreloadedstate({db}) { return db.fetch('products').exec() .(data => ({products: data})); } render() { return <div> ... </div>; }}collector reduxcollector, push promise got definepreloadedstate, we wait promises done appwillrenderlast, wrap app react-redux provider, get state store.getstate(), append state headclass reduxcollector { // ... componentdidimport(id, component) { const promise = component.definepreloadedstate(.componentprops); .queries.push(promise); } appwillrender() { return promise.map(.queries, state => object.assign(.initialstate, state)); } wrapelement(appelement) { const store = createstore(.reducers, .initialstate); const wrapedelements = react.createelement(provider, {store}, appelement); .state = store.getstate(); return wrapedelements; } appendtohead($head) { $head.append(`<script> window.__preloaded_state__ = ${json.stringify(.state)} </script>`); }}serversideconst app = app({ path: path.resolve(__dirname, 'path//app')});// reduxcollector initialstate `definepreloadedstate()`app.registercollector(\"redux\", reduxcollector({ // componentprops be passed componentprops: { db }, // reducer your app reducers: reducer}));// ssrconst ssr = multiroutesrenderer({app});ssr.rendertostring().(result => { console.log(result); // [{route: \"/\", html: \"<html><body>window.__preloaded_state__={...}</body>></html>\"}]}).catch(err => console.log(err));conceptsdefinecoren render html base data gotten component., where component write they provide serverside render?component should @collector decorator outside, use static method, prefixed define. this case, @collector return data to server during right lifecycle.lifecycle hook metioned lifecycle above. does work?let take look collector decoratorexport default function() { return wrappedcomponent => { const uniqid = shortid.generate(); /* trigger componentdidimport lifecycle here notify collectors */ hook.componentdidimport(uniqid, wrappedcomponent); class hoc extends react.component { constructor(props) { super(props); /* trigger componentdidconstruct lifecycle here pass props collectors */ hook.componentdidconstruct(uniqid, wrappedcomponent, props); } render() { return <wrappedcomponent {....props} />; } } return hoiststatic(hoc, wrappedcomponent); };}during serverside render, lifecycle be triggeredcomponentdidimport(id, component): called component importedcomponentdidconstruct(id, component, props): called component constructedwhy two methods? react-router, component matched route be rendered. , component rendered trigger both methods, the hand, component rendered trigger componentdidimport. will help put right data your html. example, should put head tags return first constructed component. components didn't trigger componentdidconstruct should be considered.collector is collector?collector collect data define methods, collector choose lifecycle want call define method. example, take look headcollector, headcollector call definehead(props) componentdidconstruct, get {title, description}, push heads array. serverside renderer call appendtohead, headcollector push first head got component $headclass headcollector { constructor() { .heads = []; } // ... componentdidconstruct(id, component, props) { .heads.push(component.definehead(props)); } getfirsthead() { return .heads[0] || {}; } // ... appendtohead($head) { const {title, description} = .getfirsthead(); $head.append(`<title>${title}</title>`); $head.append(`<meta name=\"description\" content=\"${description}\">`); }}appapp represent react application. developer app register collector// create app path your react app entry fileconst app = app({ path: path.resolve(__dirname, 'path//app')});// register collectorapp.registercollector(\"head\", headcollector());app controlls lifecycle all registered collectors.serverside renderer call app's lifecycle method certain , to the desired result want.serverside renderer main purpose serverside renderer is create html. calling app controll lifecycle collectors, sure collectors the result want.collector lifecycle multiroutesrenderer, every collector go through same phases:componentdidimport(id, component): component importedappwillrender: some async here you to some api call before renderroutewillrender: rendering multiple routes, appwillrender be called every the route match your component trigger render, is every method belowwrapelement: can wrap app reactelement you need provider outside(app rendertostring) => ssrrenderer call reactdom.rendertostringcomponentdidconstruct(id, component, props): called component was constructedappendtohead($cheerio('head')): append html headappendtobody($cheerio('body')): append html bodyapiappconstructor({path: string})path: path your react app entry fileconst app = app({ path: path.resolve(__dirname, 'path//app')});registercollector(key: string, collector: collector)key: can directly access collector keyapp.getcollector(\"head\")// return headcollectorcollector: collector want registerapp.registercollector(\"head\", headcollector());collectorifenter(component): booleanapp use ifenter determine whether call collector notcomponentdidimport(id, component): voidcalled component imported, component imported, unique id attached it, you'll where component appeared before not componentdidconstruct.componentdidconstruct(id: string, component: reactcomponent, props: object): voidcalled component was constructedappwillrender(): promise we react wont wait your async code during import. a better to async related task is push promise an array, wait them appwillrender. reduxcollector example:// /src/reduxcollectorcomponentdidimport(id, component) { const promise = component.definepreloadedstate(.componentprops); .queries.push(promise);}appwillrender() { return promise.map(.queries, state => object.assign(.initialstate, state));}routewillrender(): void multiroutesrenderer, 'll multiple routes be rendered, you need hook tell collector a route is going be rendered. can some reset variable things here. headcollector example, make sure collect fresh head component constructed.componentdidconstruct(id, component, props) { .heads.push(component.definehead(props));}routewillrender() { // empty heads .heads = [];}wrapelement(reactelement): reactelement module require developer wrap reactelement provider serverside render. reduxcollector example, wrap reactelement react-redux provider.wrapelement(appelement) { const store = createstore(.reducers, .initialstate); const wrapedelements = react.createelement(provider, {store}, appelement); .state = store.getstate(); return wrapedelements;}appendtohead($head: cheerio)append html headappendtobody($body: cheerio)append html bodyusagegetting startednpm install coren --save @collector your componentimport collector 'coren/lib/client/collectorhoc';@collector()export default class userlist extends component { // ... render() { ... }}write define method.@collector()export default class userlist extends component { static definehead() { return { title: \"user list\", description: \"user list\" }; } static defineroutes({url}) { return url('/users'); } static definepreloadedstate({db}) { return db.users.find().execasync() .(list => ({ users: { list, fetched: true, isfetching: false, error: false } })); }}serverside renderserverside render app multiroutesrendererconst db = mongodb;const app = app({ path: path.resolve(__dirname, 'path//app')});// register collectorsapp.registercollector(\"head\", headcollector());app.registercollector(\"routes\", routescollector({ componentprops: { db }}));app.registercollector(\"redux\", immutablereduxcollector({ componentprops: { db }, reducers: reducer}));// ssrconst ssr = multiroutesrenderer({ app, // bundle path be append html body js: [\"/bundle.js\"]});// the array html resultssr.rendertostring().(results => { return promise.(results.map(result => { // throw html anywhere want // cached web server, cache server // write s3, cdn }));}).catch(err => console.log(err)); to create own collectorwrite own class, implement methods collector. a at built- collector reference.https://github.com/canner/coren/tree/master/server/collectorsexamplehere's example repo using module.https://github.com/canner/coren-examplemeduim coren: react composite server-side render"
}