{
	"_id": "14362177",
	"site": "https://github.com/pshrmn/curi",
	"title": " Curi â€“ A single-page app router that lets you render however you like",
	"author": "psherman",
	"date": "2017-06-13T13:07:42.223Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md curi curi lets create simple, configurable routing object render single-page application. curi uses addons middleware customize you render application.curi is react specific, it does with number react packages you use integrate curi a react application. can read more the design goals curi here.learn getting started? please check these curi tutorials. alternatively, is general introduction curi you read medium. a reference some the terms used curi, please the glossaryexamples can test curi with small demos:codesandboxcodepen are a number examples you learn . many these provide links codesandbox demos that can test in browser.packages:curiaddonspathname (built-)curi-addon-prefetchcuri-addon-activemiddlewarecuri-middleware-queryreactcuri-reactcuri-react-navigatorcuri-react-linkcuri-react-blockcuri-react-redirectcuri-react-curiouscuri-react-activecuripackage + source + documentation curi package provides core routing functionality the application. is used create configuration object using history object a routes array.const history = createbrowserhistory();const routes = [ { name: 'home', path: '', body: () => home, }, { name: '', path: '', preload: () => { return import('./components/') .then(module => { store.register('', module.default); }); } body: () => store.('about') }];addonspathnamesource + documentation pathname addon is always used, you not need install separately.curi-addon-prefetchpackage + source + documentation prefetch addon allows to call route's load function outside navigation. you this, load function should a caching mechanism prevent duplicate data fetches the load function be called again during actual navigation.curi-addon-activepackage + source + documentation active addon allows to determine a route is \"active\" ( name/params match current response's name/params).. can useful giving element specific style it is \"active\".middlewarecuri-middleware-querypackage + source + documentation query middleware exports middleware factory. factory takes parse function returns middleware function will parse response.location.search store parsed object response.query.reactcuri isn't limited use react, it works with react. are \"official\" curi packages help creating curi/react application.curi-reactpackage + source + documentationcuri-react provides communication layer between curi configuration object your application. is intended be used react web applications. components it provides are actually re-exported other curi packages. are:<navigator> curi-react-navigator<link> curi-react-link<block> curi-react-block<redirect> curi-react-redirectimport { navigator } 'curi-react';reactdom.render(( <navigator config={config}> {(response, config) => ( response.body ? <response.body /> : null )} </navigator>), document.getelementbyid('root'));curi-react-navigatorpackage + source component receives curi configuration object a prop subscribes location changes.<navigator config={config}> {(response) => { return response.body ? <response.body /> : null; }}</navigator>curi-react-linkpackage + source component uses route names create html anchors navigation within application.<link ='home'>home</link>curi-react-blockpackage + source component will the user opportunity cancel navigation some conditions are met.curi-react-redirectpackage + source component will automatically cause navigation it is rendered.curi-react-curiouspackage + source higher-order component give nested components access the curi config object without having manually pass as prop. allows to easily access configuration object's history/addons.class mycomponent extends react.component { render() { return ( <div> installed addons: {object.keys(.props.curi.addons).join(', ')} </div> ); }}export default curious(mycomponent);curi-react-activepackage + source component modifies children element its name matches current response's name. component relies the curi-addon-active addon.// the response matches <active> component's props, // <div> have props modified the merge function.<active name='album' params={{ albumid: 7 }} merge={merge}> <div>...</div></active>"
}