{
	"_id": "14475769",
	"site": "https://github.com/darold/ora2pg",
	"title": "Ora2Pg Tool used to migrate an Oracle database to a PostgreSQL compatible schema",
	"author": "based2",
	"date": "2017-06-13T13:55:02.753Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"perl",
			"shell"
		]
	},
	"content": "readme name ora2pg - oracle postgresql database schema converterdescription ora2pg is free tool used migrate oracle database a postgresql compatible schema. connects oracle database, scan automatically extracts structure data, then generates sql scripts you load your postgresql database. ora2pg be used reverse engineering oracle database huge enterprise database migration simply replicate oracle data a postgresql database. is really easy used doesn't need oracle database knowledge providing parameters needed connect the oracle database.features ora2pg consist a perl script (ora2pg) a perl module (ora2pg.pm), only thing have modify is configuration file ora2pg.conf setting dsn the oracle database optionally name a schema. once 's done just to set type export want: table constraints, view, mview, tablespace, sequence, indexes, trigger, grant, function, procedure, package, partition, type, insert copy, fdw, query, kettle, synonym. default ora2pg exports a file you load postgresql the psql client, you also import directly a postgresql database setting dsn the configuration file. all configuration options ora2pg.conf have full control what should exported how. features included: - export full database schema (tables, views, sequences, indexes), unique, primary, foreign key check constraints. - export grants/privileges users groups. - export range/list partitions andi sub partitions. - export table selection ( specifying table names). - export oracle schema a postgresql 8.4+ schema. - export predefined functions, triggers, procedures, packages package bodies. - export full data following where clause. - full support oracle blob object pg bytea. - export oracle views pg tables. - export oracle user defined types. - provide basic automatic conversion plsql code plpgsql. - works any plateform. - export oracle tables foreign data wrapper tables. - export materialized view. - show detailled report an oracle database content. - migration cost assessment an oracle database. - migration difficulty level assessment an oracle database. - migration cost assessment pl/sql code a file. - migration cost assessment oracle sql queries stored a file. - generate xml ktr files be used penthalo data integrator (kettle) - export oracle locator spatial geometries postgis. - export dblink oracle fdw. - export synonyms views. - export directory external table directory external_file extension. - full mysql export like oracle database. - dispatch list sql orders multiple postgresql connections - perform diff between oracle postgresql database test purpose. ora2pg its best automatically convert oracle database postgresql there's still manual works do. oracle specific pl/sql code generated functions, procedures, packages triggers has be reviewed match postgresql syntax. will find useful recommendations porting oracle pl/sql code postgresql pl/pgsql \"converting other databases postgresql\", section: oracle (http://wiki.postgresql.org/wiki/main_page). http://ora2pg.darold.net/report.html a html sample an oracle database migration report.installation perl modules always found cpan (http://search.cpan.org/). type full name the module (ex: dbd::oracle) the search input box, will brings the page download. releases ora2pg stay sf.net (https://sourceforge.net/projects/ora2pg/). under windows should install strawberry perl (http://strawberryperl.com/) the oses corresponding oracle clients. seems compiling dbd::oracle cpan windows be struggle there little documentation that (mostly outdated not working). installing free version activestate perl (http://www.activestate.com/activeperl) help they seems have already packaged dbd::oracle easy install. requirement need modern perl distribution (perl 5.10 more). connect a database proceed his migration need dbi perl module > 1.614. migrate oracle database need dbd::oracle perl modules be installed. migrate mysql database need dbd::mysql perl modules. modules are used connect the database they are mandatory you to migrate ddl input files. install dbd::oracle have working need have oracle client libraries installed the oracle_home environment variable must defined. you plan export mysql database need install perl module dbd::mysql require the mysql client libraries are installed. some perl distribution may need install time::hires perl module. optional default ora2pg dumps export flat files, load into postgresql database need postgresql client (psql). you don't it the host running ora2pg can always transfer files a host the psql client installed. you prefer load export ' the fly', perl module dbd::pg is required. ora2pg allow dump output a compressed gzip file, do you need compress::zlib perl module if prefer using bzip2 compression, program bzip2 must available your path. installing ora2pg any perl module ora2pg be installed the following commands: tar xjf ora2pg-x.x.tar.bz2 cd ora2pg-x.x/ perl makefile.pl && make install will install ora2pg.pm your site perl repository, ora2pg /usr/local/bin/ ora2pg.conf /etc/ora2pg/. windows(tm) oses may instead: perl makefile.pl dmake && dmake install will install scripts libraries your perl site installation directory the ora2pg.conf file well all documentation files c:\\ora2pg\\ packaging you to build binary package your preferred linux distribution a at packaging/ directory the source tarball. 's everything build rpm, slackware debian packages. readme file that directory. installing dbd::oracle ora2pg need perl module dbd::oracle connectivity an oracle database perl dbi. get dbd::oracle it cpan perl module repository. setting oracle_home ld_library_path environment variables root user, install dbd::oracle. proceed follow: export ld_library_path=/usr/lib/oracle/11.2/client64/lib export oracle_home=/usr/lib/oracle/11.2/client64/ perl -mcpan -e 'install dbd::oracle' you are running the time will ask many questions you keep defaults pressing enter key, you need give appropriate .e., mirror site cpan download modules. install through cpan manually the above don't works: #perl -mcpan -e shell cpan> dbd::oracle cpan> quit cd ~/.cpan/build/dbd-oracle* export ld_library_path=/usr/lib/oracle/11.2/client64/lib export oracle_home=/usr/lib/oracle/11.2/client64/ perl makefile.pl make install installing dbd::oracle require the three oracle packages: instant-client, sdk sqlplus are installed well the libaio1 library.configuration ora2pg configuration be simple choose oracle database export choose export type. can done the minute. reading documentation will be able : - select certain tables /or column export. - rename tables /or column during export. - select data export following where clause per table. - delay database constraints during data loading. - compress exported data save disk space. - much more. full control the oracle database migration is taken though single configuration file named ora2pg.conf. format this file consist a directive name upper case followed tab character a value. comments are lines beginning a #. 's specific order place configuration directives, are set the they are read the configuration file. configuration directives just a single value, can them multiple in configuration file only last occurrence found the file be used. configuration directives allow list value, can it multiple , the values be appended the list. you the import directive load custom configuration file, directives defined this file be stores the place import directive is found, it is better put at end the configuration file. values set command line options override values the configuration file. ora2pg usage default ora2pg look /etc/ora2pg/ora2pg.conf configuration file, the file exist can simply execute: /usr/local/bin/ora2pg under windows(tm) run ora2pg.bat file, located your perl bin directory. windows(tm) users may find template configuration file c:\\ora2pg you to call another configuration file, give path command line argument: /usr/local/bin/ora2pg -c /etc/ora2pg/new_ora2pg.conf here are command line parameters available using ora2pg: usage: ora2pg [-dhpqv --estimate_cost --dump_as_html] [--option value] - | --allow str : coma separated list objects allow export. be used show_column too. -b | --basedir dir: used set default output directory, where files resulting exports be stored. -c | --conf file : used set alternate configuration file the default /etc/ora2pg/ora2pg.conf. -d | --debug : enable verbose output. -d | --data_type str : allow custom type replacement command line. -e | --exclude str: coma separated list objects exclude export. be used show_column too. -h | --help : print short help. -g | --grant_object type : extract privilege the given object type. possible values grant_object configuration. - | --input file : file containing oracle pl/sql code convert no oracle database connection initiated. -j | --jobs num : number parallel process send data postgresql. -j | --copies num : number parallel connection extract data oracle. -l | --log file : used set log file. default is stdout. -l | --limit num : number tuples extracted oracle stored memory before writing, default: 10000. -m | --mysql : export mysql database instead an oracle schema. -n | --namespace schema : used set oracle schema extract . -n | --pg_schema schema : used set postgresql's search_path. -o | -- file : used set path the output file where sql be written. default: output.sql running directory. -p | --plsql : enable plsql plpsql code conversion. -p | --parallel num: number parallel tables extract the same . -q | --quiet : disable progress bar. -s | --source dsn : allow set oracle dbi datasource. -t | --type export: used set export type. will override one given the configuration file (type). -t | --temp_dir dir: it set distinct temporary directory two more ora2pg are run parallel. -u | --user name : used set oracle database connection user. ora2pg_user environment variable be used instead. -v | --version : show ora2pg version exit. -w | --password pwd : used set password the oracle database user. ora2pg_passwd environment variable be used instead. --forceowner: set 1 force ora2pg set tables sequences owner in oracle database. the value is set a username one be used the objects owner. default 's user used connect the pg database will the owner. --nls_lang code: this set oracle nls_lang client encoding. --client_encoding code: this set postgresql client encoding. --view_as_table str: coma separated list view export table. --estimate_cost : activate migration cost evalution show_report --cost_unit_value minutes: number minutes a cost evalution unit. default: 5 minutes, correspond a migration conducted a postgresql expert. set to 10 this is first migration. --dump_as_html : force ora2pg dump report html, used with show_report. default is dump report simple text. --dump_as_csv : above force ora2pg dump report csv. --dump_as_sheet : report migration assessment csv line per database. --init_project name: initialise typical ora2pg project tree. top directory be created under project base dir. --project_base dir : define base dir ora2pg project trees. default is current directory. --print_header : be used --dump_as_sheet print csv header especially the run ora2pg. --human_days_limit num : set number human-days limit where migration assessment level switch b c. default is set 5 human-days. --audit_user list : comma separated list username filter queries the dba_audit_trail table. used with show_report query export type. --pg_dsn dsn : set datasource postgresql direct import. --pg_user name : set postgresql user use. --pg_pwd password : set postgresql password use. --count_rows : force ora2pg perform real row count test action. full documentation http://ora2pg.darold.net/ more help see manpage 'man ora2pg'. ora2pg return 0 success, 1 error. will return 2 a child process been interrupted you've got warning message: \"warning: error occurs during data export. please check 's happen.\" of time is oom issue, might reduce data_limit value. developers, is possible add own custom option(s) the perl script ora2pg any configuration directive ora2pg.conf be passed lower case the ora2pg object instance. ora2pg code how add own option. note performance might improved updating stats oracle: begin dbms_stats.gather_schema_stats dbms_stats.gather_database_stats dbms_stats.gather_dictionary_stats end; generate migration template two options --project_base --init_project used indicate ora2pg he has create project template a tree, configuration file a script export objects the oracle database. here sample the command usage: ora2pg --project_base /app/migration/ --init_project test_project creating project test_project. /app/migration/test_project/ schema/ dblinks/ directories/ functions/ grants/ mviews/ packages/ partitions/ procedures/ sequences/ synonyms/ tables/ tablespaces/ triggers/ types/ views/ sources/ functions/ mviews/ packages/ partitions/ procedures/ triggers/ types/ views/ data/ config/ reports/ generating generic configuration file creating script export_schema.sh automate exports. creating script import_all.sh automate imports. create generic config file where just to define oracle database connection a shell script called export_schema.sh. sources/ directory contains oracle code, schema/ contains code ported postgresql. reports/ directory contains html reports the migration cost assessment. you to your own default config file, the -c option give path that file. rename with .dist suffix you ora2pg apply generic configuration values otherwise, configuration file be copied untouched. once have set connection the oracle database can execute script export_schema.sh will export object type your oracle database output ddl files the schema's subdirectories. end the export will you command export data later the import the schema be done verified. can choose load yourself ddl files generated use second script import_all.sh import those file interactively. this kind migration is something current you really recommend to those scripts. oracle database connection 's 5 configuration directives control access the oracle database. oracle_home used set oracle_home environment variable the oracle libraries required the dbd::oracle perl module. oracle_dsn directive is used set data source name the form standard dbi dsn. example: dbi:oracle:host=oradb_host.myhost.com;sid=db_sid dbi:oracle:db_sid the second notation sid should declared the known file $oracle_home/network/admin/tnsnames.ora in path given the tns_admin environment variable. oracle_user et oracle_pwd two directives are used define user password the oracle database connection. note if can is better login oracle super admin avoid grants problem during database scan be sure nothing is missing. user_grants set directive 1 you connect oracle database simple user do have enough grants extract things the dba_... tables. will tables all_... instead. warning: you export type grant, must set configuration option 0 it not works. transaction directive may used you to change default isolation level the data export transaction. default is to set level a serializable transaction ensure data consistency. allowed values this directive are: readonly: 'set transaction read ', readwrite: 'set transaction read write', serializable: 'set transaction isolation level serializable' committed: 'set transaction isolation level read committed', releases before 6.2 used set isolation level read transaction in case was breaking data consistency now default is set serializable. input_file directive did control oracle database connection unless purely disable use any oracle database accepting file argument. set directive a file containing pl/sql oracle code function, procedure full package body prevent ora2pg connecting an oracle database just apply conversion tool the content the file. can used the of export types: table, trigger, procedure, view, function package, etc. ora_initial_command directive be used send initial command oracle, after connection. example unlock policy before reading objects. data encryption oracle server your oracle client config file already includes encryption method, dbd:oracle uses those settings encrypt connection while extract data. example you configured oracle client config file (sqlnet. or .sqlnet) the following information: # configure encryption connections oracle sqlnet.encryption_client = required sqlnet.encryption_types_client = (aes256, rc4_256) sqlnet.crypto_seed = 'should 10-70 random characters' tool uses oracle client talk the database be encrypted you setup session encryption above. example, perl's dbi uses dbd-oracle, uses oracle client actually handling database communication. the installation oracle client used perl is setup request encrypted connections, your perl connection an oracle database also encrypted. full details https://kb.berkeley.edu/jivekb/entry.jspa?externalid=1005 testing connection once have set oracle database dsn can execute ora2pg see it works: ora2pg -t show_version -c config/ora2pg.conf show oracle database server version. some here test installation most the problem place here, other configuration steps are more technical. trouble shooting the output.sql file has exported anything else the pg transaction header footer 's possible reasons. perl script ora2pg dump ora-xxx error, mean you dsn login information are wrong, check error your settings try again. perl script says nothing the output file is empty: user has enough right extract something the database. try connect oracle super user take look directive user_grants above at next section, especially schema directive. logfile default message are sent the standard output. you a file path that directive, output be appended this file. oracle schema export oracle database export be limited a specific schema namespace, can mandatory following database connection user. schema directive is used set schema name use during export. example: schema apps extract objects associated the apps schema. no schema name is provided export_schema is enabled, ora2pg export objects all schema the oracle instance their names prefixed the scham name. export_schema default oracle schema is exported the postgresql database all objects are created under default pg namespace. you to export schema create objects under namespace, set export_schema directive 1. will set schema search_path top export sql file the schema name set the schema directive the default pg_catalog schema. you to change path, the directive pg_schema. create_schema enable/disable create schema sql order starting the output file. is enable default concern table export type. compile_schema default ora2pg only export valid pl/sql code. can force oracle compile again invalidated code get chance have obtain valid status then able export . enable directive force oracle compile schema before exporting code. this directive is enabled schema is set a specific schema name, invalid objects this schema be recompiled. schema is set all schema be recompiled. force recompile invalid object a specific schema, set compile_schema the schema name want recompile. will ask oracle validate pl/sql could been invalidate a export/import example. 'valid' 'invalid' status applies functions, procedures, packages user defined types. export_invalid the above configuration directive is enough validate pl/sql code enable configuration directive allow export all pl/sql code if is marked invalid. 'valid' 'invalid' status applies functions, procedures, packages user defined types. pg_schema allow to defined/force postgresql schema use. default you set export_schema 1 postgresql search_path be set the schema name exported set value the schema directive. value be comma delimited list schema name not using table export type in case will generate create schema statement it doesn't support multiple schema name. example, you set pg_schema something \"user_schema, public\", search path be set this: set search_path = user_schema, public; forcing use an schema (here user_schema) the from oracle schema set the schema directive. can set default search_path the postgresql user are using connect the destination database using: alter role username set search_path user_schema, public; this case don't to set pg_schema. sysusers without explicit schema, ora2pg export objects not belongs system schema role: ctxsys,dbsnmp,exfsys,lbacsys,mdsys,mgmt_view,olapsys,orddata,owbsys, ordplugins,ordsys,outln,si_informtn_schema,sys,sysman,system,wk_test, wksys,wkproxy,wmsys,xdb,apex_public_user,dip,flows_020100,flows_030000, flows_040100,flows_files,mddata,oracle_ocm,spatial_csw_admin_usr, spatial_wfs_admin_usr,xs$null,perfstat,sqltxplain,dmsys,tsmsys,wksys, apex_040200,dvsys,ojvmsys,gsmadmin_internal,appqossys,mgmt_view, odm,odm_mtr,tracesrv,mtmsys,owbsys_audit,websys,wk_proxy, ose$http$admin,aurora$jis$utility$,aurora$orb$unauthenticated, dbms_privilege_capture following oracle installation may several system role defined. append users the schema exclusion list, set sysusers configuration directive a comma-separated list system user exclude. example: sysusers internal,sysdba,bi,hr,ix,oe,pm,sh add users internal sysdba the schema exclusion list. force_owner default owner the database objects is one 're using connect postgresql using psql command. you an user (postgres exemple) can force ora2pg set object owner be one used the oracle database setting directive 1, to completely different username setting directive value that username. use_tablespace enabled directive force ora2pg export tables, indexes constraint indexes using tablespace name defined oracle database. works with tablespace are temp, users system. with_oid activating directive force ora2pg add (oids) creating tables views tables. default is same postgresql, disabled. look_forward_function list schema get functions/procedures meta information are used the current schema export. replacing call function out parameters, a function is declared an package the function call rewriting not done ora2pg know functions declared the current schema. setting comma separated list schema value this directive, ora2pg look forward these packages all functions/procedures/packages declaration before proceeding current schema export. export type export action is perform following single configuration directive 'type', other add more control what should really exported. type here are different values the type directive, default is table: - table: extract tables indexes, primary keys, unique keys, foreign keys check constraints. - view: extract views. - grant: extract roles converted pg groups, users grants all objects. - sequence: extract sequence their last position. - tablespace: extract storage spaces tables indexes (pg >= v8). - trigger: extract triggers defined following actions. - function: extract functions. - procedure: extract procedures. - package: extract packages package bodies. - insert: extract data insert statement. - copy: extract data copy statement. - partition: extract range list oracle partitions subpartitions. - type: extract user defined oracle type. - fdw: export oracle tables foreign table oracle_fdw. - mview: export materialized view. - query: try automatically convert oracle sql queries. - kettle: generate xml ktr template files be used kettle. - dblink: generate oracle foreign data wrapper server use dblink. - synonym: export oracle's synonyms views other schema's objects. - directory: export oracle's directories external_file extension objects. - load: dispatch list queries multiple postgresql connections. - test: perform diff between oracle postgresql database. one type export be perform the same so type directive must unique. you more one the last found the file be registered. export type not should be load directly the postgresql database still require little manual editing. is case grant, tablespace, trigger, function, procedure, type, query package export types especially you plsql code oracle specific sql it. tablespace must ensure file path exist the system for synonym may ensure the object's owners schemas correspond the postgresql database design. note you chained multiple export giving the type directive comma-separated list export type. ora2pg convert oracle partition using table inheritance, trigger functions. document pg site: http://www.postgresql.org/docs/current/interactive/ddl-partitioning. html type export allow export user defined oracle type. you don't the --plsql command line parameter simply dump oracle user type asis else ora2pg try convert to postgresql syntax. kettle export type requires the oracle postgresql dns are defined. since ora2pg v8.1 's three export types: show_version : display oracle version show_schema : display list schema available the database. show_table : display list tables available. show_column : display list tables columns available the ora2pg conversion type oracle postgresql will applied. will warn if 's postgresql reserved words oracle object names. here is example the show_column output: [2] table current_schema (1 rows) (warning: 'current_schema' is reserved word postgresql) constraint : number(22) => bigint (warning: 'constraint' is reserved word postgresql) freeze : varchar2(25) => varchar(25) (warning: 'freeze' is reserved word postgresql) ... [6] table locations (23 rows) location_id : number(4) => smallint street_address : varchar2(40) => varchar(40) postal_code : varchar2(12) => varchar(12) city : varchar2(30) => varchar(30) state_province : varchar2(25) => varchar(25) country_id : char(2) => char(2) those extraction keyword are to display requested information exit. allow to quickly on you are going work. show_column allow other ora2pg command line option: '--allow relname' '-a relname' limit displayed information the given table. show_encoding export type display nls_lang client_encoding values ora2pg used the real encoding the oracle database the corresponding client encoding could used postgresql since release v8.12, ora2pg allow to export oracle table definition be with oracle_fdw foreign data wrapper. using type fdw oracle tables be exported follow: create foreign table oratab ( id integer null, text character varying(30), floating double precision null ) server oradb options (table 'oratab'); you use table a regular postgresql table. http://pgxn.org/dist/oracle_fdw/ more information this foreign data wrapper. release 10 adds new export type destined evaluate content the database migrate, terms objects cost end migration: show_report : show detailled report the oracle database content. here is sample report: http://ora2pg.darold.net/report.html also more advanced report migration cost. the dedicated chapter migration cost evaluation. estimate_cost activate migration cost evaluation. must be used show_report, function, procedure, package query export type. default is disabled. may to the --estimate_cost command line option instead activate functionality. note enabling directive force plsql_pgsql activation. cost_unit_value set value minutes the migration cost evaluation unit. default is five minutes per unit. --cost_unit_value change unit value command line. dump_as_html default using show_report migration report is generated simple text, enabling directive force ora2pg create report html format. http://ora2pg.darold.net/report.html a sample report. human_days_limit this directive redefined number human-days limit where migration assessment level must switch b c. default is set 10 human-days. jobs configuration directive adds multiprocess support copy, function procedure export type, value is number process use. default is multiprocess disable. directive is used set number cores used parallelize data import postgresql. during function procedure export type each function be translated plpgsql using new process, performances gain be very important you tons function convert. 's more limitation parallel processing the number cores the postgresql /o performance capabilities. doesn't works under windows operating system, is simply disabled. oracle_copies configuration directive adds multiprocess support extract data oracle. value is number process use parallelize select query. default is parallel query disable. parallelism is built splitting query following the number cores given value oracle_copies follow: select * mytable where abs(mod(column, oracle_copies)) = cur_proc where column is technical key a primary unique key where split be based the current core used the query (cur_proc). doesn't works under windows operating system, is simply disabled. defined_pk directive is used defined technical key used split query between number cores set the oracle_copies variable. example: defined_pk employees:employee_id parallel query will used supposing -j oracle_copies is set 8: select * employees where abs(mod(employee_id, 8)) = n where n is current process forked starting 0. parallel_tables directive is used defined number tables will processed parallel data extraction. limit is number cores your machine. ora2pg open database connection each parallel table extraction. directive, upper 1, invalidate oracle_copies not jobs, the real number process will used is parallel_tables * jobs. note this directive set upper 1 also automatically enable file_per_table directive your are exporting files. fdw_server directive is used set name the foreign data server is used the \"create server name foreign data wrapper oracle_fdw ...\" command. name then used the \"create foreign table ...\" sql command. default is arbitrary set orcl. only concern export type fdw. external_to_fdw directive, enabled default, allow export oracle's external tables file_fdw foreign tables. not export tables all, set directive 0. internal_date_max internal timestamp retrieves custom type are extracted the following format: 01-jan-77 12.00.00.000000 am. is impossible know exact century must used, by default year below 49 be added 2000 others 1900. can this directive change default value 49. is relevant you user defined type a column timestamp. audit_user set comma separated list username must used filter queries the dba_audit_trail table. default is not scan table to never for queries. parameter is used with show_report query export type no input file queries. note queries be normalized before output unlike a file is given input using -i option input directive. limiting object export may to export a part an oracle database, here are set configuration directives will allow to control parts the database should exported. allow directive allow to set list objects witch export must limited, excluding other objects the same type export. value is space comma-separated list objects name export. can include valid regex the list. example: allow employees sale_.* countries .*_geom_seq export objects name employees, countries, objects beginning 'sale_' all objects a name ending '_geom_seq'. object depends the export type. note regex not works 8i database, must the % placeholder instead, ora2pg use like operator. is manner declare global filters will used the current export type. can use extended filters will applied specific objects only their related export type. example: ora2pg -p -c ora2pg.conf -t trigger - 'table[employees]' limit export trigger those defined table employees. you to extract triggers not instead triggers: ora2pg -c ora2pg.conf -t trigger -e 'view[trg_view_.*]' a more complex form: ora2pg -p -c ora2pg.conf -t table - 'table[employees]' \\ -e 'index[emp_.*];ckey[emp_salary_min]' command export definition the employee table will exclude index beginning 'emp_' the check constraint called 'emp_salary_min'. exporting partition can exclude partition tables using ora2pg -p -c ora2pg.conf -t partition -e 'partition[part_199.* part_198.*]' will exclude partitioned tables year 1980 1999 the export not main partition table. trigger also adapted exclude those table. grant export can this extended form exclude users the export limit export some others: ora2pg -p -c ora2pg.conf -t grant - 'user1 user2' ora2pg -p -c ora2pg.conf -t grant - 'grant[user1 user2]' limit export grants users user1 user2. if don't to export grants some functions these users, example: ora2pg -p -c ora2pg.conf -t grant - 'user1 user2' -e 'function[adm_.*];procedure[adm_.*]' advanced filters may need learning. oracle doesn't allow use lookahead expression you may to exclude object match allow regexp have defined. example you to export table starting e not those starting exp is possible do in single expression. is why can start regular expression the ! character exclude object matching regexp given after. previous example be written follow: allow e.* !exp.* will translated : regexp_like(..., '^e.*$') not regexp_like(..., '^exp.*$') the object search expression. exclude directive is opposite the previous, allow to define space comma-separated list object name exclude the export. can include valid regex the list. example: exclude employees tmp_.* countries exclude object name employees, countries all tables beginning 'tmp_'. example, can ban export unwanted function this directive: exclude write_to_.* send_mail_.* example exclude functions, procedures functions a package the name beginning those regex. note regex not works 8i database, must the % placeholder instead, ora2pg use not operator. above (directive 'allow') the extended syntax. view_as_table set view export table. default none. value must a list view name regexp separated space comma. the object name is view the export type is table, view be exported a create table statement. export type is copy insert, corresponding data be exported. chapter \"exporting views postgresql table\" more details. grant_object exporting grants can specify comma separated list objects which privilege be exported. default is export all objects. here are possibles values table, view, materialized view, sequence, procedure, function, package body, type, synonym, directory. one object type is allowed a . for example set to table you want export privilege tables. can the -g option overwrite . when used directive prevent export users unless is set user. this case users definitions are exported. where directive allow to specify where clause filter dumping contents tables. value is construct follow: table_name[where_clause], if have one where clause each table put where clause value. both are possible too. here are examples: # global where clause applying all tables included the export where 1=1 # apply where clause on table table_name where table_name[id1='001'] # applies different clause tables table_name other_table # a generic where clause date_create all tables where table_name[id1='001' id1='002] date_create > '2001-01-01' other_table[name='test'] where clause included a table name bracket clause be applied all exported table including tables defined the where clause. where clauses are very useful you to archive data at opposite export recent data. be able quickly test data import is useful limit data export the thousand tuples each table. oracle define following clause: where rownum < 1000 for mysql, the following: where 1=1 limit 1,1000 can be restricted some tables data export. top_max directive is used limit number item shown the top n lists the top list tables per number rows the top list largest tables megabytes. default is set 10 items. log_on_error enable directive you to continue direct data import error. ora2pg received error the copy insert statement postgresql will log statement a file called tablename_error.log the output directory continue next bulk data. this can try fix statement manually reload error log file. default is disabled: abort import error. replace_query sometime may to extract data an oracle table you need a custom query that. just \"select * table\" ora2pg but more complex query. directive allow to overwrite query used ora2pg extract data. format is tablename[sql_query]. you multiple table extract replacing ora2pg query, can define multiple replace_query lines. replace_query employees[select e.id,e.fisrtname,lastname employees e join emp_updt u (e.id=u.id u.cdate>'2014-08-01 00:00:00')] controm full text search export several directives be used control way ora2pg export oracle's text search indexes. default context indexes be exported postgresql fts indexes ctxcat indexes wikk exported indexes using pg_trgm extension. context_as_trgm force ora2pg translate oracle text indexes postgresql indexes using pg_trgm extension. default is translate context indexes fts indexes ctxcat indexes using pg_trgm. of time using pg_trgm is enough, is why directive stand . you need create pg_trgm extension the destination database before importing objects: create extension pg_trgm; fts_index_only default ora2pg creates function-based index translate oracle text indexes. create index t_document using gin(to_tsvector('pg_catalog.french', title)); will to rewrite contain() clause using to_tsvector(), example: select id,title t_document where to_tsvector(title)) @@ to_tsquery('search_word'); force ora2pg create extra tsvector column a dedicated triggers fts indexes, disable directive. this case, ora2pg add column follow: alter table t_document add column tsv_title tsvector; update column compute fts vectors data been loaded before update t_document set tsv_title = to_tsvector('pg_catalog.french', coalesce(title,'')); automatically update column a modification the title column appears, ora2pg adds following trigger: create function tsv_t_document_title() returns trigger $$ begin tg_op = 'insert' new.title != old.title new.tsv_title := to_tsvector('pg_catalog.french', coalesce(.title,'')); end ; return ; end $$ language plpgsql; create trigger trig_tsv_t_document_title before insert update t_document each row execute procedure tsv_t_document_title(); the oracle text index is defined multiple column, ora2pg use setweight() set weight the order the column declaration. fts_config this directive force text search configuration use. it is set, ora2pg autodetect stemmer used oracle each index pg_catalog.english the information is found. use_unaccent you to perform text search an accent insensitive , enable directive. ora2pg create helper function unaccent() creates pg_trgm indexes using function. fts ora2pg redefine text search configuration, example: create text search configuration fr (copy = french); alter text search configuration fr alter mapping hword, hword_part, word unaccent, french_stem; set fts_config ora2pg.conf directive fr instead pg_catalog.english. enabled, ora2pg create wrapper function: create replace function unaccent_immutable(text) returns text $$ select public.unaccent('public.unaccent', $1); $$ language sql immutable cost 1; indexes are exported follow: create index t_document_title_unaccent_trgm_idx t_document using gin (unaccent_immutable(title) gin_trgm_ops); your queries will need use same function the search be able use function-based index. example: select * t_document where unaccent_immutable(title) '%donnees%'; use_lower_unaccent same above call lower() the unaccent_immutable() function: create replace function unaccent_immutable(text) returns text $$ select lower(public.unaccent('public.unaccent', $1)); $$ language sql immutable; modifying object structure of great usage ora2pg is flexibility replicate oracle database postgresql database a different structure schema. 's three configuration directives allow to map those differences. reordering_columns enable directive reordering columns minimized footprint disc, that more rows fit a data page, is most important factor speed. default is disabled, mean same order in oracle tables definition, 's should enough most usage. directive is used table export. modify_struct directive allow to limit columns extract a given table. value consist a space-separated list table name a set column between parenthesis follow: modify_struct nom_table(nomcol1,nomcol2,...) ... example: modify_struct t_test1(id,dossier) t_test2(id,fichier) will extract columns 'id' 'dossier' table t_test1 columns 'id' 'fichier' the t_test2 table. directive is used copy insert export. replace_tables directive allow to remap list oracle table name a postgresql table name during export. value is list space-separated values the following structure: replace_tables orig_tbname1:dest_tbname1 orig_tbname2:dest_tbname2 oracle tables orig_tbname1 orig_tbname2 be respectively renamed dest_tbname1 dest_tbname2 replace_cols table name, name the column be remapped a different name using following syntax: replace_cols orig_tbname(orig_colname1:new_colname1,orig_colname2:new_colname2) example: replace_cols t_test(dico:dictionary,dossier:folder) rename oracle columns 'dico' 'dossier' table t_test new name 'dictionary' 'folder'. replace_as_boolean you to change type some oracle columns postgresql boolean during export can define here list tables column separated space follow. replace_as_boolean tb_name1:col_name1 tb_name1:col_name2 tb_name2:col_name2 values set the boolean columns list be replaced the 't' 'f' following default replacement values those additionally set directive boolean_values. can give type a precision automatically convert fields that type a boolean. example: replace_as_boolean number:1 char:1 tb_name1:col_name1 tb_name1:col_name2 also replace field type number(1) char(1) a boolean all exported tables. boolean_values this add additional definition the possible boolean values used oracle fields. must set space-separated list true:false values. default here are values recognized ora2pg: boolean_values yes: y:n 1:0 true:false enabled:disabled values defined here be added the default list. replace_zero_date ora2pg find \"zero\" date: 0000-00-00 00:00:00 is replaced a null. could a problem your column is defined not null constraint. you not remove constraint, this directive set arbitral date will used instead. can use -infinity you don't to a fake date. indexes_suffix add given value suffix indexes names. useful you indexes same name tables. example: indexes_suffix _idx add _idx ed all index name. so common can help. indexes_renaming enable directive rename indexes using tablename_columns_names. be very useful database have multiple the same index name that the same name a table, is allowed postgresql disabled default. use_index_opclass operator classes text_pattern_ops, varchar_pattern_ops, bpchar_pattern_ops support b-tree indexes the corresponding types. difference the default operator classes is the values are compared strictly character character rather according the locale-specific collation rules. makes operator classes suitable use queries involving pattern matching expressions ( or posix regular expressions) the database does use standard \"c\" locale. you enable, value 1, will force ora2pg export indexes defined varchar2() char() columns using those operators. you set to value greater 1 will change indexes columns where character limit is greater equal this value. example, set to 128 create kind indexes columns type varchar2(n) where n >= 128. prefix_partition enable directive you that partition table name be exported using parent table name. disabled default. you multiple partitioned table, exported postgresql partitions have same name different parent tables. is allowed, table name must unique. disable_partition you don't to reproduce partitioning in oracle want export partitioned oracle data the main single table postgresql enable directive. ora2pg export data the main table name. default is use partitioning, ora2pg export data each partition import into postgresql dedicated partition table. oracle spatial postgis ora2pg fully export spatial object oracle database. 's configuration directives could used control export. autodetect_spatial_type default ora2pg is looking indexes see spatial constraint type dimensions defined under oracle. those constraints are passed at index creation using example: create index ... indextype is mdsys.spatial_index parameters('sdo_indx_dims=2, layer_gtype=point'); those oracle constraints parameters are set, default is export those columns generic type geometry be able receive spatial type. autodetect_spatial_type directive allow force ora2pg autodetect real spatial type dimension used a spatial column otherwise non- constrained \"geometry\" type is used. enabling feature force ora2pg scan sample 50000 column look the gtype used. can increase reduce sample size setting value autodetect_spatial_type the desired number line scan. directive is enabled default. example, the case a column named shape defined oracle type sdo_geometry, autodetect_spatial_type disabled will converted : shape geometry(geometry) shape geometry(geometryz, 4326) if directive is enabled the column contains single geometry type use single dimension: shape geometry(polygon, 4326) shape geometry(polygonz, 4326) a or three dimensional polygon. convert_srid directive allow to control automatically conversion oracle srid standard epsg. enabled, ora2pg use oracle function sdo_cs.map_oracle_srid_to_epsg() convert srid. enabled default. the sdo_srid returned oracle is null, will replaced the default value 8307 converted its epsg value: 4326 ( default_srid). the value is upper 1, srid be forced this value, this case default_srid not used oracle returns null value the value be forced convert_srid. note it is possible set epsg value oracle side sdo_cs.map_oracle_srid_to_epsg() return null your to force value: system@db> update sdo_coord_ref_sys set legacy_code=41014 where srid = 27572; default_srid this directive override default epsg srid used: 4326. be overwritten convert_srid, above. geometry_extract_type directive take three values: wkt (default), wkb internal. it is set wkt, ora2pg use sdo_util.to_wktgeometry() extract geometry data. it is set wkb, ora2pg use binary output using sdo_util.to_wkbgeometry(). those extract type are calls oracle side, are slow you easily reach of memory you lot rows. wkb is able export 3d geometry some geometries curvepolygon. this case may the internal extraction type. will a pure perl library convert sdo_geometry data a wkt representation, translation is done ora2pg side. is work progress, please validate exported data geometries before . default spatial object extraction type is internal. postgis_schema this directive add specific schema the search path look postgis functions. postgresql import default conversion postgresql format is written file 'output.sql'. command: psql mydb < output.sql import content file output.sql postgresql mydb database. data_limit you are performing insert/copy export ora2pg proceed chunks data_limit tuples speed improvement. tuples are stored memory before being written disk, if want speed have enough system resources can grow limit an upper value example: 100000 1000000. before release 7.0 value 0 mean limit that tuples are stored memory before being flushed disk. 7.x branch has been remove chunk be set the default: 10000 blob_limit ora2pg detect table some blob will automatically reduce value this directive dividing by 10 until value is below 1000. can control value setting blob_limit. exporting blob lot resources, setting to too high value produce oom. output ora2pg output filename be changed this directive. default value is output.sql. you set file name extension .gz .bz2 output be automatically compressed. require the compress::zlib perl module is installed the filename extension is .gz that bzip2 system command is installed the .bz2 extension. output_dir since release 7.0, can define base directory where file be written. directory must exists. bzip2 directive allow to specify full path the bzip2 program it not found the path environment variable. file_per_constraint allow object constraints be saved a separate file during schema export. file be named constraints_output, where output is value the corresponding configuration directive. can .gz xor .bz2 extension enable compression. default is save data the output file. directive is usable with table export type. constraints be imported quickly postgresql using load export type parallelize creation multiple (-j jobs) connections. file_per_index allow indexes be saved a separate file during schema export. file be named indexes_output, where output is value the corresponding configuration directive. can .gz xor .bz2 file extension enable compression. default is save data the output file. directive is usable with table tablespace export type. the tablespace export, is used write \"alter index ... tablespace ...\" a separate file named tbsp_indexes_ouput can loaded end the migration the indexes creation move indexes. indexes be imported quickly postgresql using load export type parallelize creation multiple (-j jobs) connections. file_per_fkeys allow foreign key declaration be saved a separate file during schema export. default foreign keys are exported the main output file in constraint_output.sql file. enabled foreign keys be exported a file named fkeys_output.sql file_per_table allow data export be saved one file per table/view. files be named tablename_output, where output is value the corresponding configuration directive. can still .gz xor .bz2 extension the output directive enable compression. default 0 save data one file, set to 1 enable feature. is usable during insert copy export type. file_per_function allow functions, procedures triggers be saved one file per object. files be named objectname_output. where output is value the corresponding configuration directive. can still .gz xor .bz2 extension the output directive enable compression. default 0 save in single file, set to 1 enable feature. is usable during corresponding export type, package body export has special behavior. export type is package you've enabled directive, ora2pg create directory per package, named the lower case name the package, will create file per function/procedure that directory. the configuration directive is enabled, will create file per package packagename_output, where output is value the corresponding directive. truncate_table this directive is set 1, truncate table instruction be add before loading data. is usable during insert copy export type. activated, instruction be added if 's global delete clause not specific the current table ( bellow). delete support include delete ... where clause filter before importing data perform delete some lines instead truncatinf tables. value is construct follow: table_name[delete_where_clause], if have one where clause all tables put delete clause single value. both are possible too. here are examples: delete 1=1 # apply all tables delete tuples delete table_test[id1='001'] # apply on table table_test delete table_test[id1='001' id1='002] date_create > '2001-01-01' table_info[name='test'] last applies different delete where clause tables table_test table_info a generic delete where clause date_create all tables. truncate_table is enabled will applied all tables covered the delete definition. delete clauses might useful regular \"updates\". stop_on_error set parameter 0 not include call \\set on_error_stop in sql scripts generated ora2pg. default order is always present that script immediately abort an error is encountered. copy_freeze enable directive use copy freeze instead a simple copy export data rows already frozen. is intended a performance option initial data loading. rows be frozen if table being loaded has been created truncated the current sub-transaction. will works export file when -j oracle_copies is set default 1. can used direct import postgresql under same condition -j jobs must be unset default 1. using ora2pg export type insert copy dump data file that file_per_table is enabled, will warned ora2pg not export data again the file already exists. is prevent downloading twice table huge amount data. force download data these tables have remove existing output file . if want import data the fly the postgresql database have three configuration directives set postgresql database connection. is possible copy insert export type for database schema 's real interest do . pg_dsn this directive set postgresql data source namespace using dbd::pg perl module follow: dbi:pg:dbname=pgdb;host=localhost;port=5432 connect database 'pgdb' localhost tcp port 5432. pg_user pg_pwd two directives are used set login user password. synchronous_commit specifies whether transaction commit wait wal records be written disk before command returns \"success\" indication the client. is equivalent set synchronous_commit directive postgresql.conf file. is used you load data directly postgresql, default is off disable synchronous commit gain speed writing data. modified version postgresql, greenplum, not this setting, in set directive 1, ora2pg not try change setting. column tytpe control pg_numeric_type set 1 replace portable numeric type postgresql internal type. oracle data type number(p,s) is approximatively converted real float postgresql data type. you monetary fields don't rounding issues the extra decimals should preserve same numeric(p,s) postgresql data type. that if need very precision using numeric(p,s) is slower using real double. pg_integer_type set 1 replace portable numeric type postgresql internal type. oracle data type number(p) number are converted smallint, integer bigint postgresql data type following length the precision. number without precision are set default_numeric ( bellow). default_numeric number without precision are converted default bigint if pg_integer_type is true. can overwrite value any pg type, integer float. data_type you're experiencing problem data type schema conversion this directive can full control the correspondence between oracle postgresql types redefine data type translation used ora2pg. syntax is comma-separated list \"oracle datatype:postgresql datatype\". here are default list used: data_type date:timestamp,long:text,long raw:bytea,clob:text,nclob:text,blob:bytea,bfile:bytea,raw:bytea,rowid:oid,float:double precision,dec:decimal,decimal:decimal,double precision:double precision,int:numeric,integer:numeric,real:real,smallint:smallint,binary_float:double precision,binary_double:double precision,timestamp:timestamp,xmltype:xml,binary_integer:integer,pls_integer:integer,timestamp time zone:timestamp time zone,timestamp local zone:timestamp time zone note the directive the list definition must a single line. you to replace type a precision scale need escape coma a backslash. example, you to replace number(*,0) bigint instead numeric(38) add following: data_type number(*\\,0):bigint don't to recopy default type conversion just one want rewrite. 's special case bfile they are converted type text, will contains full path the external file. you set destination type bytea, default, ora2pg export content the bfile bytea. third case is you set destination type efile, this case, ora2pg export as efile record: (directory, filename). the directory export type export existing directories well privileges those directories. 's sql function available retrieve path the bfile, ora2pg to create using dbms_lob package. create replace function ora2pg_get_bfilename( p_bfile bfile ) return varchar2 l_dir varchar2(4000); l_fname varchar2(4000); l_path varchar2(4000); begin dbms_lob.filegetname( p_bfile, l_dir, l_fname ); select directory_path l_path all_directories where directory_name = l_dir; l_dir := rtrim(l_path,'/'); return l_dir || '/' || l_fname; end; function is created ora2pg found table a bfile column that destination type is text. function is dropped the end the export. concern both, copy insert export type. 's sql function available retrieve bfile an efile record, ora2pg to create using dbms_lob package. create replace function ora2pg_get_efile( p_bfile bfile ) return varchar2 l_dir varchar2(4000); l_fname varchar2(4000); begin dbms_lob.filegetname( p_bfile, l_dir, l_fname ); return '(' || l_dir || ',' || l_fnamei || ')'; end; function is created ora2pg found table a bfile column that destination type is efile. function is dropped the end the export. concern both, copy insert export type. set destination type, the data_type configuration directive: data_type bfile:efile example. efile type is user defined type created the postgresql extension external_file can found here: https://github.com/darold/external_file is port the bfile oracle type postgresql. modify_type time need force destination type, example column exported timestamp ora2pg be forced type date. value is comma-separated list table:column:type structure. you need use comma space inside type definition will to backslash . modify_type table1:col3:varchar,table1:col4:decimal(9\\,6) type table1.col3 be replaced a varchar table1.col4 a decimal precision. taking export under control following configuration directives interact directly the export process give fine granularity database export control. skip table export may want export schema constraints, skip configuration directive allow to specify space-separated list constraints should be exported. possible values are: - fkeys: turn off foreign key constraints - pkeys: turn off primary keys - ukeys: turn off unique column constraints - indexes: turn off other index types - checks: turn off check constraints example: skip indexes,checks removed indexes ans check constraints export. pkey_in_create enable directive you to add primary key definition inside create table statement. disabled ( default) primary key definition be add an alter table statement. enable if are exporting greenplum postgresql database. keep_pkey_names default names the primary unique key the source oracle database are ignored key names are created the target postgresql database the postgresql internal default naming rules. you to preserve oracle primary key names set option 1. fkey_add_update directive allow to add on update cascade option a foreign key a delete cascade is defined always. oracle not support feature, have use trigger operate on update cascade. postgresql has feature, can choose to add foreign key option. is three value this directive: never, default mean foreign keys be declared exactly in oracle. second value is delete, mean the update cascade option be added if on delete cascade is already defined the foreign keys. last value, always, force foreign keys be defined using update option. fkey_deferrable exporting tables, ora2pg normally exports constraints they are, they are non-deferrable are exported non-deferrable. however, non-deferrable constraints probably cause problems attempting import data pg. fkey_deferrable option set 1 cause foreign key constraints be exported deferrable. defer_fkey addition exporting data defer_fkey option set 1 add command defer foreign key constraints during data export the import be done a single transaction. will only foreign keys been exported deferrable you are using direct import postgresql (pg_dsn is defined). constraints then checked the end the transaction. directive also enabled you to force foreign keys be created deferrable initially deferred during schema export (table export type). drop_fkey deferring foreign keys is possible due the amount data a single transaction, 've exported foreign keys deferrable you are using direct import postgresql, can the drop_fkey directive. will drop foreign keys before data import recreate at end the import. drop_indexes directive allow to gain lot speed improvement during data import removing indexes are an automatic index (indexes primary keys) recreate at end data import. course is far better not import indexes constraints before having imported data. disable_triggers directive is used disable triggers all tables copy insert export modes. available values are user (disable user-defined triggers ) and (includes ri system triggers). default is 0: not add sql statements disable trigger before data import. you to disable triggers during data migration, set value user your are connected non superuser all you are connected postgresql superuser. value 1 is equal user. disable_sequence set 1 disables alter sequences all tables during copy insert export mode. is used prevent update sequence during data migration. default is 0, alter sequences. noescape default data are of type date time are escaped. you experience problem that can set to 1 disable character escaping during data export. directive is used during copy export. standard_conforming_strings enabling/disabling escape insert statements. standard_conforming_strings controls whether ordinary string literals ('...') treat backslashes literally, specified sql standard. was default before ora2pg v8.5 that strings was escaped , now is currently , causing ora2pg use escape string syntax (e'...') this parameter is set 0. is exact behavior the same option postgresql. directive is used during data export build insert statements. noescape enabling/disabling escape copy statements. trim_type you to convert char(n) oracle varchar(n) text postgresql using directive data_type, might to some triming the data. default ora2pg auto-detect conversion remove whitespace both leading trailing position. you want remove leadings character set value leading. you want remove trailing character, set value trailing. default value is both. trim_char default trimming character is space, this directive you need change character will removed. example, set to - you leading - the char(n) field. use space trimming charger, comment directive, is default value. preserve_case you to preserve case oracle object name set directive 1. default ora2pg convert oracle object names lower case. do recommend enable unless will always to double-quote object names all sql scripts. ora_reserved_words allow escaping column name using oracle reserved words. value is list comma-separated reserved word. default is audit,comment. use_reserved_words enable directive you table column names are reserved word postgresql. ora2pg double quote name the object. gen_user_pwd set directive 1 replace default password a random password all extracted user during grant export. pg_supports_mview since postgresql 9.3, materialized view are supported the sql syntax 'create materialized view'. force ora2pg use native postgresql support must enable configuration - enable default. you to the old style table a set function, should disable . pg_supports_ifexists postgresql version below 9.x not support exists ddl statements. disabling directive value 0 prevent ora2pg add those keywords all generated statements. default value is 1, enabled. pg_supports_role (deprecated) option is deprecated since ora2pg release v7.3. default oracle roles are translated postgresql groups. you postgresql 8.1 more consider use roles set directive 1 export roles. pg_supports_inout (deprecated) option is deprecated since ora2pg release v7.3. set 0, in, or inout parameters not used the generated postgresql function declarations (disable for postgresql database version lower 8.1), is enable default. pg_supports_default directive enable disable use default parameter value function export. until postgresql 8.4 such default value was supported, feature is enable default. pg_supports_when (deprecated) add support when clause triggers postgresql v9.0 support . this directive is enabled default, set to 0 disable feature. pg_supports_insteadof (deprecated) add support instead usage triggers (used pg >= 9.1), this directive is disabled instead triggers be rewritten pg rules. pg_supports_checkoption enabled, export views check option. disable if have postgresql version prior 9.4. default: 1, enabled. pg_supports_ifexists disabled, not export object if exists statements. enabled default. pg_supports_partition postgresql version prior 10.0 not native partitioning. enable directive you to declarative partitioning. disable default. bitmap_as_gin btree_gin extension create bitmap index pg >= 9.4 will need create extension yourself: create extension btree_gin; default is create gin index, disabled, btree index be created pg_background pg_background extension create autonomous transaction instead using dblink wrapper. pg >= 9.5 . default is use dblink. https://github.com/vibhorkum/pg_background this extension. dblink_conn default you an autonomous transaction translated using dblink extension instead pg_background connection is defined using values set pg_dsn, pg_user pg_pwd. you to fully override connection string this directive follow set connection the autonomous transaction wrapper function. example: dblink_conn port=5432 dbname=pgdb host=localhost user=pguser password=pgpass longreadlen this directive set database handle's 'longreadlen' attribute a value will the larger the expected size the lobs. default is 1mb witch may be enough extract blobs clobs. the size the lob exceeds 'longreadlen' dbd::oracle return 'ora-24345: truncation' error. default: 1023*1024 bytes. a at page learn more: http://search.cpan.org/~pythian/dbd-oracle-1.22/oracle.pm#data_inter face_for_persistent_lobs important note: you increase value this directive care data_limit probably needs be reduced. if only a 1mb blob, trying read 10000 them ( default data_limit) at once require 10gb memory. may extract data those table separatly set data_limit 500 lower, otherwise may experience out memory. longtrunkok you to bypass 'ora-24345: truncation' error, set directive 1, will truncate data extracted the longreadlen value. disable default that will warned your longreadlen value is high enough. no_lob_locator disable if don't to load full content blob clob use lob locators instead. is useful not having set longreadlen. note this not improve speed blob export most the is always consumed the bytea escaping in case data be processed line line not chunk data_limit rows. more information how works, http://search.cpan.org/~pythian/dbd-oracle-1.74/lib/dbd/oracle.pm#da ta_interface_for_lob_locators default is enabled, will use lob locators backward compatibility. xml_pretty force use getstringval() instead getclobval() xml data export. default is 1, enabled backward compatibility. set to 0 use extract method la clob. enable_microsecond set to o you to disable export millisecond oracle timestamp columns. default milliseconds are exported the of following format: 'yyyy-mm-dd hh24:mi:ss.ff' disabling force use the following oracle format: to_char(..., 'yyyy-mm-dd hh24:mi:ss') default milliseconds are exported. disable_comment set to 1 you don't to export comment associated tables columns definition. default is enabled. control mysql export behavior mysql_pipes_as_concat enable if double pipe double ampersand (|| &&) should be taken equivalent or and. depend the variable @sql_mode, it if ora2pg fail auto detecting behavior. mysql_internal_extract_format enable directive you extract() replacement use internal format returned an integer, example dd hh24:mm:ss be replaced format; ddhh24mmss::bigint, depend your apps usage. special options handle character encoding nls_lang nls_nchar default ora2pg set nls_lang american_america.al32utf8 nls_nchar al32utf8. is recommanded change those settings in case could useful. using own settings those configuration directive change client encoding oracle side setting environment variables $env{nls_lang} $env{nls_nchar}. binmode default ora2pg force perl use utf8 /o encoding. is done through call the perl pragma: open ':utf8'; can override encoding using binmode directive, example can set to :locale use locale iso-8859-7, will respectively use open ':locale'; open ':encoding(iso-8859-7)'; you change nls_lang non utf8 encoding, might to set directive. http://perldoc.perl.org/5.14.2/open.html more information. of time, leave directive commented. client_encoding default postgresql client encoding is automatically set utf8 avoid encoding issue. you changed value nls_lang might to change encoding the postgresql client. can a at postgresql supported character sets here: http://www.postgresql.org/docs/9.0/static/multibyte.html plsql plpsql conversion automatic code conversion oracle plsql postgresql plpgsql is work progress ora2pg surely will always manual . the perl code used automatic conversion is stored a specific perl module named ora2pg/plsql.pm feel free modify/add own code send patches. main in function, procedure, package package body headers parameters rewrite. plsql_pgsql enable/disable plsql plpsql conversion. enabled default. null_equal_empty ora2pg replace conditions a test null a call the coalesce() function mimic oracle behavior where empty string are considered equal null. (field1 is null) is replaced (coalesce(field1::text, '') = '') (field2 is null) is replaced (field2 is null field2::text <> '') might this replacement be sure your application have same behavior if have control you application better is change to transform empty string null postgresql makes difference. empty_lob_null force empty_clob() empty_blob() be exported null instead empty string the one '\\x' the second. null is allowed your column might improve data export speed you lot empty lob. default is preserve exact data oracle. package_as_schema you don't to export package schema as simple functions might want replace call package_name.function_name. you disable package_as_schema directive ora2pg replace call package_name.function_name() package_name_function_name(). default is use schema emulate package. replacement be done all kind ddl code is parsed the plsql plpgsql converter. plsql_pgsql must enabled -p used command line. rewrite_outer_join enable directive the rewrite oracle native syntax (+) outer join is broken. will force ora2pg not rewrite such code, default is try rewrite simple form rigth outer join the moment. uuid_function default ora2pg convert call sys_guid() oracle function a call uuid_generate_v4 uuid-ossp extension. can redefined to the gen_random_uuid function pgcrypto extension changing function name. default uuid_generate_v4. note when raw(n) column has \"sys_guid()\" default value ora2pg automatically translate type the column uuid might the right translation most the case. date_function_rewrite default ora2pg rewrite add_month(), add_year() date_trunc() functions set to 0 force ora2pg not translate those functions it breaks code. function_stable default oracle functions are marked stable they not modify data unless used pl/sql variable assignment as conditional expression. can force ora2pg create function volatile disabling configuration directive. materialized view since postgresql 9.3, materialized view are supported the create materialized view syntax, force ora2pg use native postgresql support must enable configuration directive pg_supports_mview. other case ora2pg export materialized views \"snapshot materialized views\" explain this document: http://tech.jonathangardner.net/wiki/postgresql/materialized_views. exporting materialized view ora2pg first add sql code create \"materialized_views\" table: create table materialized_views ( mview_name text null primary key, view_name text null, iname text, last_refresh timestamp time zone ); materialized views have entry this table. then adds plpgsql code create tree functions: create_materialized_view(text, text, text) used create materialized view drop_materialized_view(text) used delete materialized view refresh_full_materialized_view(text) used refresh view it adds sql code create view the materialized view: create view mviewname_mview select ... ...; select create_materialized_view('mviewname','mviewname_mview', change the name the column used the index); first argument is name the materialized view, second name the view which materialized view is based the third is column name which index should build (aka od time primary key). column is automatically deduced you need replace name. said above ora2pg supports snapshot materialized views the table be entirely refreshed issuing a truncate the table then load again data the view: refresh_full_materialized_view('mviewname'); drop materialized view just to call drop_materialized_view() function the name the materialized view parameter. configuration directives debug set to 1 enable verbose output. import can define common ora2pg configuration directives a single file can imported other configuration files the import configuration directive follow: import commonfile.conf import configuration directives defined commonfile.conf the current configuration file. exporting views postgresql tables can export oracle view a postgresql table simply setting type configuration option table have corresponding create table statement. use type copy insert export corresponding data. allow you to specify views the view_as_table configuration option. if ora2pg finds view will extract schema ( type=table) a pg create table form, it extract data ( type=copy insert) following view schema. example, the following view: create replace view product_prices (category_id, product_count, low_price, high_price) select category_id, count(*) product_count, min(list_price) low_price, max(list_price) high_price product_information group category_id; setting view_as_table product_prices using export type table, force ora2pg detect columns returned types to generate create table statement: create table product_prices ( category_id bigint, product_count integer, low_price numeric, high_price numeric ); data be loaded following copy insert export type the view declaration. can the allow exclude directive addition filter objects export. export kettle transformation xml files kettle export type is useful you to penthalo data integrator (kettle) import data postgresql. this type export ora2pg generate xml kettle transformation files (.ktr) per table add line manually execute transformation the output.sql file. example: ora2pg -c ora2pg.conf -t kettle -j 12 - mytable -o load_mydata.sh generate file called 'hr.mytable.ktr' add line the output file (load_mydata.sh): #!/bin/sh kettle_template_path='.' javamaxmem=4096 ./pan.sh -file $kettle_template_path/hr.mytable.ktr -level detailed -j 12 option create template 12 processes insert data postgresql. is possible specify number parallel queries used extract data the oracle the -j command line option follow: ora2pg -c ora2pg.conf -t kettle -j 4 -j 12 - employees -o load_mydata.sh is possible you defined technical key used split query between cores the defined_pkey configuration directive. example: defined_pk employees:employee_id force number oracle connection copies 4 defined sql query follow the kettle xml transformation file: <sql>select * hr.employees where abs(mod(employee_id,${internal.step.unique.count}))=${internal.step.unique.number}</sql> kettle export type requires the oracle postgresql dsn are defined. can activate truncate_table directive force truncation the table before data import. kettle export type is original of marc cousin. migration cost assessment estimating cost a migration process oracle postgresql is easy. obtain good assessment this migration cost, ora2pg inspect database objects, functions stored procedures detect there's still objects pl/sql code can be automatically converted ora2pg. ora2pg has content analysis mode inspect oracle database generate text report what oracle database contains what not exported. activate \"analysis report\" mode, have use export de type show_report in following command: ora2pg -t show_report here is sample report obtained this command: -------------------------------------- ora2pg: oracle database content report -------------------------------------- version oracle database 10g enterprise edition release 10.2.0.1.0 schema hr size 880.00 mb -------------------------------------- object number invalid comments -------------------------------------- cluster 2 0 clusters are supported will be exported. function 40 0 total size function code: 81992. index 435 0 232 index(es) are concerned the export, others are automatically generated will so postgresql. 1 bitmap index(es). 230 b-tree index(es). 1 reversed b-tree index(es) note bitmap index(es) be exported b-tree index(es) any. cluster, domain, bitmap join iot indexes not exported all. reverse indexes are exported too, may a trigram-based index ( pg_trgm) a reverse() function based index search. may use 'varchar_pattern_ops', 'text_pattern_ops' 'bpchar_pattern_ops' operators your indexes improve search the operator respectively varchar, text char columns. materialized view 1 0 materialized view be exported snapshot materialized views, are updated fully refreshed. package body 2 1 total size package code: 20700. procedure 7 0 total size procedure code: 19198. sequence 160 0 sequences are fully supported, all call sequence_name.nextval sequence_name.currval be transformed nextval('sequence_name') currval('sequence_name'). table 265 0 1 external table(s) be exported standard table. external_to_fdw configuration directive export file_fdw foreign tables use copy your code you want load data external files. 2 binary columns. 4 unknown types. table partition 8 0 partitions are exported using table inheritance check constraint. 1 hash partitions. 2 list partitions. 6 range partitions. note hash partitions are supported. trigger 30 0 total size trigger code: 21677. type 7 1 5 type(s) are concerned the export, others are supported. 2 nested tables. 2 object type. 1 subtype. 1 type boby. 1 type inherited. 1 varrays. note type inherited subtype are converted table, type inheritance is supported. type body 0 3 export type member method are supported, will be exported. view 7 0 views are fully supported, if have updatable views will need use instead triggers. database link 1 0 database links not exported. may try dblink perl contrib module use sql/med postgresql features the different foreign data wrapper (fdw) extensions. note: invalid code not exported unless export_invalid configuration directive is activated. once database be analysed, ora2pg, his ability convert sql pl/sql code oracle syntax postgresql, go further estimating code difficulties estimate time necessary operate full database migration. estimate migration cost man-days, ora2pg allow to a configuration directive called estimate_cost you also enabled command line: --estimate_cost feature only used the show_report, function, procedure, package query export type. ora2pg -t show_report --estimate_cost generated report is same above with new 'estimated cost' column follow: -------------------------------------- ora2pg: oracle database content report -------------------------------------- version oracle database 10g express edition release 10.2.0.1.0 schema hr size 890.00 mb -------------------------------------- object number invalid estimated cost comments -------------------------------------- database link 3 0 9 database links be exported sql/med postgresql's foreign data wrapper (fdw) extensions using oracle_fdw. function 2 0 7 total size function code: 369 bytes. high_salary: 2, validate_ssn: 3. index 21 0 11 11 index(es) are concerned the export, others are automatically generated will so postgresql. 11 b-tree index(es). note bitmap index(es) be exported b-tree index(es) any. cluster, domain, bitmap join iot indexes not exported all. reverse indexes are exported too, may a trigram-based index ( pg_trgm) a reverse() function based index search. may use 'varchar_pattern_ops', 'text_pattern_ops' 'bpchar_pattern_ops' operators your indexes improve search the operator respectively varchar, text char columns. job 0 0 0 job are exported. may set external cron job them. materialized view 1 0 3 materialized view be exported snapshot materialized views, are updated fully refreshed. package body 0 2 54 total size package code: 2487 bytes. number procedures functions found inside those packages: 7. two_proc.get_table: 10, emp_mgmt.create_dept: 4, emp_mgmt.hire: 13, emp_mgmt.increase_comm: 4, emp_mgmt.increase_sal: 4, emp_mgmt.remove_dept: 3, emp_mgmt.remove_emp: 2. procedure 4 0 39 total size procedure code: 2436 bytes. test_commentaire: 2, secure_dml: 3, phd_get_table: 24, add_job_history: 6. sequence 3 0 0 sequences are fully supported, all call sequence_name.nextval sequence_name.currval be transformed nextval('sequence_name') currval('sequence_name'). synonym 3 0 4 synonyms be exported views. synonyms not exists postgresql a common workaround is use views set postgresql search_path your session access object outside current schema. user1.emp_details_view_v is alias hr.emp_details_view. user1.emp_table is alias hr.employees@other_server. user1.offices is alias hr.locations. table 17 0 8.5 1 external table(s) be exported standard table. external_to_fdw configuration directive export file_fdw foreign tables use copy your code you want load data external files. 2 binary columns. 4 unknown types. trigger 1 1 4 total size trigger code: 123 bytes. update_job_history: 2. type 7 1 5 5 type(s) are concerned the export, others are supported. 2 nested tables. 2 object type. 1 subtype. 1 type boby. 1 type inherited. 1 varrays. note type inherited subtype are converted table, type inheritance is supported. type body 0 3 30 export type member method are supported, will be exported. view 1 1 1 views are fully supported, if have updatable views will need use instead triggers. -------------------------------------- total 65 8 162.5 162.5 cost migration units means approximatively 2 man (s). last line shows total estimated migration code man-days following number migration units estimated each object. migration unit represent around five minutes a postgresql expert. this is first migration can it higher the configuration directive cost_unit_value the --cost_unit_value command line option: ora2pg -t show_report --estimate_cost --cost_unit_value 10 ora2pg is able give a migration difficulty level assessment, here sample: migration level: b-5 migration levels: - migration might run automatically b - migration code rewrite a human-days cost to 10 days c - migration code rewrite a human-days cost above 10 days technical levels: 1 = trivial: stored functions no triggers 2 = easy: stored functions with triggers, manual rewriting 3 = simple: stored functions /or triggers, manual rewriting 4 = manual: stored functions with triggers views code rewriting 5 = difficult: stored functions /or triggers code rewriting assessment consist a letter or b specify the migration needs manual rewriting not. a number 1 to 5 give a technical difficulty level. have additional option --human_days_limit specify number human-days limit where migration level should set c indicate it need huge amount work a full project management migration support. default is 10 human-days. can the configuration directive human_days_limit change default value permanently. feature has been developped help or boss decide database migrate and team must mobilized operate migration. global oracle mysql migraton assessment ora2pg with script ora2pg_scanner can used you a huge number instances schema scan migration assessment. usage: ora2pg_scanner -l csvfile [-o outdir] -l | --list file : csv file containing list database scan all requiered information. first line the file contains following header describe format must used: \"type\",\"schema/database\",\"dsn\",\"user\",\"password\" -o | --outdir dir : (optional) default reports be dumped a directory named 'output', will created automatically. you to change name this directory, set name second argument. -t | --test : try connection retrieving requiered schema database name. useful validate csv list file. here is full example a csv database list file: \"type\",\"schema/database\",\"dsn\",\"user\",\"password\" \"mysql\",\"sakila\",\"dbi:mysql:host=192.168.1.10;database=sakila;port=3306\",\"root\",\"secret\" \"oracle\",\"hr\",\"dbi:oracle:host=192.168.1.10;sid=xe;port=1521\",\"system\",\"manager\" csv field separator must a comma. will generate csv file the assessment result, line per schema database a detailed html report each database scanned. hint: the -t | --test option before test your connections your csv file. migration assessment method migration unit scores given each type oracle database object are defined the perl library lib/ora2pg/plsql.pm the %object_score variable definition. number pl/sql lines associated a migration unit is defined this file the $size_score variable value. number migration units associated each pl/sql code difficulties be found the same perl library lib/ora2pg/plsql.pm the hash %uncovered_score initialization. assessment method is work progress i'm expecting feedbacks migration experiences polish scores/units attributed those variables. improving indexes constraints creation speed using load export type a file containing sql orders perform, is possible dispatch those orders multiple postgresql connections. be able use feature, pg_dsn, pg_user pg_pwd must set. : ora2pg -t load -c config/ora2pg.conf - schema/tables/indexes_table.sql -j 4 dispatch indexes creation 4 simultaneous postgresql connections. will considerably accelerate part the migration process huge data size. exporting long raw you still columns defined long raw, ora2pg not able export kind data. oci library fail export and always return same record. be able export data need transform field blob creating temporary table before migrating data. example, oracle table: sql> desc test_longraw name null ? type -------------------- -------- ---------------------------- id number c1 long raw need be \"translated\" a table using blob follow: create table test_blob (id number, c1 blob); then copy data the following insert query: insert test_blob select id, to_lob(c1) test_longraw; you have exclude original table the export ( exclude directive) to renamed new temporary table the fly using replace_tables configuration directive. global variables oracle allow use global variables defined packages. ora2pg export variables postgresql user defined custom variables available a session. oracle variables assignement are exported call : perform set_config('pkgname.varname', value, false); of variables the code is replaced : current_setting('pkgname.varname')::global_variables_type; where global_variables_type is type the variable extracted the package definition. the variable is constant have default value assigned declaration, ora2pg create file global_variables.conf the definition include the postgresql.conf file that values already set database connection. note the value always modified the user you not exactly constant. hints converting queries oracle style outer join (+) syntax ansi standard sql the oracle side save lot time the migration. can toad query builder re-write using proper ansi syntax, : http://www.toadworld.com/products/toad--oracle/f/10/t/9518.aspx 's an alternative sql developer data modeler, http://www.thatjeffsmith.com/archive/2012/01/sql-developer-data-modeler- quick-tip--oracle-join-syntax--ansi/ toad is able rewrite native oracle decode() syntax ansi standard sql case statement. can find slide this a presentation given pgconf.ru: http://ora2pg.darold.net/slides/ora2pg_the_hard_way.pdf test migration type action called test allow to check all objects oracle database been created under postgresql. course pg_dsn must set be able check postgresql side. note this feature respect schema name limitation export_schema schema pg_schema are defined. ora2pg -t test -c config/ora2pg.conf > migration_diff.txt create file containing report all object row count both side, oracle postgresql, an error section giving the detail the differences each kind object. here is sample result: [test rows count] oracledb:countries:25 postgres:countries:25 oracledb:customers:6 postgres:customers:6 oracledb:departments:27 postgres:departments:27 oracledb:employees:107 postgres:employees:107 oracledb:jobs:19 postgres:jobs:19 oracledb:job_history:10 postgres:job_history:10 oracledb:locations:23 postgres:locations:23 oracledb:products:0 postgres:products:0 oracledb:ptab2:4 oracledb:regions:4 postgres:regions:4 [errors rows count] table ptab2 does exists postgresql database. [test indexes count] oracledb:countries:1 postgres:countries:1 oracledb:job_history:4 postgres:job_history:4 oracledb:departments:2 postgres:departments:1 oracledb:employees:6 postgres:employees:6 oracledb:customers:1 postgres:customers:1 oracledb:regions:1 postgres:regions:1 oracledb:locations:4 postgres:locations:4 oracledb:jobs:1 postgres:jobs:1 [errors indexes count] table departments doesn't the same number indexes oracle (2) in postgresql (1). [test view count] oracledb:view:1 postgres:view:1 [errors view count] ok, oracle postgresql the same number view. [test mview count] oracledb:mview:0 postgres:mview:0 [errors mview count] ok, oracle postgresql the same number mview. [test sequence count] oracledb:sequence:1 postgres:sequence:0 [errors sequence count] sequence does have same count oracle (1) in postgresql (0). [test type count] oracledb:type:1 postgres:type:0 [errors type count] type does have same count oracle (1) in postgresql (0). [test fdw count] oracledb:fdw:0 postgres:fdw:0 [errors fdw count] ok, oracle postgresql the same number fdw. here can that table, index, sequence one user defined type not been imported yet have encountered error.support author / maintainer gilles darold <gilles darold dot net> please report bugs, patches, help, etc. <gilles darold dot net>. feature request you need features let know <gilles darold dot net>. help lot develop better/useful tool. to contribute ? contribution build better tool is welcome, just to send your ideas, features request patches there be applied.license copyright (c) 2000-2017 gilles darold - rights reserved. program is free software: can redistribute and/ modify under terms the gnu general public license published the free software foundation, either version 3 the license, any later version. program is distributed the hope it be useful, without warranty; without the implied warranty merchantability fitness a particular purpose. the gnu general public license more details. should received copy the gnu general public license along this program. not, < http://www.gnu.org/licenses/ >.acknowledgement must thanks lot the great contributors, changelog all acknowledgments."
}