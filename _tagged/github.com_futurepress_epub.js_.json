{
	"_id": "14522535",
	"site": "https://github.com/futurepress/epub.js/",
	"title": "Render ePub documents in the browser",
	"author": "wilsonfiifi",
	"date": "2017-06-13T14:09:47.678Z",
	"tags": {
		"categories": [
			"opensource",
			"epub"
		],
		"languages": [
			"html",
			"javascript",
			"css"
		]
	},
	"content": "readme.md epub.jsepub.js is javascript library rendering epub documents the browser, across many devices.epub.js provides interface common ebook functions (such rendering, persistence pagination) without need develop dedicated application plugin. importantly, has incredibly permissive free bsd license.try while reading moby dickwhy epub epub standard is widely used easily convertible format. many books are currently this format, it is convertible many formats (such pdf, mobi ibooks). unzipped epub3 is collection html5 files, css, images other media like other website. however, enforces schema book components, allows to render book its parts based a controlled vocabulary.more specifically, epub schema standardizes table contents, provides manifest enables caching the entire book, separates storage the content how s displayed.getting started the minified code the build folder:<script src=\"../build/epub.min.js\"></script> you plan using compressed (zipped) epubs ( .epub file) include minified version jszip.js can found build/libs<!-- zip js --><script src=\"/build/libs/zip.min.js\"></script>setup element render :<div onclick=\"book.prevpage();\"></div><div id=\"area\"></div><div onclick=\"book.nextpage();\"></div>create new epub, then render to element:<script>var book = epub(\"url//book/\");book.renderto(\"area\");</script> the documentation view events methods getting books contents. examples are likely best place learn to the library.internet explorercompatibility ie is best wicked--xpath, google-authored pure javascript implementation the dom level 3 xpath specification ( not required). more info https://code.google.com/p/wicked--xpath/ can download latest wgxpath here from examples folder.<script src=\"/examples/wgxpath.install.js\"></script> install wgxpath via hook the below:epubjs.hooks.register(\"beforechapterdisplay\").wgxpath = function(callback, renderer){ wgxpath.install(renderer.render.window); (callback) callback();};wgxpath.install(window); are currently number open issues internet explorer help addressing would greatly appreciated.recent updatesv2 splits render method the layout renderer. currently iframe rendering is supported, this change allow new render methods the future. the breaking changes the renderer here.-in-progress pagination support using epub page-lists. a usage example. renderer:pagechanged has changed renderer:locationchanged a book:pagechanged event was added pass pagination events.moved demo reader /reader/ the source /reader_src/.updated cfi handling support text offsets. cfis return wrapped : \"epubcfi(/6/12[xepigraph_001]!4/2/28/2/1:0)\". ranges be added soon.added support epub properties. can overridden the settings default {spread: 'reflowable', layout: 'auto', orientation: 'auto'}updated documentationmany more testsrunning locallyinstall node.js install project dependences npmnpm install can run reader locally the commandnode server.jsbuilds are concatenated minified using gruntjs generate new build rungrunt, to generate builds you changes rungrunt watchexamplessinglebasiccontained epubpromisesfixed width & heightcustom elementmathml mathjaxannotations hypothes.ispaginationview examplestestingonce start server can run qunit tests http://localhost:8080/tests/ can download test books https://github.com/futurepress/books running:git submodule update --init --recursive you pull latest :git submodule foreach git pull origin masterhookssimilar a plugins, epub.js implements events can \"hooked\" . thus can interact and manipulate contents the book.examples this functionality is loading videos youtube links before displaying chapters contents implementing annotation.hooks require event latch onto a callback when are finished.example hook:epubjs.hooks.register(\"beforechapterdisplay\").example = function(callback, renderer){ var elements = render.doc.queryselectorall('[video]'), items = array.prototype.slice.call(elements); items.foreach(function(item){ //-- something the video item } (callback) callback();}additional resourcesepub.js developer mailing listirc server: freenode.net channel: #epub.jsfollow on twitter: @epubjshttp://twitter.com/#!/epubjsepub is registered trademark the idpf."
}