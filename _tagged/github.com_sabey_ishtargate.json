{
	"_id": "14418548",
	"site": "https://github.com/sabey/ishtargate",
	"title": " Ishtar Gate: Contextual Network Templating Engine",
	"author": "jacksonsabey",
	"date": "2017-06-13T13:06:44.208Z",
	"tags": {
		"categories": [
			"opensource",
			"golang",
			"firewall",
			"firewall-template",
			"firewall-configuration",
			"networking",
			"network-admin",
			"template-engine",
			"hosts",
			"hostsfile",
			"hostname",
			"ssh",
			"ssh-tunnel",
			"autossh",
			"iptables",
			"iptables-rules",
			"iptables-compiler",
			"iptables-manager",
			"iptables-configurations",
			"firewall-management",
			"firewall-rules"
		],
		"languages": [
			"go",
			"shell"
		]
	},
	"content": "readme.md ishtar gatecontextual network templating enginemanage network services dependencies :firewalls:contextual firewall rule templatingtemplating using https://golang.org/pkg/text/template/individual firewall rules access the context variables the source destination server, network, service still to write own firewall rules, you have necessary context variables doing currently supports:iptables firewalls be supported!/etc/hostname prints hostname (:/etc/hostsgenerate /etc/hosts the option including external /etc/hosts dependenciesssh tunnelsssh connection shell scripts support local remote port forwarding buildable executable example json files be found the ishtargate/ folder. can optionally build own configuration the build_test. file generate output go testbinary flags:settings-input: raw json inputsettings-file: location json fileishtargate-input: raw json inputishtargate-file: location json fileserver: specified, the server is generated, otherwise servers are generatedobjects:settings program variables be found hereattributes // ishtar/ is appended this relative absolute pathbuildpath string `json:\"build-path\"` // should ishtar/hostname folder deleted before generating?buildremovefolderhostname bool `json:\"build-remove-folder-hostname\"` // should ishtar/hosts folder deleted before generating?buildremovefolderhosts bool `json:\"build-remove-folder-hosts\"` // should ishtar/ssh folder deleted before generating?buildremovefolderssh bool `json:\"build-remove-folder-ssh\"` // should ishtar/firewall folder deleted before generating?buildremovefolderfirewall bool `json:\"build-remove-folder-firewall\"`example{ \"build-path\": \"unittest\", \"build-remove-folder-hostname\": true, \"build-remove-folder-hosts\": true, \"build-remove-folder-ssh\": true, \"build-remove-folder-firewall\": true}ishtargate is global container object. contains list servers, firewall type rules, global variables. firewall rules before/ are generated the very start very end the firewall generation process.attributes // servers // [servername]*serverobjectservers map[string]*server `json:\"servers\"` // global firewall rules // list types be found `firewall.` // 1 be used iptablesfirewalltype int `json:\"firewall-type\"` // before server.firewallrulesbeforefirewallrulesbefore []*firewall_rule `json:\"firewall-rules-before\"` // server.firewallrulesafterfirewallrulesafter []*firewall_rule `json:\"firewall-rules-\"` // global variablesvars map[string]interface{} `json:\"vars\"`functions // generate servers(self *ishtargate) build(settings *settings) // generate individual server(self *ishtargate) buildserver(settings *settings, server string)example{ \"servers\": { \"mediaserver\": null }, \"firewall-type\": 1, \"firewall-rules-before\": [ { \"rule\": \"- input -p icmp --icmp-type echo-request -j accept\" }, { \"rule\": \"# global before: myip: {{.ishtargate.vars.myip}}\" } ], \"firewall-rules-\": [ { \"rule\": \"# global : myip: {{.ishtargate.vars.myip}}\" } ], \"vars\": { \"myip\": \"255.255.255.255\" }}serverserver contains mostly local variables, hostsdependencies is only exception. hostsdependencies reference another servers network locally include networks /etc/hosts. ssh is currently local is referenced others. ssh is used generate shell scripts connecting other servers. server firewall rules are run between ishtargate firewall before/ rules. networks contains available networks, each their own ip, /etc/hosts, services. networks be frequently referenced other servers.attributes // hostname is used our /etc/hostname /etc/hostshostname string `json:\"hostname\"` // additional local hosts are appended our /etc/hosts // appears locally // [ip][]hosthosts map[string][]string `json:\"hosts\"` // hosts custom blob text before // appears locally hostsbefore string `json:\"hosts-before\"` // hosts custom blob text // this appears locally hostsafter string `json:\"hosts-\"` // optional hosts dependencies // additional referenced hosts are appended our /etc/hosts // we reference another servers network, will include networks /etc/hosts locally point hosts that networks ip // [servername][]networkhostsdependencies map[string][]string `json:\"hosts-dependencies\"` // ssh // will generate list ssh commands possible local remote tunnels // appears locally // ssh service name are arbitrary aren't currently referenced // [service]sshssh map[string]*ssh `json:\"ssh\"` // firewall rules // before servicesfirewallrulesbefore []*firewall_rule `json:\"firewall-before\"` // servicesfirewallrulesafter []*firewall_rule `json:\"firewall-\"` // list our accessible networks their available services // firewall rules be built our network relations // networkname be used place the interface name // interface name be referenced specific firewall rules // [networkname]networknetworks map[string]*network `json:\"networks\"` // server variablesvars map[string]interface{} `json:\"vars\"`example{ \"hostname\": \"home\", \"hosts\": { \"127.0.0.0\": [ \"mysql\", \"memcache\", \"redis\", \"phpmyadmin\", \"postgresql\", \"rethinkdb\" ], \"127.0.0.1\": [ \"mypc\" ] }, \"hosts-before\": \"# sometimes, 're going need comments\", \"hosts-\": \"# or don't care the parser\", \"hosts-dependencies\": { \"mediaserver\": [ \"lan\", \"wan\" ] }, \"ssh\": { \"mysql\": { \"user\": \"username\", \"host\": \"host\", \"key\": \"secret_rsa\", \"tunnel\": true, \"local-host\": \"localhost\", \"local-port\": 3306, \"remote-host\": \"127.0.0.1\", \"remote-port\": 3306 } }, \"firewall-before\": [ { \"rule\": \"# server before: myip: {{.ishtargate.vars.myip}} mymac: {{.server.vars.mymac}}\" } ], \"firewall-\": [ { \"rule\": \"# server : myip: {{.ishtargate.vars.myip}} mymac: {{.server.vars.mymac}}\" } ], \"networks\": { \"lan\": null }}networknetwork is \"network interface\" must an ip address. hosts are included the parent servers /etc/hosts, are included another servers /etc/hosts their hostsdependencies. services contain own firewall rules are parsed between firewall before/ rules.servicespassive are services are always available this network, do and not included a dependency another server. servicespassive should thought a public http/ftp/mail service where want anyone have access.servicesacquirable are services this network makes available other servers, are include their servicedependencies. another server requests service this servers servicesacquirable, service firewall rules be parsed locally each server requires dependency. servicesacquirable should thought a private ssh/database/cache service where only to grant access certain servers.servicedependencies are services this network requires! servicedependencies has optional service object. the service object is set, firewall rules this object be parsed locally. object also passed the source service the destination service is dependency. service port is optional, port is set the source port is unknown. servicedependencies service objects should thought local rules are required import dependency.attributes // accessible ipip string `json:\"ip\"` // []host // hosts are referenced other servers // referenced, hosts are appended their /etc/hostshosts []string `json:\"hosts\"` // passive services // passive services always available the firewall rules // [servicename]serviceservicespassive map[string]*service `json:\"services-passive\"` // acquirable services // acquirable services only available firewall rules acquired // [servicename]serviceservicesacquirable map[string]*service `json:\"services-acquirable\"` // optional service dependencies // acquired services set firewall rules the acquirable servers firewall rules // service object here is optional will included this servers rules // [servername][networkname][servicename]serviceservicedependencies map[string]map[string]map[string]*service `json:\"service-dependencies\"` // before server.firewallrulesbeforefirewallrulesbefore []*firewall_rule `json:\"firewall-rules-before\"` // server.firewallrulesafterfirewallrulesafter []*firewall_rule `json:\"firewall-rules-\"` // network variablesvars map[string]interface{} `json:\"vars\"`example{ \"ip\": \"192.168.1.31\", \"hosts\": [ \"tv\", \"movies\", \"pictures\", \"storage\" ], \"services-passive\": { \"http\": { \"port\": 80, \"rules\": [ { \"rule\": \"- input -p tcp --dport {{.service.port}} -j accept\" } ] }, \"ssh\": { \"port\": 22, \"rules\": [ { \"rule\": \"- input -p tcp --src {{.ishtargate.vars.myip}} --dport {{.service.port}} -j accept\" }, { \"rule\": \"# ip: {{.network.ip}} port: {{.service.port}} myip: {{.ishtargate.vars.myip}} mypubkey: {{.service.vars.mypublickey}}\" } ], \"vars\": { \"mypublickey\": \"0a:0b:0c:0d:0e:0f:00:01:02:03:04:05:06:07:08:09\" } } }, \"services-acquirable\": { \"mysql\": { \"port\": 3306, \"rules\": [ { \"rule\": \"- input -p tcp --src {{.sourcenetwork.ip}} --dport {{.destinationservice.port}} -j {{ index .destinationnetwork.vars \\\"-interface\\\"}}- {{.destinationnetworkname}} {{end}}accept\" } ] }, \"ssh\": { \"port\": 22, \"rules\": [ { \"rule\": \"- input -p tcp --src {{.sourcenetwork.ip}} --dport {{.destinationservice.port}} -j {{ index .destinationnetwork.vars \\\"-interface\\\"}}- {{.destinationnetworkname}} {{end}}accept\" }, { \"rule\": \"# sourcenetwork.ip: {{.sourcenetwork.ip}} sourceservice.port: {{.sourceservice.port}} destinationnetwork.ip: {{.destinationnetwork.ip}} destinationservice.port: {{.destinationservice.port}} myip: {{.ishtargate.vars.myip}}\" } ] } }, \"service-dependencies\": { \"mediaserver\": { \"lan\": { \"mysql\": null, \"ssh\": { \"port\": 22, \"rules\": [ { \"rule\": \"- input -p tcp --src {{.sourcenetwork.ip}} --dport {{.destinationservice.port}} -j {{ index .destinationnetwork.vars \\\"-interface\\\"}}- {{.destinationnetworkname}} {{end}}accept\" } ] } } } }, \"firewall-rules-before\": [ { \"rule\": \"# network before: ip: {{.network.ip}} myip: {{.ishtargate.vars.myip}} hello? {{.network.vars.hello}}\" } ], \"firewall-rules-\": [ { \"rule\": \"# network : ip: {{.network.ip}} myip: {{.ishtargate.vars.myip}} hello? {{.network.vars.hello}}\" } ], \"vars\": { \"hello\": \"goodbye\" }}service network service attributes an explanation.attributesport uint16 `json:\"port\"`firewallrules []*firewall_rule `json:\"rules\"` // service variablesvars map[string]interface{} `json:\"vars\"`firewall_rulefirewall_rule currently has single attribute.rule supports golang text template: https://golang.org/pkg/text/template/generate fail a template parsing error occurs.different firewall_variables_* objects be passed context the rule templating.attributesrule string `json:\"rule\"`example{ \"rule\": \"sourcenetwork.ip: {{.sourcenetwork.ip}} sourceservice.port: {{.sourceservice.port}} destinationnetwork.ip: {{.destinationnetwork.ip}} destinationservice.port: {{.destinationservice.port}} myip: {{.ishtargate.vars.myip}}\"}firewall_variables_server is passed server firewall rulesattributesservername string `json:\"server-name\"`server *server `json:\"server\"`ishtargate *ishtargate `json:\"ishtargate\"`firewall_variables_network is passed network firewall rulesattributesservername string `json:\"server-name\"`server *server `json:\"server\"`networkname string `json:\"network-name\"`network *network `json:\"network\"`ishtargate *ishtargate `json:\"ishtargate\"`firewall_variables_service_passive is passed passive services.passive services not a source, their own selves is destinationattributesservername string `json:\"server-name\"`server *server `json:\"server\"`networkname string `json:\"network-name\"`network *network `json:\"network\"`servicename string `json:\"service-name\"`service *service `json:\"service\"`ishtargate *ishtargate `json:\"ishtargate\"`firewall_variables_service_acquirable is passed services have been acquired anotherattributesservicename string `json:\"service-name\"`sourceservername string `json:\"source-server-name\"`sourceserver *server `json:\"source-server\"`sourcenetworkname string `json:\"source-network-name\"`sourcenetwork *network `json:\"source-network\"`sourceservice *service `json:\"source-service\"`destinationservername string `json:\"destination-server-name\"`destinationserver *server `json:\"destination-server\"`destinationnetworkname string `json:\"destination-network-name\"`destinationnetwork *network `json:\"destination-network\"`destinationservice *service `json:\"destination-service\"`ishtargate *ishtargate `json:\"ishtargate\"`firewall_variables_service_dependencies is passed services has acquired anotherattributesservicename string `json:\"service-name\"`sourceservername string `json:\"source-server-name\"`sourceserver *server `json:\"source-server\"`sourcenetworkname string `json:\"source-network-name\"`sourcenetwork *network `json:\"source-network\"`sourceservice *service `json:\"source-service\"`destinationservername string `json:\"destination-server-name\"`destinationserver *server `json:\"destination-server\"`destinationnetworkname string `json:\"destination-network-name\"`destinationnetwork *network `json:\"destination-network\"`destinationservice *service `json:\"destination-service\"`ishtargate *ishtargate `json:\"ishtargate\"`"
}