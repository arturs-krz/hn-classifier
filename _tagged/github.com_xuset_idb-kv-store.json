{
	"_id": "14164800",
	"site": "https://github.com/xuset/idb-kv-store",
	"title": " IdbKvStore â€“ Simple persistent storage for the browser",
	"author": "shleemies",
	"date": "2017-06-13T13:34:46.815Z",
	"tags": {
		"categories": [
			"opensource",
			"indexeddb",
			"database"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md idb-kv-store simple key-value store backed indexeddbidb-kv-store uses asynchronous operations persist retrieve key-value pairs the underlying database. idb-kv-store instance presents much simpler api indexeddb, doesn't the very limiting data size constraints localstorage, the persisted data is available between different instances, web sessions, web workers.additionally, mutation events allow users listen database changes occur different instances, windows, workers. module be used browserify the idbkvstore.min.js script be included will attach idbkvstore window.usagevar store = idbkvstore(' name store')// store value 'def' key 'abc'store.set('abc', 'def', function (err) { (err) throw err store.('abc', function (err, value) { (err) throw err console.log('key=abc value=' + value) })})promises are supported!store.('abc').(value => { console.log('key=abc value=' + value)})listen database mutation eventsstore.('add', change => { // add, set, remove events supported console.log('key=' + change.key, 'value=' + change.value)})// 'add' fails the key already existssomeotherstore.add('foo', 'bar')group multiple operations an atomic durable transactionvar transaction = store.transaction('readwrite')transaction.add('value1') // key be auto-generatedtransaction.add('value2') // key be auto-generatedtransaction.onfinish = function (err) { (err) throw err console.log('everything is persisted disk!')}apistore = idbkvstore(name, [opts], [cb])instantiates new key-value store. name is name the database used persist data. multiple store instances the same name be sharing same data.cb(err) is called the databases is opened. the open was successful err is null, otherwise err contains error.opts have following property:opts.channel - the browser does natively support broadcastchannel a custom implementation be passed .store.set(key, value, [cb])stores value key; value be retrieved through store.(key). the store operation completes, cb is called cb(err). err is null the store was successful. cb is undefined a promise is returned instead. the key already exists the old value is replaced the one.store.add([key], value, [cb]) same store.set(...) except the key already exists, error is returned the callback.additionally, key is optional. left empty an integer key be automatically generated. example: store.add('value')store.(key, [cb])retrieves value key. the value is retrieved, cb is called cb(err, value). the retrieval was successful err be null. cb is undefined a promise is returned instead. the key does exist undefined is returned the value; error is raised.store.remove(key, [cb])removes given key the store calls cb(err) upon completion. err is null the removal was successful. the key did exist before removal, removal is still considered successful. cb is undefined a promise is returned.store.clear([cb])removes entries the store, calls cb(err) upon completion. err is null clear was successful. cb is undefined a promise is returned.store.keys([range], [cb])retrieves list keys stored. the list is retrieved, cb is called cb(err, keys). cb is undefined a promise is returned. only return specific range, idbkeyrange be passed rangestore.values([range], [cb])retrieves list values stored. the list is retrieved, cb is called cb(err, keys). cb is undefined a promise is returned. only return specific range, idbkeyrange be passed rangestore.json([range], [cb])retrieves entire key-value store a json object. the json representation has been retrieved, cb is called cb(err, json). cb is undefined, a promise is returned. only return specific range, idbkeyrange be passed rangestore.count([range], [cb])retrieves number entries the store, calls cb(err, count) upon retrieval. err is null the count was successful, which case count hold value. cb is undefined, a promise is returned. only count number entries a specific range, idbkeyrange be passed rangestore.iterator([range], function (err, cursor) {})iterate each item the database. examplestore.iterator(function (err, cursor) { (err) throw err (cursor) { // we haven't reached end console.log('key=' + cursor.key, 'value=' + cursor.value) cursor.continue() // method be called the next item }}) only iterate a specific range, idbkeyrange be passed rangevar transaction = store.transaction([mode])returns transaction allows multiple operations be grouped together a durable atomic . mode take strings 'readwrite' 'readonly', defaults 'readwrite'. methods the transaction object are identical the ones idbkvstore, include: add, set, , remove, clear, keys, values, json, count, iterator.transactions automatically commit the last callback a request completes no requests are made.transaction.onfinish = function (err) {}called the transaction has either successfully completed failed. the transaction failed err is non null.transaction.abort()rolls any changes made the transaction. transaction is considered finish .store.close()closes indexeddb database frees internal resources. subsequent calls methods store throw errors.idbkvstore.indexeddb_supportdetects native indexeddb supportidbkvstore.broadcast_supportdetects native broadcastchannel support. the broadcastchannel api is present the mutation events not emitted.eventsstore.('open', function () {})emitted the database is openstore.('add', function (change) {})emitted another instance adds item the database calling store.add(...). change object has following properties:change.method - always set 'add'change.key - key value was added change.value - new value supported browsers more info which browsers support event.store.('set', function (change) {})emitted another instance sets value a key the database calling store.set(...). change object has following properties:change.method - always set 'set'change.key - key value was set change.value - new value supported browsers more info which browsers support event.store.('remove', function (change) {})emitted another instance removes item the database calling store.remove(...). change object has following properties:change.method - always set 'remove'change.key - key the value was removed supported browsers more info which browsers support event.store.('close', function () {})emitted the database is closedstore.('error', function (err) {})emitted any unhandled error occures.supported browsersidb-kv-store supports browsers have implemented indexeddb api. however, mutation events, add/set/remove, are available browsers have implemented broadcastchannel api. attempting listen a add/set/remove event a browser does support broadcastchannel api cause error be emitted. idbkvstore.broadcast_support indicate the browser supports api. list browsers support broadcastchannels be found caniuse.comlicensemit. copyright (c) austin middleton."
}