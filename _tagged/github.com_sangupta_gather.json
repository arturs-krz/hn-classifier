{
	"_id": "14523459",
	"site": "https://github.com/sangupta/gather",
	"title": " SQL-like queries on in-memory Java collections/arrays",
	"author": "sangupta",
	"date": "2017-06-13T13:04:19.165Z",
	"tags": {
		"categories": [
			"opensource",
			"sql",
			"sql-query",
			"java",
			"java-collections"
		],
		"languages": [
			"java"
		]
	},
	"content": "readme.md gathergather is ultra-lightweight, 37kb, dependencies library fire sql queries java collections arrays. data is inserted any -memory database, nor index is created. query is matchedagainst the objects ( be different types well) against provided query. useful run ad-hocqueries aggregation functions, on xml/json/csv more. library is tested the following jdk versions:oracle jdk 8oracle jdk 7open jdk 7usecases library is useful the following scenarios:run ad-hoc queries during development debug data-sets tweak db queriesrun ad-hoc queries production data via admin interfacequery objects different types one-shot, list<object> list<employee>works jdk 7 legacy codeusage exampleslist<employee> employees = .employeeservice.getallemployeesfromdatabase();// prepare querygather query = gather.where(\"age\").greaterthan(50).(\"status\").is(\"active\");// fire querylist<employee> filtered = query.find(employees);// reuse query another collectionlist<manager> managers = .employeeservice.getallmanagersfromdatabase();list<manager> filteredmanagers = query.find(managers);// null check operationsquery = gather.where(\"name\").isnull();query = gather.where(\"name\").isnotnull();// operatorquery = gather.where(\"name\").().is(\"sandeep\");// find instances have property// of two ways be employedgather = gather.where(\"name\").existsproperty();gather = gather.hasproperty(\"name\");// query an attribute is collection an array contains given value// converting between various primitive value types is supportedgather = gather.where(\"somefloatarray\").has( double(123));// run collections wellgather = gather.where(\"collection\").has(objectinstance);// find single instancequery.findone(employees);// find limited instancesquery.find(employees, 5);// find 5 instances, skip first 10 instancesquery.find(employees, 5, 10);// count number results rather accumulating // this is much faster memory efficientint numresults = query.count(employees);composed objects keysgather supports composed objects keys the where clause based them. example: following query search objects the collection/array called children have ageattribute its value is less 40.gather query = gather.where(\"children.age\").lessthan(10);query.find(employees);public class employee {public list<child> children;}public class child {public int age;}featuresgathering operationsfind - find matching objects, options skip elements /or limit number matchesfindone - find first matching objectcount - count total number matching objectsaggregate - run custom aggregator a collection/array a given fieldsupported operationsis - equals matchisignorecase - equals match ignoring case stringsisnull - check a property is nullisnotnull - check a property is null - wildcard match stringsregex - java regular expression match stringshas - check value is contained a collection an arrayhasall - check all values are contained a collection an arrayhasany - check any the value are present a collection an array - negate match expressionexistsproperty - check property exists objectnotexistsproperty - check property does exists objectlessthan - a value is less property valuelessthanorequals - a value is equal less property valuegreaterthan - a value is greater property valuegreaterthanorequals - a value is equal greater property valueboolean operations supported - boolean between clauses - boolean between clausesaggregation operationsaverageaslong - find average value a field has decimal partaverageasdouble - find average value a field has decimal partminaslong - find minimum value a field has decimal partminasdouble - find minimum value a field has decimal partmaxaslong - find maximum value a field has decimal partmaxasdouble - find maximum value a field has decimal partsumaslong - find total sum value a field has decimal partsumasdouble - find total sum value a field has decimal partunique - find number unique objects the result setcount - count objects a collection/array have given fieldclause chaining evaluation more one clause is added the query boolean operations and or are used connect , the evaluation happens left right. first clause is evaluated and the result is boolean /or the result next clause depending connecting operationtype. example:gather.where(\"name\").(\"sandeep*\").(\"age\").lessthan(50).(\"status\").is(\"active\"); evaluation happens the order:boolean = evaluate(\"name 'sandeep*'\");boolean second = evaluate(\"age < 50\");boolean third = evaluate(\"status == 'active'\");return & second | third;downloads latest stable release the library be downloaded via maven central using following coordinates:<dependency> <groupid>com.sangupta</groupid> <artifactid>gather</artifactid> <version>1.0.0</version></dependency> current/latest development snapshot jar be obtained using jitpack.io :add following repository maven,<repository> <id>jitpack.io</id> <url>https://jitpack.io</url></repository> add dependency ,<dependency> <groupid>com.github.sangupta</groupid> <artifactid>gather</artifactid> <version>-snapshot</version></dependency>release notes1.0.0 (9 jun 2017) stable releaseversioning transparency insight our release cycle, for striving maintainbackward compatibility, gather be maintained under semanticversioning guidelines much possible.releases be numbered the follow format:<major>.<minor>.<patch> constructed the following guidelines:breaking backward compatibility bumps major additions without breaking backward compatibility bumps minorbug fixes misc changes bump patch more information semver, please visit http://semver.org/.license gather: sql queries java collections copyright (c) 2017, sandeep gupta https://sangupta.com/projects/gather licensed under apache license, version 2.0 ( \"license\"); may use file except compliance the license. may obtain copy the license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed in writing, software distributed under license is distributed an \" is\" basis, without warranties conditions any kind, either express implied. the license the specific language governing permissions limitations under license."
}