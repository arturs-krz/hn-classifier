{
	"_id": "14361036",
	"site": "https://github.com/rafrex/react-markdown-tree",
	"title": " React Markdown Tree",
	"author": "rafrex",
	"date": "2017-06-13T13:07:42.281Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md react markdown treelive examplereact markdown tree renders markdown customizable react components never uses dangerouslysetinnerhtml.renders markdown according the commonmark spec (powered commonmark.js commonmark-react-renderer).create own renderers react components custom styling use react-markdown-tree-config-default zero setup default styling syntax highlighting.easy use provider/child pattern - set config once <markdownprovider> use <markdown> anywhere your app zero props.$ yarn add react-markdown-tree# $ npm install --save react-markdown-tree# use the default config:$ yarn add react-markdown-tree-config-default# $ npm install --save react-markdown-tree-config-defaultimport react 'react';import reactdom 'react-dom';import { markdownprovider } 'react-markdown-tree';import markdownconfig 'react-markdown-tree-config-default';import app './app';reactdom.render( <markdownprovider config={markdownconfig}> <app /> </markdownprovider>, document.getelementbyid('root'),);// app.js any component is child <markdownprovider>import { markdown } 'react-markdown-tree';...render() { return ( <markdown> {.state.stringinmarkdownformat /* string containing markdown source render */} </markdown> );} can use umd build 's available unpkg:<!-- available window.reactmarkdowntree --><script src=\"https://unpkg.com/react-markdown-tree/dist/react-markdown-tree.min.js\"></script><!-- available window.reactmarkdowntreeconfigdefault --><script src=\"https://unpkg.com/react-markdown-tree-config-default/dist/react-markdown-tree-config-default.min.js\"></script>api<markdown>children: stringstring containing markdown source render required, if provided <markdown> returns null does render: string | reactcomponent required, default is 'div' the markdown container element is rendered string an html tag name, e.g. 'div' render <div> container, 'section' render <section> container, etc... default container is rendered a <div> you provide reactcomponent instead a string, rendered markdown be passed down an array children that component...rest other props be passed down the markdown container element, e.g. classname, style, etc... example<markdown =\"section\" classname=\"-markdown\"># heading</markdown> render the page <section class=\"-markdown\"><h1> heading</h1><section/><markdownprovider>config: object required, if is provided unstyled html be renderedobject keys renderers containerpropsnote you only set config once the <markdownprovider> is mounted, you cannot change config once has been set. a reference config unstyled renderers referencemarkdownconfigwithunstyledrenderers.jsconst config = { renderers: { heading: /* reactcomponent */, paragraph: /* reactcomponent */, link: /* reactcomponent */, image: /* reactcomponent */, list: /* reactcomponent */, item: /* reactcomponent */, blockquote: /* reactcomponent */, emph: /* reactcomponent */, strong: /* reactcomponent */, softbreak: /* reactcomponent */, linebreak: /* reactcomponent */, thematicbreak: /* reactcomponent */, code: /* reactcomponent */, codeblock: /* reactcomponent */, }, containerprops: { // default props passed down every instance <markdown> // <markdown> api prop definitions },};publishing custom configsplease create publish custom configs npm others use!publish under react-markdown-tree-config--config-namelet know i'll add to readme"
}