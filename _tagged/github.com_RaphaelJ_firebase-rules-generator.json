{
	"_id": "14324498",
	"site": "https://github.com/RaphaelJ/firebase-rules-generator",
	"title": " Tool that generates Firebase rules from a schema",
	"author": "raphaelj",
	"date": "2017-06-13T13:08:17.448Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"scala"
		]
	},
	"content": "readme.md firebase-rules-generatorsmall utility you use generate advanced firebase rules. takes input declarative definition your firebase schema, generates firebase rules will enforce .schemas are defined plain-scala scripts.requirementsdownload install sbt open-source build tool.examplelet's suppose you to enforce schema a basic chat app. complete working example is located src/main/scala/examples/chatapp.scala. can generate rules running script running following command:sbt run-main com.bloomlife.fbrules.examples.chatapp chat example app be composed three main object types: users, rooms messages:{ \"users\": { \"userid1\": { \"id\": \"userid1\", \"created_at\": \"2017-03-16t19:20:30.45z\", \"full_name\": \"raphael javaux\", \"email\": \"raphael@bloomlife.com\", \"birth_date\": \"1991-03-06\", \"website\": \"https://bloomlife.com\" }, \"userid2\": { \"id\": \"userid2\", \"created_at\": \"2017-01-14t09:09:33.15z\", \"full_name\": \"dave null\", \"email\": \"dev@null.com\", \"sex\": \"male\" } }, \"rooms\": { \"general\": { \"name\": \"general\", \"is_public\": true, \"members\": { \"raphaelj\": true } }, \"cats\": { \"name\": \"cats\", \"is_public\": false, \"members\": { \"raphaelj\": true, \"devnull\": true } } }, \"messages\": { \"general\": { \"0\": { \"created_at\": \"2017-03-16t19:20:30.45z\", \"sender\": \"raphaelj\", \"text\": \"hello!\" } } } }defining objectslet's start defining schema users. object schemas are defined using fbobject():val user = fbobject( // required fields \"created_at\" := fbdatetime(), // iso 8601 date + , without timezome \"email\" := fbemail(), // valid email address \"full_name\" := fbstring(maxlength=(256)), // string is 256 characters less // optional fields \"birth_date\" ?= fbdate(), // iso 8601 date, without \"sex\" ?= fbenum(\"male\", \"female\"), // should either \"male\" \"female\" \"website\" ?= fburl() // valid url starts 'http' 'https')fbobjects accept list fields input. fields be either required (:=) optional (?=). following fields are available ( fields parameters):field typedescriptionexamplesfbboolean()either value true falsetrue, falsefbdate()iso 8601 formated date\"2017-12-25\"fbdatetime(hastimeoffset=false)iso 8601 formated date time. hastimeoffset is set true (default is false), accepts time offset different utc.\"2017-12-25t01:12:32.35z\", \"2017-12-25t01:13:32.35+01:00\" ( hastimeoffset is set true).fbemail()valid email addresses\"raphael@bloomlife.com\"fbenum(option1, option2, ...) accepts listed valuesmale female defined fbenum(\"male\", \"female\")fbhexcolor()hexadecimal rgb color\"#abb987\", \"#abc\"fbnode() value12, \"hello world\", falsefbnumber(min=none, max=none) integral floating point numbers. min is none, should >= than value. max is none, should <= than value.0, 0.3145, 1 defined fbenum(min=(0), max=(1))fbstring(minlength = none, maxlength = none, regex = none) character string is least minlength characters long ( defined), most maxlength characters long ( defined) that matches given javascript regular expression ( defined). string ends ed that is least 3 characters long defined fbstring(minlength=(3), regex=(\"/ed$/\").fburl()url begin http:// https://.\"http://bloomlife.com\"object collectionssometimes, will to a collections objects the same schema, indentified an unique id. fbcollection() define collections. following example define users, rooms messages collections our example:val users = fbcollection(userid => user)note: empty collections firebase are automatically removed the database. you to allow object contain empty collection, define collection an optional field (.e. using ?=).add constraints nodes can add access validation constraints any schema node (objects, fields collections) using readif(), writeif(), accessif() validateif() methods. matches .read, .write .validate constraints firebase rules have access the firebase rules variables. the following example, are going redefine users collection defined earlier new constraints:val users = fbcollection( userid => user. // checks the username the user object matches username the collection. validateif((newdate / \"userid\").asstring === userid). // allows users modify own account. writeif(username === auth.uid) )methoddescriptionreadif()allows object be read the condition is evaluated truewriteif()allows object be created/modified the condition is evaluated trueaccessif()combines readif() writeif()validateif()allows object be created/modified the condition is evaluated true"
}