{
	"_id": "14154440",
	"site": "https://github.com/donutloop/trixie",
	"title": " Trixie is a lightweight HTTP request router for go",
	"author": "loppers92",
	"date": "2017-06-13T13:34:47.143Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"go"
		]
	},
	"content": "readme.md is trixie (tree multiplexer)?trixie is lightweight http request router go 1.7+. difference between default mux go's net/http package this mux is, 's supports variables regex the routing pattern matches against request method. also based a tree.handler handler is simple standard http.handlerfunc(w http.responsewriter, r *http.request) routing rules examples valid url patterns are:/post//post/:number/post/:number/page/:number/post/:string/images/#([0-9]{1,})/favicon.ico/:string/:string/:number/:numberparameter elements starting : indicate parameter segment the path.regex elements starting # indicate regex segment the path.routing priority priority rules the router are simple. regex segment has highest priority parameter segment has middle priority static path segment has lowest priority. instance:router.(\"/#([0-9]{1,})/post\", handler) // highest priorityrouter.(\"/:string/post\", handler) // middle priorityrouter.(\"/home/post\", handler) // lowest priorityexample (method & regex): package main import ( \"fmt\" \"github.com/donutloop/trixie\" \"net/http\" ) func main() { r := trixie.classic() //url: http://localhost:8081/user/1 r.(\"/user/#([0-9]){1,}\", userhandler) err := http.listenandserve(\":81\", r); err != nil { fmt.println(err) } } func userhandler(rw http.responsewriter, req *http.request) { param := trixie.getrouteparameters(req) // value regex segment rw.write([]byte(param[\"seg1\"])) } example (method & string parameter): package main import ( \"fmt\" \"github.com/donutloop/trixie\" \"net/http\" ) func main() { r := trixie.classic() //url: http://localhost:81/user/1 r.(\"/user/:string\", userhandler) err := http.listenandserve(\":81\", r); err != nil { fmt.println(err) } } func userhandler(rw http.responsewriter, req *http.request) { param := trixie.getrouteparameters(req) // value parameter segment rw.write([]byte(param[\"seg1\"])) } example (method & number parameter): package main import ( \"fmt\" \"github.com/donutloop/trixie\" \"net/http\" ) func main() { r := trixie.classic() //url: http://localhost:81/user/1 r.(\"/user/:number\", userhandler) err := http.listenandserve(\":81\", r); err != nil { fmt.println(err) } } func userhandler(rw http.responsewriter, req *http.request) { param := trixie.getrouteparameters(req) // value parameter segment rw.write([]byte(param[\"seg1\"])) } example (added middleware router):\"easy_middleware\" is part the router packagepackage mainimport ( \"fmt\" \"github.com/donutloop/easy-middleware\" \"github.com/donutloop/trixie\" \"github.com/donutloop/trixie/middleware\" \"net/http\")func main() { r := trixie.classic() stack := []middleware.middleware{ middleware.middleware(easy_middleware.nocache()), } r.(stack...) //url: http://localhost:81/user/1 r.(\"/home\", homehandler) err := http.listenandserve(\":81\", r); err != nil { fmt.println(err) }}func homehandler(rw http.responsewriter, req *http.request) { rw.write([]byte(\"hello world!\"))} example (added middleware one handler):\"easy_middleware\" is part the router packagepackage mainimport ( \"fmt\" \"github.com/donutloop/easy-middleware\" \"github.com/donutloop/trixie\" \"github.com/donutloop/trixie/middleware\" \"net/http\")func main() { r := trixie.classic() stack := middleware.stack(middleware.middleware(easy_middleware.nocache())) //url: http://localhost:81/user/1 r.handlefunc(http.methodget, \"/home\", stack.thenfunc(homehandler)) err := http.listenandserve(\":81\", r); err != nil { fmt.println(err) }}func homehandler(rw http.responsewriter, req *http.request) { rw.write([]byte(\"hello world!\"))}"
}