{
	"_id": "14527807",
	"site": "https://github.com/paragonie/sodium_compat#resubmit",
	"title": " Sodium_compat, a Pure PHP implementation of libsodium (stable release)",
	"author": "CiPHPerCoder",
	"date": "2017-06-13T13:23:08.845Z",
	"tags": {
		"categories": [
			"opensource",
			"libsodium",
			"php",
			"cryptography-library",
			"security"
		],
		"languages": [
			"php"
		]
	},
	"content": "readme.md sodium compatsodium compat is pure php polyfill the sodium cryptography library(libsodium), core extension php 7.2.0+ otherwise available pecl. library tentativeley supports php 5.2.4 - 7.x (latest), officially supports non-eol'd versions php. you the php extension installed, sodium compat opportunistically transparently the php extension instead our implementation.important! cryptography library has been formally audited an independent thirdparty specializes cryptography cryptanalysis. you require such audit before can sodium_compat your projects have funds such audit, please open issue contactsecurity paragonie dot com we help the ball rolling. you'd to learn more the defensive security measures 've taken,please read cryptographically secure php development.installing sodium compat you're using composer:composer require paragonie/sodium_compat you're using composer, download release tarball( should signed our gnupg public key), extract contents, include autoload.php script your project.<?phprequire_once \"/path//sodium_compat/autoload.php\";supportcommercial support libsodium is available multiple vendors. you need help using sodium_compat one your projects, contact paragon initiative enterprises.non-commercial report be facilitated through github issues. offer guarantees our availability resolve questions integrating sodium_compat third-partysoftware free, will strive fix bugs (security-related otherwise) our library.using sodium compattrue polyfill you're using php 5.3.0 newer do have pecl extension installed, can use standard ext/sodium api features -is the polyfill work magic.<?phprequire_once \"/path//sodium_compat/autoload.php\";$alice_kp = \\sodium\\crypto_sign_keypair();$alice_sk = \\sodium\\crypto_sign_secretkey($alice_kp);$alice_pk = \\sodium\\crypto_sign_publickey($alice_kp);$message = ' is test message.';$signature = \\sodium\\crypto_sign_detached($message, $alice_sk); (\\sodium\\crypto_sign_verify_detached($signature, $message, $alice_pk)) { echo 'ok', php_eol;} else { throw exception('invalid signature');} polyfill does expose api php < 5.3, if have phpextension installed already.since doesn't require namespace, api is exposed php 5.2.general- polyfill your users are php < 5.3, you to write code will whether not pecl extension is available, 'll to theparagonie_sodium_compat class most your libsodium needs. above example, written general :<?phprequire_once \"/path//sodium_compat/autoload.php\";$alice_kp = paragonie_sodium_compat::crypto_sign_keypair();$alice_sk = paragonie_sodium_compat::crypto_sign_secretkey($alice_kp);$alice_pk = paragonie_sodium_compat::crypto_sign_publickey($alice_kp);$message = ' is test message.';$signature = paragonie_sodium_compat::crypto_sign_detached($message, $alice_sk); (paragonie_sodium_compat::crypto_sign_verify_detached($signature, $message, $alice_pk)) { echo 'ok', php_eol;} else { throw exception('invalid signature');}generally: you replace \\sodium\\ paragonie_sodium_compat::, code already written the libsodium php extension should with polyfill without additional code changes.since version 0.7.0, have own namespaced api (paragonie\\sodium\\*) allow brevity software uses php 5.3+. is useful you to our file cryptographyfeatures without writing paragonie_sodium_file every . this is exposed php < 5.3, if project supports php < 5.3, the underscore method instead. learn to libsodium, read using libsodium php projects.php 7.2 polyfill per second vote the libsodium rfc,php 7.2 uses sodium_* instead \\sodium\\*.<?phprequire_once \"/path//sodium_compat/autoload.php\";$alice_kp = sodium_crypto_sign_keypair();$alice_sk = sodium_crypto_sign_secretkey($alice_kp);$alice_pk = sodium_crypto_sign_publickey($alice_kp);$message = ' is test message.';$signature = sodium_crypto_sign_detached($message, $alice_sk); (sodium_crypto_sign_verify_detached($signature, $message, $alice_pk)) { echo 'ok', php_eol;} else { throw exception('invalid signature');}help, sodium_compat is slow! can make fast? are three ways make fast: php 7.2 it comes , and advantage libsodium the core.install libsodium php extension pecl. if previous options are available you:verify the processor 're using actually implements constant- multiplication.sodium_compat does, it must trade speed order attain cross-platform security. if are 100% certain your processor is safe, can set paragonie_sodium_compat::$fastmul = true;without harming security your cryptography keys. your processor isn't safe, decide whether want speed security you 't both.api coveragemainline nacl featurescrypto_auth()crypto_auth_verify()crypto_box()crypto_box_open()crypto_scalarmult()crypto_secretbox()crypto_secretbox_open()crypto_sign()crypto_sign_open()pecl libsodium featurescrypto_aead_chacha20poly1305_encrypt()crypto_aead_chacha20poly1305_decrypt()crypto_aead_chacha20poly1305_ietf_encrypt()crypto_aead_chacha20poly1305_ietf_decrypt()crypto_aead_xchacha20poly1305_ietf_encrypt()crypto_aead_xchacha20poly1305_ietf_decrypt()crypto_box_xchacha20poly1305()crypto_box_xchacha20poly1305_open()crypto_box_seal()crypto_box_seal_open()crypto_generichash()crypto_generichash_init()crypto_generichash_update()crypto_generichash_final()crypto_kx()crypto_secretbox_xchacha20poly1305()crypto_secretbox_xchacha20poly1305_open()crypto_shorthash()crypto_sign_detached()crypto_sign_verify_detached() advanced users :crypto_stream()crypto_stream_xor() utilities (e.g. crypto_*_keypair())cryptography primitives providedx25519 - elliptic curve diffie hellman curve25519ed25519 - edwards curve digital signature algorithm curve25519xsalsa20 - extended-nonce salsa20 stream cipherchacha20 - stream cipherxchacha20 - extended-nonce chacha20 stream cipherpoly1305 - polynomial evaluation message authentication code modulo 2^130 - 5blake2b - cryptographic hash functionsiphash-2-4 - fast hash, not collision-resistant; ideal hash tables.features excluded this polyfill\\sodium\\memzero() - although expose api endpoint, can't reliablyzero buffers php. you the php extension installed, sodium_compat use native implementation zero the string provided. otherwise will throw error (provided part the random_compat polyfill).\\sodium\\crypto_pwhash() - 's feasible polyfill scrypt argon2 php get reasonable performance. users feel motivated selectparameters downgrade security avoid denial service (dos) attacks. only winning move is to play."
}