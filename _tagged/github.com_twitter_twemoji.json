{
	"_id": "14413558",
	"site": "https://github.com/twitter/twemoji",
	"title": "Twitter Emoji (Twemoji)",
	"author": "taylorbuley",
	"date": "2017-06-13T13:56:32.275Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript",
			"html",
			"shell"
		]
	},
	"content": "readme.md twitter emoji (twemoji) simple library provides standard unicode emoji support across platforms.twemoji v2.3 adheres the unicode 10.0 draft spec supports emoji 5.0 draft spec twemoji library offers support 2,661 emojis, including skin tone gender modifiers.cdn support folks at maxcdn graciously provided cdn support. the following the <head> tag your html document(s):<script src=\"//twemoji.maxcdn.com/2/twemoji.min.js?2.3.0\"></script>breaking changes v2tl;dr: 's variant anymore, callbacks receive transformed iconid in cases rawtext too. are few potentially breaking changes twemoji version 2: parse invoked function signature is (iconid, options) instead (icon, options, variant) attributes function receives (rawtext, iconid) instead (icon, variant) default remote protocol is https regardless whether current site is http even file default png icon size is 72 pixels there are other png assets 16 32. order access latest assets need specify folder 2/72x72 2/svg.everything else is pretty much same, if were using defaults, you need do is add version 2/ before twemoji.js file were using.apifollowing are the methods exposed the twemoji namespace.twemoji.parse( ... ) v1 is main parsing utility has 3 overloads per parsing type. are mainly kinds parsing: string parsing dom parsing.each them accepts callback generate image source an options object parsing info.here is walkthrough all parsing possibilities:string parsing (v1)given generic string, replaces emoji an <img> tag.while can used inject emoji via image tags innerhtml, please note this method does sanitize string prevent malicious code being executed. an example, the text contains <script> tag, will be converted &lt;script&gt; since 's of method's scope prevent kind attacks.however, already sanitized strings, method be considered safe enough. please dom parsing security is of major concerns.twemoji.parse(' \\u2764\\ufe0f emoji!');// produce/* <img class=\"emoji\" draggable=\"false\" alt=\"\" src=\"https://twemoji.maxcdn.com/36x36/2764.png\"> emoji!*/string parsing + callback a callback is passed, value the src attribute be value returned the callback.twemoji.parse( ' \\u2764\\ufe0f emoji!', function(icon, options, variant) { return '/assets/' + options.size + '/' + icon + '.gif'; });// produce/* <img class=\"emoji\" draggable=\"false\" alt=\"\" src=\"/assets/36x36/2764.gif\"> emoji!*/ default, options.size parameter be string \"36x36\" the variant be optional \\ufe0f char is usually ignored default. your assets include distinguish between \\u2764\\ufe0f \\u2764, might to such variable.string parsing + callback returning falsy the callback returns \"falsy values\" such null, undefined, 0, false, an empty string, nothing change that specific emoji.var = 0;twemoji.parse( 'emoji, m\\u2764\\ufe0fn am\\u2764\\ufe0fur', function(icon, options, variant) { (i++ === 0) { return; // changes made call } return '/assets/' + icon + options.ext; });// produce/*emoji, mn am<img class=\"emoji\" draggable=\"false\" alt=\"\" src=\"/assets/2764.png\">ur*/string parsing + object case object is passed second parameter, passed options object reflect properties.twemoji.parse( ' \\u2764\\ufe0f emoji!', { callback: function(icon, options) { return '/assets/' + options.size + '/' + icon + '.gif'; }, size: 128 });// produce/* <img class=\"emoji\" draggable=\"false\" alt=\"\" src=\"/assets/128x128/2764.gif\"> emoji!*/dom parsing contrast string parsing, the argument is htmlelement, generated image tags replace emoji are inside #text nodes without compromising surrounding nodes listeners, completely avoiding usage innerhtml. security is major concern, parsing be considered safest option with slight performance penalty due dom operations are inevitably costly.var div = document.createelement('div');div.textcontent = ' \\u2764\\ufe0f emoji!';document.body.appendchild(div);twemoji.parse(document.body);var img = div.queryselector('img');// note div is preservedimg.parentnode === div; // trueimg.src; // https://twemoji.maxcdn.com/36x36/2764.pngimg.alt; // \\u2764\\ufe0fimg.classname; // emojiimg.draggable; // false other overloads described string are available exactly same for dom parsing.object parameterhere's list properties accepted the optional object can passed the parse function. { callback: function, // default common replacer attributes: function, // default returns {} base: string, // default maxcdn ext: string, // default \".png\" classname: string, // default \"emoji\" size: string|number, // default \"36x36\" folder: string // case 's specified // replaces .size info, any }callback function invoke order generate image src(s). default is function the following :function imagesourcegenerator(icon, options) { return ''.concat( options.base, // default twitter inc. cdn options.size, // default \"36x36\" string '/', icon, // found emoji code point options.ext // default \".png\" );}attributes (v1) function invoke order generate additional, custom attributes the image tag. default is function the following :function attributescallback(icon, variant) { return { title: 'emoji: ' + icon + variant };}event handlers cannot specified via method, twemoji-provided attributes (src, alt, classname, draggable) cannot re-defined.base default url is same twemoji.base, if modify former, will reflect default all parsed strings nodes.ext default image extension is same twemoji.ext is \".png\". you modify former, will reflect default all parsed strings nodes.classname default class each generated image is emoji. is possible specify different through property.size default asset size is same twemoji.size is \"36x36\". you modify former, will reflect default all parsed strings nodes.folder case don't to specify size the image. is possible choose folder, in case svg emoji.twemoji.parse(genericnode, { folder: 'svg', ext: '.svg'}); will generate urls such https://twemoji.maxcdn.com/svg/2764.svg instead using specific size based image.utilitiesbasic utilities / helpers convert code points javascript surrogates vice versa.twemoji.convert.fromcodepoint() a given hex codepoint, returns utf-16 surrogate pairs.twemoji.convert.fromcodepoint('1f1e8'); // \"\\ud83c\\udde8\"twemoji.convert.tocodepoint() given utf-16 surrogate pairs, returns equivalent hex codepoint. twemoji.convert.tocodepoint('\\ud83c\\udde8\\ud83c\\uddf3'); // \"1f1e8-1f1f3\" twemoji.convert.tocodepoint('\\ud83c\\udde8\\ud83c\\uddf3', '~'); // \"1f1e8~1f1f3\"tipsinline styles you'd to size emoji according the surrounding text, can add following css your stylesheet:img.emoji { height: 1em; width: 1em; margin: 0 .05em 0 .1em; vertical-align: -0.1em;} will sure emoji derive width height the font-size the text 're shown . it adds a little bit space before after each emoji, pulls upwards little bit better optical alignment.utf-8 character set properly support emoji, document character set must set utf-8. can done including following meta tag the document <head><meta charset=\"utf-8\">exclude characters (v1) exclude certain characters being replaced twemoji.js, call twemoji.parse() a callback, returning false the specific unicode icon. example:twemoji.parse(document.body, { callback: function(icon, options, variant) { switch ( icon ) { case 'a9': // © copyright case 'ae': // ® registered trademark case '2122': // trademark return false; } return ''.concat(options.base, options.size, '/', icon, options.ext); }});build you'd to test /or contribute please follow instructions.# clone repogit clone https://github.com/twitter/twemoji.gitcd twemoji# install dependenciesnpm install# generate 2/twemoji*.js files./2/utils/generate you'd to test /or propose changes the v2 library please change ./2/utils/generate file its end that everything be generated properly once launched.attribution requirements an open source project, attribution is critical a legal, practical motivational perspective our opinion. graphics are licensed under cc- 4.0 has pretty guide best practices attribution.however, consider guide bit onerous as project, accept mention a project readme an '' section footer a website. mobile applications, common place be the settings/ section ( example, the mobile twitter application settings->->legal section). would consider mention the html/js source sufficient .community projectstwemoji awesome @ellekasai: twemoji using css classes ( font awesome).twemoji ruby @jollygoodcode: twemoji ruby.twemoji pencil @nathanielnw: twemoji pencil.frwtwemoji - twemoji dotnet @frenchw: twemoji any dotnet project (c#, asp.net ...).emojiawesome - twemoji yellow @datenstrom: twemoji yellow cms.emojipanel twitter @danielbovey: insert twemoji your tweets twitter.com.twitter color emoji font @bderickson: twemoji your system default font linux & os x.emojica @xoudini: ios framework allowing to replace standard emoji strings twemoji.committers contributorsbryan haggerty (twitter)tom wuttke (ex-twitter)andrea giammarchi (ex-twitter)joen asmussen (wordpress)marcus kazmierczak (wordpress) goal this project is simply provide emoji everyone. definitely welcome improvements fixes, we may merge every pull request suggested the community due the simple nature the project. rules contributing are available the contributing.md file.thank to of contributors.licensecopyright 2017 twitter, inc other contributorscode licensed under mit license: http://opensource.org/licenses/mitgraphics licensed under cc- 4.0: https://creativecommons.org/licenses//4.0/"
}