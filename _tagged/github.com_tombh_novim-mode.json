{
	"_id": "14526918",
	"site": "https://github.com/tombh/novim-mode",
	"title": "Novim-mode: Use Vim like a 'conventional' editor",
	"author": "tombh",
	"date": "2017-06-13T14:09:47.358Z",
	"tags": {
		"categories": [
			"opensource",
			"vim-plugin",
			"keyboard-shortcuts",
			"texteditor"
		],
		"languages": [
			"vim script",
			"ruby"
		]
	},
	"content": "readme.md vim keybindings mode , indeed many, may this is counter-productive even sacrilegious. vim is lot more just keybinding paradigm; firstly has of richest plugin ecosystems any editor, also is --if the -- ubiquitous text editor 's been battle tested over 25 years. are more reasons use than merely famous shortcut vocabulary. plugin is attempt expose everything else vim without overhead cultivating normal mode fluency. is a rebellion, is merely manifestation the distinction between vim editor vim keybinding paradigm. please not dismiss normal mode because plugin exists, vimtutor try, modal editing is popular a reason.vim itself already has support something similar its optional mswin.vim config file. however still assumes necessity normal mode such heritage shift+insert-style combinations. plugin however, attempts avoid normal mode unless absolutely necessary, for interacting the nerdtree buffer, wherein insert mode has purpose. name novim-mode is nod the prevalence 'vim-mode' plugins extensions available environments outside editor, such web browsers. the same that love vim has led efforts export elsewhere, 'novim-mode' is love 'conventional' editing imported vim.installation your favourite plugin manager, eg, vim-plug;plug 'tombh/novim-mode'usage keybindings should as might expect , say atom sublime text; shift+arrow select ctrl+c/v copy/paste. don't expect vim completely bend your , it is still useful familiarise yourself some vim's basic concepts. instance may occasion find yourself stuck a particular vim mode, when pasting text without 'paste mode' inserted text trigger random mappings. such case ctrl+q may kill vim you'll need find way getting normal mode typing :q <return>. such is life vim, plugin is highly unlikely ever change . (btw conventional pasting is by default, to exit errant 'paste mode' :set nopaste.) you are to vim, perhaps only remaining confusion installing plugin be where files when open ones. question be answered vim's concept 'buffers'. may wish install something vim-buftabline give familiar list open files along top the editor.keybindingsmany terminals default intercepting ctrl+s suspend output, so will need disable behaviour. terminals also bind ctrl+q undo suspend, useful, you also need unmap , or change mapping this plugin quitting vim.ctrl-based shortcuts are paired uppercase letters here vimdoes recognise difference between cases using ctrl combinations documenting uppercase implies something this distinction.general editor shortcutsctrl+n: open new file.ctrl+o: open existing file.ctrl+s: saves current file.ctrl+g: goto line.alt+;: vim command prompt.alt+o: replaces native ctrl+o give -off normal mode commands.pane controlsalt+arrow: change pane/buffer focus.ctrl+w: closes current pane- thing. closes associated quickfix location panes.selecting, copy pasteshift+arrow: select textctrl+c: copy selection copy line no selection.ctrl+x: cut selection cut line no selection.ctrl+v: paste current selection.ctrl+: select .ctrl+d: select word under cursor. something vim-multicursors multi cursor support.ctrl+l: select line under cursor, repetition selects more lines.indentingtab alt+]: indent current line selected text. [tab currently broken]shift+tab alt+[: unindent current line selected text.finding, replacingctrl+f: find text. text is selected selection is searched .f3 shift+f3: find next previous occurences.ctrl+h: find replace. [find] [replace] are prepopulated.undoingctrl+z ctrl+u: undo.ctrl+y: redo. text manipulation tricksctrl+left/right: move cursor per word (works selection well).ctrl+alt+k: delete current line.ctrl+alt+d: duplicate current line.ctrl+/down: move current line selected text /down.interoperability adding new binding your own needs normal mode, should <c-o> before targeted command, example;\" ensure ctrlp doesn't overridden autocomplete insertmodeinoremap <c-p> <c-o>:ctrlp<cr>overriding disabling shortcuts this plugin be done several ways. simplest is use:let g:novim_mode_use_shortcuts = 0inoremap ... custom mapping ...call novim_mode#startnovimmode()shortcuts are grouped roughly under headings described above, you may able disable of following:let g:novim_mode_use_general_app_shortcuts = 1let g:novim_mode_use_pane_controls = 1let g:novim_mode_use_copypasting = 1let g:novim_mode_use_indenting = 1let g:novim_mode_use_finding = 1let g:novim_mode_use_undoing = 1let g:novim_mode_use_text_tricks = 1\" small fixes home pageup behaviourlet g:novim_mode_use_editor_fixes = 1\" allows scrolling through wrapped lines visual line a let g:novim_mode_use_better_wrap_navigation = 1lastly can unmap mapping using commands such nunmap, iunmap, sunmap, etc.known issues seems be bug where shift+tab not tab works indenting during selection mode. again may fixed simulating selection mode visual mode the future. using novim_mode_use_better_wrap_navigation, end key does go end a visual line, to end the physically represented line.mapping <ctrl+m> internally means mapping <return>. is throwback vim's days a pure terminal application.ctrl+backspace internally represents <ctrl+h>, can annoying. again is throwback vim's days a pure terminal application."
}