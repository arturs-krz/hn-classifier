{
	"_id": "14337356",
	"site": "https://github.com/buildertools/dynamodb-snapshot-containers",
	"title": " Local DynamoDB Snapshots as Containers",
	"author": "zerotolerance",
	"date": "2017-06-13T13:08:16.789Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"shell"
		]
	},
	"content": "readme.md dynamodb-snapshot-containersfunctional testing stateful system is challenging your tests typically mutate state the system under test. leads all sorts \"dirty state\" problems where tests fail the system under test was started a known state. matter is made much worse your software leverages managed services proprietary database technology dynamodb. love dynamodb, introducing network dependency development environments functional tests is bad idea. aws released local dynamodb devkit sometime ago. project both wraps dynamodb devkit a container provides mechanism capturing snapshots can attached dependent services test to launch well known states.dependencies posix shelldocker ( linux containers)getting started you're familiar the aws cli you write script build the state tests require. is provided example-script.sh:#!/bin/sh# add known tableaws dynamodb create-table \\ --endpoint-url http://localhost:8000 \\ --region -west-2 \\ --table-name acl \\ --attribute-definitions attributename=customer,attributetype=s attributename=resource,attributetype=s \\ --key-schema attributename=customer,keytype=hash attributename=resource,keytype=range \\ --provisioned-throughput readcapacityunits=5,writecapacityunits=5# add known stateaws dynamodb put-item \\ --endpoint-url http://localhost:8000 \\ --region -west-2 \\ --table-name acl \\ --item '{\"customer\": {\"s\": \"bob\"}, \"resource\": {\"s\": \"account-1234\"}, \"access\": {\"s\": \"admin\"}}'aws dynamodb put-item \\ --endpoint-url http://localhost:8000 \\ --region -west-2 \\ --table-name acl \\ --item '{\"customer\": {\"s\": \"bob\"}, \"resource\": {\"s\": \"account-4321\"}, \"access\": {\"s\": \"user\"}}'aws dynamodb put-item \\ --endpoint-url http://localhost:8000 \\ --region -west-2 \\ --table-name acl \\ --item '{\"customer\": {\"s\": \"ray\"}, \"resource\": {\"s\": \"account-4321\"}, \"access\": {\"s\": \"admin\"}}' your state described a script can the build-snap.sh script write state a dynamodb container save state use later. command uses example-script.sh build database state store results a docker repository named: myproject/db-test-suite:acl-case2. image be tagged an author a message provided the second third arguments../build-snap.sh example-script.sh awesomeproject/db-test-suite:acl-case2 \"jeff@allingeek.com\" \"acl project testing: 2 admin, 1 user\"using snapshots snapshots are created run port 8000 inside containers. you to the aws cli explore and verify it works run:docker run -d -p 8000:8000 --name dynamo-example <snapshot_repository>aws dynamodb list-tables --endpoint-url http://localhost:8000 --region -west-2 your aws cli environment is configured correctly aws command list tables you created your script. snapshots are much more interesting you them service dependencies ci/cd pipelines functional testing.license repository contains vendored copy https://s3--west-2.amazonaws.com/dynamodb-local/dynamodb_local_latest.tar.gz. vendored copy has been modified any form. an licences associated that source its dependencies are included. project makes copyright license assertions that material. source outside the dynamodb_local_latest directory is licensed under mit ( license."
}