{
	"_id": "14437536",
	"site": "https://github.com/harjot-oberai/MaterialShadows",
	"title": "[Android] Material Shadows: A library for seamlessly integrating shadows",
	"author": "dry_sailor",
	"date": "2017-06-13T13:55:34.219Z",
	"tags": {
		"categories": [
			"opensource",
			"android",
			"material",
			"shadows",
			"library",
			"convex-hull",
			"graham-scan-algorithm"
		],
		"languages": [
			"java"
		]
	},
	"content": "readme.md materialshadows library seamlessly integrating material shadows. library takes existing material shadows next level adding following features :convex shadows : shadows are only rectangular circular, can any convex shape depending the view its content.support shadow offsets : library allows developers set x y offset the shadows.support shadow intensity : library has support setting shadow intensity via shadowalpha attribute.shadows semi-transparent views : library allows shadows semi-transparent views.support async shadow calculations : library allows operations be async avoid blocking ui thread long calculations.shadow animations : library supports fade animation shadow.usage add following dependency your app's build.gradledependencies { compile 'com.sdsmdg.harjot:materialshadows:1.2.5'} does work ? materialshadowviewwrapper is extension relative layout. materialshadowframelayoutwrapper is extension framelayout. any of as per convenience. the child views through same process generating shadow given below : a bitmap is generated the drawing cache the view. bitmap is traversed pixel pixel remove transparent pixels get list points corresponding the actual outline the content the view.since points corresponding outline may a concave path, hence grahamscan algorithm is used generate convex hull the outline points. path is created the points the resulting convex hull. path is passed a customviewoutlineprovider object is later attached the view itself.hence get convex shadow any type view based its content.p.s. : the calculations related graham scan are done asynchronously default. behavior be controlled calculateasync parameter. (thanks yaroslav!)example usage 1 (simple)xml<com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"> <imageview android:layout_width=\"130dp\" android:layout_height=\"130dp\" android:elevation=\"5dp\" android:src=\"@drawable/poly\" /></com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper>resultexample usage 2 (offset)xml<com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:shadowoffsetx=\"-15\" app:shadowoffsety=\"30\"> <imageview android:layout_width=\"130dp\" android:layout_height=\"130dp\" android:elevation=\"10dp\" android:src=\"@drawable/poly\" /></com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper>resultexample usage 3 (shadow intensity)xml<com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:shadowoffsetx=\"-15\" app:shadowoffsety=\"30\" app:shadowalpha=\"0.9\"> <imageview android:layout_width=\"130dp\" android:layout_height=\"130dp\" android:elevation=\"10dp\" android:src=\"@drawable/poly\" /></com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper>resultexample usage 4 (semi-transparent views)xml<com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:shadowoffsetx=\"-30\" app:shadowoffsety=\"30\"> <imageview android:layout_width=\"130dp\" android:layout_height=\"130dp\" android:elevation=\"10dp\" android:background=\"#55000000\" /></com.sdsmdg.harjot.materialshadows.materialshadowviewwrapper>resultusing materialshadows custom viewgroupssince shadowgenerator.java encapsulates the code related the generation convex shadows, is really easy plug convex shadows any custom viewgroup some platform viewgroup linearlayout etc.public class customshadowwrapper extends customviewgroup { shadowgenerator shadowgenerator; @override protected void onlayout(boolean changed, int l, int t, int r, int b) { super.onlayout(changed, l, t, r, b); (shadowgenerator == null) { shadowgenerator = shadowgenerator(, offsetx, offsety, shadowalpha, shouldshowwhenallready, shouldcalculateasync, shouldanimateshadow, animationduration); } shadowgenerator.generate(); } @override protected void ondetachedfromwindow() { super.ondetachedfromwindow(); (shadowgenerator != null) { shadowgenerator.releaseresources(); } } }note : sure define the 7 parameters required shadowgenerator, namely offsetx, offsety, shadowalpha, shouldshowwhenallready, shouldcalculateasync, shouldanimateshadow, animationduration the custom wrapper handle changes their values. case parameter value changes, offsetx, add following code inside setter method offsetx :public void setoffsetx(float offsetx) { .offsetx = offsetx; (shadowgenerator != null) { shadowgenerator.setoffsetx(offsetx); }} you to add custom xml attributes your customshadowwrapper class, add to attrs.xml (here) handle in customshadowwrapper class accordingly.<declare-styleable name=\"customshadowwrapper\"> <attr name=\"shadowoffsetx\" /> <attr name=\"shadowoffsety\" /> <attr name=\"shadowalpha\" /> <attr name=\"calculateasync\" /> <attr name=\"showwhenallready\" /> <attr name=\"animateshadow\" /> <attr name=\"animationduration\" /> </declare-styleable> materialshadowviewwrapper more details.documentationxml attributejava set methodsdescriptiondefault valueshadowoffsetxsetoffsetx(...)set x-offset the shadow0.0fshadowoffsetysetoffsetx(...)set y-offset the shadow0.0fshadowalphasetshadowalpha(...)set value shadow intensity (alpha)1.0fcalculateasyncsetshouldcalculateasync(...)set flag async shadow calculations.trueshowwhenallreadysetshowshadowswhenallready(...)set flag showing shadows all calculations are trueanimateshadowsetshouldanimateshadow(...)set flag shadow animationtrueanimationdurationsetanimationduration(...)set value shadow animation duration.300mslimitationssince bitmap is traversed pixel pixel, performance large views is bad. hence use the library is limited small views.currently shadow is generated for direct children the materialshadowviewwrapper. hence the desired views are placed inside linear layout some view group, each view must wrapped a seperate materialshadowviewwrapper materialshadowframelayoutwrapper a custom view group wrapper may implemented.each child materialshadowviewwrapper custom view group wrapper is assigned same offset shadow intensity. fine control every view's shadow is required it must wrapped inside own materialshadowviewwrapper materialshadowframelayoutwrapper.creditsyaroslav : implementation asynchronous calculations shadow animations.licensematerialshadows is licensed under mit license. view license."
}