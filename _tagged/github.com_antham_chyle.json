{
	"_id": "14443379",
	"site": "https://github.com/antham/chyle",
	"title": "Generate a changelog from a Git repository",
	"author": "kiyanwang",
	"date": "2017-06-13T13:55:21.107Z",
	"tags": {
		"categories": [
			"opensource",
			"git",
			"changelog",
			"changelog-generator",
			"github-releases",
			"jira-issue"
		],
		"languages": [
			"go",
			"shell",
			"other"
		]
	},
	"content": "readme.md chyle chyle produces changelog a git repository.usage it works ?setupexamplesdocumentationcontributeusagecreate new changelog according what is defined config.changelog creation follows process :1 - fetch commits2 - filter relevant commits3 - extract informations commits fields publish to fields4 - enrich extracted datas external apps5 - publish datasusage: chyle create [flags]global flags: --debug enable debugging it works ?chyle fetch range commits using given criterias a git repository. those commits can extract relevant datas commit message, author, so , and add to original payload. can afterwards needed, enrich payload various useful datas contacting external apps (shell command, apis, ....) finally, can publish you harvested ( an external api, stdout, ....). can mix steps together, avoid , combine , it's to .setupdownload release page according your architecture chyle binary : https://github.com/antham/chyle/releases need afterwards configure each module through environments variables : are activated you configure least environment variable need work.examples will this repository : https://github.com/antham/test-git, created chyle testing purpose , you try examples it. don't forget clone repository adapt environment variables your configuration. a json ouput all merge commits a markdown ouput merge regular commits a json ouput all merge commits contact github issue api enrich payloadpopulate release github circleci a json ouput all merge commitscommands :export chyle_git_reference_from=a00ee81c109c8787f0ea161a776d2c9795f816cdexport chyle_git_reference_to=f617fb708dfa6fa290205615ea98c53a860e499dexport chyle_git_repository_path=/-local-path/test-gitexport chyle_matchers_type=mergeexport chyle_senders_stdout_format=\"json\"chyle createoutput :{ \"datas\": [ { \"authordate\": \"2017-05-10 22:24:40 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"committerdate\": \"2017-05-10 22:24:40 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"id\": \"f617fb708dfa6fa290205615ea98c53a860e499d\", \"message\": \"merge pull request #3 antham/test2test2\", \"type\": \"merge\" }, { \"authordate\": \"2017-05-10 22:22:03 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"committerdate\": \"2017-05-10 22:22:03 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"id\": \"8fdfae00cbcc66936113a60f5146d110f2ba3c28\", \"message\": \"merge pull request #1 antham/testtest\", \"type\": \"merge\" } ], \"metadatas\": {}} a markdown ouput merge regular commitscommands :export chyle_git_reference_from=a00ee81c109c8787f0ea161a776d2c9795f816cdexport chyle_git_reference_to=f617fb708dfa6fa290205615ea98c53a860e499dexport chyle_git_repository_path=/-local-path/test-gitexport chyle_senders_stdout_format=\"template\"export chyle_senders_stdout_template='{{ range $key, $value := .datas }}{{ $value.id }} => **{{ regexfind \".*?\" $value.message | trim }}** *({{ $value.authorname }} - {{ $value.authordate | date \"2006-01-02 15:04:05\" }})*{{ end }}'chyle createoutput :f617fb708dfa6fa290205615ea98c53a860e499d => **merge pull request #3 antham/test2** *(anthony hamon - 2017-05-29 02:08:37)*d8106fffee242f5b6394a103059b4064a83fcf3b => **whatever** *(antham - 2017-05-29 02:08:37)*e0a746c906fba7e2462f5717322b9eb55aca3943 => **whatever** *(antham - 2017-05-29 02:08:37)*118ad33a1d4ffc66bbeb74a1aba7524ef192ae62 => **whatever** *(antham - 2017-05-29 02:08:37)*78dcf412cc21d4054e06c534876200a89c04622e => **whatever** *(antham - 2017-05-29 02:08:37)*44fb3316ea67298df5a2b6fbb43795990575ec32 => **whatever** *(antham - 2017-05-29 02:08:37)*8fdfae00cbcc66936113a60f5146d110f2ba3c28 => **merge pull request #1 antham/test** *(anthony hamon - 2017-05-29 02:08:37)* a json ouput all merge commits contact github issue api enrich payloadcommands :export chyle_git_reference_from=a00ee81c109c8787f0ea161a776d2c9795f816cdexport chyle_git_reference_to=f617fb708dfa6fa290205615ea98c53a860e499dexport chyle_git_repository_path=/-local-path/test-gitexport chyle_matchers_type=mergeexport chyle_extractors_githubissueid_origkey=messageexport chyle_extractors_githubissueid_destkey=githubissueidexport chyle_extractors_githubissueid_reg=\"\\#(\\d+)\"export chyle_decorators_githubissue_repository_name=test-gitexport chyle_decorators_githubissue_credentials_oauthtoken=tokenexport chyle_decorators_githubissue_credentials_owner=anthamexport chyle_decorators_githubissue_keys_number_destkey=ticketnumberexport chyle_decorators_githubissue_keys_number_field=numberexport chyle_decorators_githubissue_keys_commentnumber_destkey=commentnumberexport chyle_decorators_githubissue_keys_commentnumber_field=commentsexport chyle_senders_stdout_format=\"json\"chyle createoutput :{ \"datas\": [ { \"authordate\": \"2017-05-10 22:24:40 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"commentnumber\": 0, \"committerdate\": \"2017-05-10 22:24:40 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"githubissueid\": 3, \"id\": \"f617fb708dfa6fa290205615ea98c53a860e499d\", \"message\": \"merge pull request #3 antham/test2test2\", \"ticketnumber\": 3, \"type\": \"merge\" }, { \"authordate\": \"2017-05-10 22:22:03 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"commentnumber\": 0, \"committerdate\": \"2017-05-10 22:22:03 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"githubissueid\": 1, \"id\": \"8fdfae00cbcc66936113a60f5146d110f2ba3c28\", \"message\": \"merge pull request #1 antham/testtest\", \"ticketnumber\": 1, \"type\": \"merge\" } ], \"metadatas\": {}}populate release github circlecilet's create script release.sh#!/usr/bin/env bashset -e### functionsfunction setprevioustag { [ ! -n \"$1\" ]; previous_tag=\"$(git describe --abbrev=0 --always --tags $2^)\" fi [[ $previous_tag =~ ^[0-9a-f]{40} ]]; previous_tag_sha=\"$(git rev-list --max-parents=0 head|head -n 1)\" previous_tag=\" commit\" return fi previous_tag_sha=\"$(git rev-parse $previous_tag^{commit})\"}function setcurrenttag { local tag=\"\" [ -n \"$1\" ]; tag=\"$1\" fi [ -n \"$2\" ]; tag=\"$2\" fi [ ! -n \"$tag\" ]; echo \" must declare circle_tag current_tag variable\" exit 1 fi current_tag_sha=\"$(git rev-parse $tag^{commit})\" current_tag=\"$tag\"}echo \"-> setup environment variables\"cd \"$repository_path\"setcurrenttag \"$current_tag\" \"$circle_tag\"setprevioustag \"$previous_tag\" \"$current_tag\"export chyle_git_repository_path=$repository_pathexport chyle_git_reference_from=$previous_tag_shaexport chyle_git_reference_to=$current_tag_sha# setup matchers## pick merge commitsexport chyle_matchers_type=merge# setup decorators## setup github issue decorator### github issue id extractorexport chyle_extractors_githubissueid_origkey=messageexport chyle_extractors_githubissueid_destkey=githubissueidexport chyle_extractors_githubissueid_reg=\"\\#(\\d+)\"### github credentialsexport chyle_decorators_githubissue_credentials_oauthtoken=$github_tokenexport chyle_decorators_githubissue_credentials_owner=antham### git pathexport chyle_decorators_githubissue_repository_name=$circle_project_reponame### extract title fieldexport chyle_decorators_githubissue_keys_title_destkey=titleexport chyle_decorators_githubissue_keys_title_field=title# setup senders## setup github release### github credentialsexport chyle_senders_githubrelease_credentials_oauthtoken=$github_tokenexport chyle_senders_githubrelease_credentials_owner=antham### github release configexport chyle_senders_githubrelease_release_tagname=$circle_tagexport chyle_senders_githubrelease_release_update=trueexport chyle_senders_githubrelease_release_template='{{ range $key, $value := .datas }}{{ $value.id }} => **{{ $value.title | trim }}** *({{ $value.authorname }} - {{ $value.authordate | date \"2006-01-02 15:04:05\" }})*{{ end }}'### git pathexport chyle_senders_githubrelease_repository_name=$circle_project_reponame# generate changelogecho \"-> generating changelog between $previous_tag ($previous_tag_sha) $current_tag ($current_tag_sha)\" circleci (v1) add deployment section trigger build a tag is created ( need declare credentials envs inside circle settings project) :machine: environment: repository_path: $home/$circle_project_reponamedeployment: release: tag: /v[0-9]+(\\.[0-9]+)*/ owner: antham commands: - ./release.sh we create release github ( create tag the same ), it triggers circle build at end, chyle generates diff between tags populate release, check v1.0.0 release test-git.documentationdefault fieldsgeneral configmatchersextractorsdecoratorscustom api decoratorjira issue apigithub issue apishellenvironment variablesendersstdoutgithub release apicustom api senderhelptemplatedefault fieldsbelow have example, a json, a payload shows fields extracted default.{ \"datas\": [ { \"authordate\": \"2017-05-10 22:24:40 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"committerdate\": \"2017-05-10 22:24:40 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"id\": \"f617fb708dfa6fa290205615ea98c53a860e499d\", \"message\": \"merge pull request #3 antham/test2test2\", \"type\": \"merge\" } ], \"metadatas\": {}}general config need define , where repository stand which git range want target.namevaluechyle_git_repository_pathpath where repository standchyle_git_reference_fromgit reference starting range, be id, head a branchchyle_git_reference_togit reference ending range, be id, head a branchmatchersmatchers filters commits according criterias.namevaluechyle_matchers_typematch commit type, \"merge\" represents merge commit, \"regular\" represents usual commit ( merge)chyle_matchers_message regexp will matched against commit messagechyle_matchers_committer regexp will matched against committer field a commitchyle_matchers_author regexp will matched against author field a commitextractorsextractors defined which commit field extract datas, to extract under name store extracted value, can defined many extractors want. need define those 3 values below order set extractor, replace * a name convenient you.namevaluechyle_extractors_*_origkey commit field which want extract datas (id, authorname, authoremail, authordate, committername, committeremail, committermessage, type)chyle_extractors_*_destkey name the key will receive extracted valuechyle_extractors_*_reg regexp used extract datadecoratorsdecorators enrich changelog datas.custom api decorator can fetch custom api fetch data. you need define id will added calling api.namevaluechyle_extractors_customapiid_origkeyfield which you to extract idchyle_extractors_customapiid_destkeycustomapiidchyle_extractors_customapiid_reg regexp extract id need define token header will given calling api an url endpoint.namevaluechyle_decorators_customapi_endpoint_url's endpoint you remote api, {{id}} a placeholder interpolate id extracted before urlchyle_decorators_customapi_credentials_tokentoken submitted authorization header calling api extract data, need define everytime both \"destkey\" key a \"field\" key, replace * a name convenient you, can as many value you .namevaluechyle_decorators_customapi_keys_*_destkey name the key will receive extracted valuechyle_decorators_customapi_keys_*_field field extract your custom api response payload, dot notation extract deep value (eg: \"fields.summary\")jira issue api a to api documentation know you fetch this api., you need use extractor define \"jiraissueid\" key extract jira issue id, let's consider id is commit message would add environment variable.namevaluechyle_extractors_jiraissueid_origkeyfield which you to extract jira issue idchyle_extractors_jiraissueid_destkeyjiraissueidchyle_extractors_jiraissueid_reg regexp extract jira issue id need define jira credentials endpoint.namevaluechyle_decorators_jiraissue_endpoint_url's endpoint you remote jira access pointchyle_decorators_jiraissue_credentials_usernamejira usernamechyle_decorators_jiraissue_credentials_passwordjira password extract data, need define everytime both \"destkey\" key a \"field\" key, replace * a name convenient you, can as many value you .namevaluechyle_decorators_jiraissue_keys_*_destkey name the key will receive extracted valuechyle_decorators_jiraissue_keys_*_field field extract jira api response payload, dot notation extract deep value (eg: \"fields.summary\")github issue api can pull request datas issue datas this decorator described api documentation., you need use extractor define \"githubissueid\" key extract github issue id, let's consider id is commit message would add environment variable.namevaluechyle_extractors_githubissueid_origkeyfield which you to extract github issue idchyle_extractors_githubissueid_destkeygithubissueidchyle_extractors_githubissueid_reg regexp extract github issue id need define github credentials.namevaluechyle_decorators_githubissue_credentials_oauthtokengithub oauth token used fetch issue dataschyle_decorators_githubissue_credentials_ownergithub owner extract data, need define everytime both \"destkey\" key a \"field\" key, replace * a name convenient you, can as many value you .namevaluechyle_decorators_githubissue_keys_*_destkey name the key will receive extracted valuechyle_decorators_githubissue_keys_*_field field extract github issue api response payload, dot notation extract deep value (eg: \"fields.summary\")shell can pipe shell commands every commit datas through decorator. extract data, need define threesome, \"command\" key, \"origkey\" key a \"destkey\" key, replace * a name convenient you, can as many value you .namevaluechyle_decorators_githubissue_keys_*_commandcommand executechyle_decorators_githubissue_keys_*_origkey field which want use content pipe command chyle_decorators_githubissue_keys_*_destkey name the key will receive extracted valueenvironment variable decorator dump environment variable metadatas changelog section. need define everytime both \"value\" key a \"destkey\" key, replace * a name convenient you, can as many value you .namevaluechyle_decorators_env_*_varnameenvironment variable name dump metadataschyle_decorators_env_*_destkey name the key where store dumped value metadatassenderssenders are called all operations are done payload render final result.stdoutdump result stdoutnamevaluechyle_senders_stdout_format\"json\" : output payload json , \"template\" : output payload using golang template syntax at help get more informationschyle_senders_stdout_templatelinked \"template\" stdout format, must set defined template following golang template syntax, at help get more informationsgithub release api creates new release github a template datas harvested, at documentation have more details what can .namevaluechyle_senders_githubrelease_credentials_oauthtokengithub oauth token used publish release (mandatory)chyle_senders_githubrelease_credentials_ownergithub owner (mandatory)chyle_senders_githubrelease_release_draftcreate draft (unpublished) release, boolean value, default is falsechyle_senders_githubrelease_release_namerelease titlechyle_senders_githubrelease_release_prereleasecreate prerelease release, boolean value, default is falsechyle_senders_githubrelease_release_tagnamerelease tag create, you update release will used find release tied this tag (mandatory)chyle_senders_githubrelease_release_targetcommitish commitish value determines where git tag is created chyle_senders_githubrelease_release_template uses golang template syntax produce changelog your commits (mandatory), at help get more informationschyle_senders_githubrelease_release_updateset true you to update existing changelog, typical usage be you produce release through gui github release systemchyle_senders_githubrelease_repository_namegithub repository where will publish release (mandatory)custom api sendersend release a custom http endpoint through post request a json payload.namevaluechyle_senders_customapi_credentials_tokenaccess token given request header \"authorization\"chyle_senders_customapi_endpoint_url url endpoint where post request be madehelptemplatechyle uses template template engine, documentation be found godoc here.let's an example using following release generated using json format :{ \"datas\": [ { \"authordate\": \"2017-05-10 22:24:40 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"committerdate\": \"2017-05-10 22:24:40 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"date\": \"2017-05-10 22:24:40\", \"githubissueid\": 3, \"githubtitle\": \"test2\", \"id\": \"f617fb708dfa6fa290205615ea98c53a860e499d\", \"message\": \"merge pull request #3 antham/test2test2\", \"type\": \"merge\" }, { \"authordate\": \"2017-05-10 22:22:03 +0200 +0200\", \"authoremail\": \"antham@users.noreply.github.com\", \"authorname\": \"anthony hamon\", \"committerdate\": \"2017-05-10 22:22:03 +0200 +0200\", \"committeremail\": \"noreply@github.com\", \"committername\": \"github\", \"date\": \"2017-05-10 22:22:03\", \"githubissueid\": 1, \"githubtitle\": \"whatever\", \"id\": \"8fdfae00cbcc66936113a60f5146d110f2ba3c28\", \"message\": \"merge pull request #1 antham/testtest\", \"type\": \"merge\" } ], \"metadatas\": { \"date\": \"jeu. mai 18 23:01:25 cest 2017\" }} we to display markdown release the list pull request title their authors can :### release{{ range $key, $value := .datas }} ({{ $value.authorname }}) {{ end }}generated {{ .metadatas.date }} get :### releasetest2 (anthony hamon)whatever (anthony hamon)generated jeu. mai 18 23:01:25 cest 2017% provide more functionalities original golang template, sprig library is provided, gives several useful additional helpers, documentation be found here. the sake convenience, custom global store is available well, templates cannot mutate defined variables : can store data using {{ set \"key\" \"data\"}}, can retrieve data using {{ \"key\" }}, can test a key is set using {{ isset \"key\" }}.contribute you to add new feature chyle project, best is open ticket to exactly to implement changes code.setup cloning repository need install vendors glide. test changes locally can run tests : make run-quick-tests, you run gometalinter check : make gometalinter, those commands will fix lot issues, tests be ran through travis only open pull request see break."
}