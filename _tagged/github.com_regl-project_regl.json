{
	"_id": "14437512",
	"site": "https://github.com/regl-project/regl",
	"title": " Regl, a declarative low state WebGL abstraction",
	"author": "33a",
	"date": "2017-06-13T13:06:18.897Z",
	"tags": {
		"categories": [
			"opensource",
			"webgl",
			"regl",
			"javascript"
		],
		"languages": [
			"javascript",
			"html"
		]
	},
	"content": "readme.md regl fast functional webgl docs | chat | download | minified exampleregl simplifies webgl programming removing much shared state it get away . to this, replaces webgl api two fundamental abstractions, resources commands: resource is handle a gpu resident object, a texture, fbo buffer. command is complete representation the webgl state required perform draw call. define command specify mixture static dynamic data the object. once is done, regl takes description then compiles into optimized javascript code. example, here is simple regl program draw triangle:// calling regl module no arguments creates full screen canvas // webgl context, then uses context initialize new regl instanceconst regl = require('regl')()// calling regl() creates new partially evaluated draw commandconst drawtriangle = regl({ // shaders regl are strings. can glslify whatever want // define . no need manually create shader objects. frag: ` precision mediump float; uniform vec4 color; void main() { gl_fragcolor = color; }`, vert: ` precision mediump float; attribute vec2 position; void main() { gl_position = vec4(position, 0, 1); }`, // here define vertex attributes the above shader attributes: { // regl.buffer creates new array buffer object position: regl.buffer([ [-2, -2], // need flatten nested arrays, regl automatically [4, -2], // unrolls into typedarray (default float32) [4, 4] ]) // regl automatically infers sane defaults the vertex attribute pointers }, uniforms: { // defines color the triangle be dynamic variable color: regl.prop('color') }, // tells regl number vertices draw this command count: 3})// regl.frame() wraps requestanimationframe also handles viewport changesregl.frame(({}) => { // clear contents the drawing buffer regl.clear({ color: [0, 0, 0, 0], depth: 1 }) // draw triangle using command defined above drawtriangle({ color: [ math.cos( * 0.001), math.sin( * 0.0008), math.cos( * 0.003), 1 ] })}) this example livemore examplescheck the gallery. source code all gallery examples be found here.setupregl has dependencies, setting up is pretty easy. are 3 basic ways do :live editing try regl right away, can the live editor the gallery.npm easiest to regl a project is via npm. once have node set , you install use regl your project using following command:npm -s regl more info how use npm, check the official docs. you are using npm, may want try budo is live development server.run error checking browserify default you compile regl browserify all error messages run checks are removed. is done reduce size the final bundle. you are developing application, should run browserify using --debug flag order enable error messages. will generate source maps make reading source code your application easier.standalone script tag can use regl a standalone script you are really stubborn. most recent versions be found the dist/ folder is available npm cdn both minified unminified versions.unminified: https://npmcdn.com/regl/dist/regl.jsminified: https://npmcdn.com/regl/dist/regl.min.js are difference using regl standalone. script tags don't assume sort module system, standalone scripts inject global constructor function is equivalent the module.exports regl:<!doctype html><html> <head> <meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\" name=\"viewport\" /> <meta charset=utf-8> </head> <body> </body> <script language=\"javascript\" src=\"https://npmcdn.com/regl/dist/regl.js\"></script> <script language=\"javascript\"> var regl = createregl() regl.frame(function () { regl.clear({ color: [0, 0, 0, 1] }) }) </script></html>why reglregl removes shared state webgl. can anything could regular webgl little overhead way less debugging. regl emphasizes following values:simplicity interface is concise emphasizes separation concerns. removing shared state helps localize effects interactions code, making easier reason .correctness regl has more 30,000 unit tests above 95% code coverage. development mode, regl performs strong validation sanity checks all input data help catch errors faster.performance regl uses dynamic code generation partial evaluation remove almost overhead.minimalism regl wraps webgl. is a game engine doesn't opinions scene graphs vector math libraries. feature webgl is accessible, including advanced extensions multiple render targets instancing.stability regl takes interface compatibility semantic versioning seriously, making well suited long lived applications must supported months years down road. also has dependencies limiting exposure risky unplanned updates.comparisonswhile regl is lower level many 3d engines, code written it tends be highly compact flexible. comparison regl various webgl libraries across several tasks be found here.benchmarks order prevent performance regressions, regl is continuouslybenchmarked. can run benchmarks locally using npm run bench check outonline. results the last few days be foundhere. measurements were taken using custom scripts bench-history bench-graph. can read more them the development guide.projects using regl following is incomplete list projects using regl:538 gun deathsinfinite terrain demogpgpu smooth lifesummed area tablesgpgpu fourier analysisgpu accelerated handwritten digit recognition regl using convolutional neural networks you a project using regl isn't this list you like see added, please send a pull request!help wantedregl is still under active developement, anyone willing contribute is very much welcome do . right , what need most is people write examples demos the framework. will allow to find bugs deficiencies the api. have list examples would to implemented here, you are course welcome come with own examples. add example our gallery examples, please send a pull request!api docsregl has extensive api documentation. can browse docs online here.development latest changes regl be found the changelog. info how build test headless, the contributing guide herelicense code (c) 2016 mit licensedevelopment supported the freeman lab the howard hughes medical institute (@freeman-lab github)asset licensesmany examples creative commons public domain artwork illustrative purposes. assets are included any the redistributable packages regl.peppers test image cube comparison is public domaintest video (doggie-chromakey.ogv) l0ckergn0me, used under creative commons licensecube maps (posx.jpeg, negx.jpeg, posy.jpeg, negy.jpeg, posz.jpeg, negz.jpeg) humus, used under creative commons 3 licenseenvironment map oregon (ogd-oregon-360.jpg) due max ogden (@maxogd github)dds test images (alpine_cliff_a, alpine_cliff_a_norm, alpine_cliff_a_spec) taken the cc0 license 0-ad texture pack wildfire gamestile set tile mapping demo (tiles.png) cc0 licensed cobblestone paths packaudio track audio.js example is \"bamboo cactus\" 8bitpeoples. cc -nd-nc 1.0 licensematcap (spheretexture.jpg) ben simonds. cc 3 license.normal map (normaltexture.jpg) rubberduck. cc0 license."
}