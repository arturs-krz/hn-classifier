{
	"_id": "14374546",
	"site": "https://github.com/vmware/haret",
	"title": "Haret: A strongly consistent distributed coordination system implemented in Rust",
	"author": "allengeorge",
	"date": "2017-06-13T13:57:06.759Z",
	"tags": {
		"categories": [
			"opensource",
			"coordination",
			"rust",
			"consistent"
		],
		"languages": [
			"rust",
			"other"
		]
	},
	"content": "readme.md haretharet provides distributed service built proven protocols exposes strongly consistent coordination primitives via easy use api, order satisfy essential dependencies many distributed applications. can read more why decided build haret here. readme contains quickstart instructions both developers users. more information using haret be found the rough incomplete userguide.release quickstartstart here you are enduser haret not interested building code.running replication group a single noderelease binaries mac osx linux be downloadedhere.each release directory contains config.toml file running single node haret. the release directorycontaining config.toml binaries, run haret a terminal the following command start node:rust_log=haret=info,rabble=info ./haretwhile haret replication group (namespace) is intended run a cluster across multiple physicalmachines fault tolerance, is capable running a single process testing purposes.each replica the group is represented a lightweight actor can receive respond messages, we just designate group actors the same node be replication group.open another terminal we use communicate this node.connect the admin server node1./haret-admin 127.0.0.1:5001check cluster status verify a single node existsharet-admin> cluster statuscreate namespaces node1haret-admin> vr create namespace test-ns r1::node1@127.0.0.1:5000,r2::node1@127.0.0.1:5000,r3::node1@127.0.0.1:5000list namespacesharet-admin> vr namespaces the state r1::dev1 - will show primary the test-ns namespace toward top.haret-admin> vr replica test-ns::r1::node1@127.0.0.1:2000`show configurationharet-admin> config exit admin cli connect the api port node1 using cli client./haret-cli-client 127.0.0.1:5002list namespacesharet> list-namespacesenter test-ns namespace you issue operations against namespace's tree. entailslearning replica is primary that namespace it be sent messages.haret> enter test-ns start issuing operations against namespace. can discovered typing help the prompt. more examples are shown below. you'd to build multi-node cluster on localhost, 's simple matter copying release directory n times, where n is size the cluster, then editing each config file listen different ports ( is exactly make devrel does you the builddependencies). each haret each directory then started. there instructionsbelow detail joining nodes together form cluster.developer quickstartstart here you are looking hack haret.setting a development clusterinstall rust. haret builds any stable version rust 1.15curl -ssf https://static.rust-lang.org/rustup.sh | sh -s -- --channel=stableinstall rlwrap that can readline support clisbuild 3 node development cluster launch 3 nodes localhostcd haret && launchnote all node configuration is stored haret/dev/devnjoining 3 nodes create clusteropen new terminal window (output the launched nodes shows in original)connect the admin server node1rlwrap cargo run --bin haret-admin 127.0.0.1:2001check cluster status verify a single node (dev1) existsharet-admin> cluster statusjoin nodes together using cluster ports form clusterharet-admin> cluster join dev2@127.0.0.1:3000haret-admin> cluster join dev3@127.0.0.1:4000creating operating a namespacecreate namespaceharet-admin> vr create namespace test-ns r1::dev1@127.0.0.1:2000,r2::dev2@127.0.0.1:3000,r3::dev3@127.0.0.1:4000list namespacesharet-admin> vr namespaces the state r1::dev1 - should show primary toward top.haret-admin> vr replica test-ns::r1::dev1@127.0.0.1:2000show configurationconfigexit admin clientrun cli client, giving api address any node. chose connect dev1 here.rlwrap target/debug/haret-cli-client 127.0.0.1:2002list namespaceslist-namespacesenter test-ns namespace you issue operations against namespace's treeenter test-nsissuing commands against namespaceharet> create set //other/nodeokepoch = 1, view = 6, client request num = 3haret> set insert //other/node hitrueversion = 1 epoch = 1, view = 6, client request num = 4haret> set contains //other/node hitrueversion = 1 epoch = 1, view = 6, client request num = 5haret> set contains //other/node hfalseversion = 1 epoch = 1, view = 6, client request num = 6haret> create set //setokepoch = 1, view = 6, client request num = 7haret> set insert //set blahtrueversion = 1 epoch = 1, view = 6, client request num = 8haret> set intersection //set //other/nodeepoch = 1, view = 6, client request num = 9haret> set union //set //other/nodehiblahepoch = 1, view = 6, client request num = 10haret>test failovernote haret stateharet-admin> vr replica test-ns::r1::dev1kill primary ( this case dev2) stop-dev2wait few seconds re-election occur then re-enter namespace the client cli. try discover new primary.enter test-nsissue commands show state is preserved crashing masterharet> set union //set //other/nodehiblahepoch = 1, view = 7, client request num = 11"
}