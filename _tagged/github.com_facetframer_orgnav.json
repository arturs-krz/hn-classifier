{
	"_id": "14352120",
	"site": "https://github.com/facetframer/orgnav",
	"title": "Quickly navigate and search your emacs org trees",
	"author": "sea6ear",
	"date": "2017-06-13T13:57:47.385Z",
	"tags": {
		"categories": [
			"opensource",
			"emacs",
			"org-mode",
			"tree"
		],
		"languages": [
			"emacs lisp",
			"shell"
		]
	},
	"content": "readme.md orgnavquickly navigate search emacs org trees; this navigation capture organize.built the help helm.motivational introduction library allows navigate org tree interactively helm. an example using library might:start searching org tree the top-levelincrease depth are displaying few times m-lfilter tasks are progress searching \"inprogress\"find task you are interested using m-j m-k at ancestors this task m-find interesting ancestor look all descendents m-. get summary how use library, run m-x orgnav-search-root press tab. will display list keybindings. using keybindings is very much encouraged.run m-x orgnav<tab> a list functions: functions without --s themare public functions you might to call.requirements library makes of lexical bindings some functions, so requires emacs 24.1 newer.installingorgnav is available melpa. stable versions are released melpa, though standards stable are that high.dev is bleeding edge branch should installed manually.manual installationdownload source code.master is liable have (quickly fixed) bugs. versions are less likely have bugs https://github.com/facetframer/orgnav/releases/.place repository your load-path.add(require `orgnav) your init.el.run functions m-x. may want set some keybindings using define-key global-set-key. defaults are provided since users this library likely strong opinions such things.debuggingtry setting orgnav-log variable reviewing *messages* buffer:(setq orgnav-log 't)advanced- featuresextensibilityfunctions are moderately flexible you call yourself elisp.whenever want find org nodes operate from elisp library be useful. synchronuos variants functions are very relevant here.specific-purpose convenience functions core this library is navigation interface can used extensibly elisp. however common ( obvious) examples are included:clocking items (orgnav-clock-)refiling (orgnav-refile, orgnav-refile-ancestors friends) with org-capture select capture target (orgnav-capture-function-relative orgnav-capture-function-global)alternatives prior see stack overflow post a discussion various options. tool was inspired the limitiations helm-org. fact, projects initial name better helm org.many tools provide similar functionality, as rule is useful -off corner case part another tool rather a general tool move around within org files. fact these features evolved parallel within several tools speaks the value a general navigation tool. comments the alternatives reviewed below:none the alternatives reviewed provides ability search under particular node rather globally (though is orgnav achievable through narrowing). find \"relative refile\" orgnav provides particularly useful.none the alternatives reviewed allow to chain together searches ( example searching under node you found)none the alternatives reviewed provide easy ways use interface programmatically org-refile org-capture. exception is outline-path-complete org-goto. have found way support fuzzy search within tool.none the alternatives reviewed allow to change depth you are searching (although org-goto searches a depth 1 rather unbounded depth other tools)helm-orghelm-org has feeling a proof--concept library. orgnav is more complete, intends be complete navigation tool rather a searching library.however, simple cases, helm-org may good enough is likely more stable.helm-org allows searching the root node whereas orgnav allows searching a particularly node. could achieved narrowing.orgnav allows chaining together searches. is particularly useful one wants search within headline you find.orgnav allow to vary depth search. can very important one has large tree search.helm-org-riflehelm-org-rifle is quite similar this package. searches are global of arbitrary depth, though narrowing address point.searches include contents entries. is analogous helm-swoop. there is large amount text contained within entries ( is often case) is is very useful search headlines.searching the headlines means fewer characters are required find entry you are looking .at times explicitly wants search content however.org-search-gotoorg-search-goto allows to search within headlines.org-search-goto does allow to iteratively searching: single search term is provided searched .*org-search-goto` does allow chaining searches.org-gotoorg-goto is org's built- navigation tool. is more an iterative search tool ( isearch) a summary tool, such, finding particularly entry require to search through the matches one's document by .org-goto be made use pager using outline-path-complete. does work helm. further can show level depth always performs global search.again nothing orgnavs ability chain together number searches starting different points is provided.judicious of org-capture, org-refile, org-find-olpthough initially slightly cryptic you are willing do scripting functions are very powerful. is particularly case your workflow is quite consistent. general purpose functionality orgnav may unnecessary you:hacking some elisp supports very limited workflow might better.specifically, is likely be case you are rarely creating nesting your org file.org-sparse-tree some ways, org-sparse-tree overlaps this library, well providing number orthogonal searching criteria. downsides org-sparse-tree are it changes folding your buffer, can show lot intermediate nodesslowing down reading. can avoid problems related \"losing place\" using clone-indirect-buffer create multiple views your buffer.org-sparse-tree has benefit allowing -place editing.helm does support , but similar types actions be achieved orgnav throughorg-capture.worf-gotoworf is convenient navigation tool org files. works providing keybindings motions apply one's cursor is the leading \"*\"s a heading.worf provides search function worf-goto. allows to interactively update search terms orgnav.searches are global. means varying depth search is provided. is way chain together searches for orgnav.imenuimenu is general framework deriving named list locations within file. source code files, provides list function class definitions. org files provides list headings. such general tool, would necessarily expect search model fit org-mode .imenu has concept depth searching. searches are global. is way varying depth searches. is way chaining together searches different levels.caveats software is very matureoperations be slow large trees (e.g file 13 thousand lines)sometimes pressing keys too quickly break helm. tree is based character offsets, can interfere helm-resume. could addressed using olps rather offsets of keybindings here almost certainly shadow helm defaults is very limited testing presentcontributingcontributions are welcome.development happens the dev branch. have low threshold deploying this branch. master branch is used melpa deployment ( branch should probably called melpa).every version melpa should correspond a release.testingtesting helm is hard. may prove be issue accepting contributions, i deal this anyone actually contributes anything. 's probably possible script helm testing. can some basic linting, ensure installation works using test.sh.releasing ./bump.sh ./release.shevery version released melpa has version number. versions follow semantic version numbering spirit, i unwilling guarantee every part this../bump.sh helps correctly update version number without too much effort../release.sh push code live ( does do testing). checklist deploying melparun test.sh ( does linting)bump version run release.sh. melpa build this version. some basic manual testing (let branch sit my machine a couple days) intend automate of steps time continues."
}