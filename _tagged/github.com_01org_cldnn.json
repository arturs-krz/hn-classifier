{
	"_id": "14416402",
	"site": "https://github.com/01org/cldnn",
	"title": "01org/clDNN: Compute Library for Deep Neural Networks (clDNN)",
	"author": "rbanffy",
	"date": "2017-06-13T13:56:32.405Z",
	"tags": {
		"categories": [
			"opensource",
			"deep-neural-networks",
			"deep-learning",
			"intel",
			"intel-hd-graphics",
			"cldnn",
			"library"
		],
		"languages": [
			"c++",
			"c",
			"cmake",
			"shell",
			"objective-c",
			"batchfile"
		]
	},
	"content": "readme.md compute library deep neural networks (cldnn)compute library deep neural networks (cldnn) is open source performancelibrary deep learning (dl) applications intended acceleration dl inference intel® processor graphics including hd graphics iris® graphics.cldnn includes highly optimized building blocks implementation convolutional neural networks (cnn) c c++ interfaces. created project enable dl community innovate intel® processors.usages supported: image recognition, image detection, image segmentation.topologies: alexnet*, vgg*, googlenet* resnet*. with technical preview, apis may change future updates.licensecldnn is licensed is licensed underapache license version 2.0.attached licensescldnn uses 3rd-party components licensed under following licenses:boost under boost* software license - version 1.0googletest under google* licenseopencl icd c++ wrapper under khronos licensedocumentation latest cldnn documentation is github pages. is inline documentation available can generated doxygen.accelerate deep learning inference intel® processor graphics whitepaper link.supportplease report issues suggestionsgithub issues. to contribute welcome community contributions cldnn. you an idea to improve library:share proposal viagithub issuesensure can build product run the examples your patch the case a larger feature, create testsubmit pull request will review contribution , if additional fixes modificationsare necessary, may provide feedback guide . when accepted, pullrequest be merged our internal github repositories.system requirementscldnn supports intel® hd graphics intel® iris® graphics is optimized codename skylake:intel® hd graphics 510 (gt1, client market)intel® hd graphics 515 (gt2, client market)intel® hd graphics 520 (gt2, client market)intel® hd graphics 530 (gt2, client market)intel® iris® graphics 540 (gt3e, client market)intel® iris® graphics 550 (gt3e, client market)intel® iris® pro graphics 580 (gt4e, client market)intel® hd graphics p530 (gt2, server market)intel® iris® pro graphics p555 (gt3e, server market)intel® iris® pro graphics p580 (gt4e, server market)codename apollolake:intel® hd graphics 500intel® hd graphics 505cldnn currently uses opencl multiple intel® opencl extensions requires intel® graphics driver run.cldnn requires cpu intel® sse/intel® avx support. software dependencies are:cmake* 3.6 later( project is compatible cmake 3.1, , due issues boost libraries resolution cmake 3.4.3 with checkcxxcompilerflag module cmake 3.5.2, strongly recommend 3.6+)c++ compiler partiall full c++14 standard support compatible :gnu* compiler collection 5.2 laterclang 3.5 laterintel® c++ compiler 17.0 latervisual c++ 2015 (msvc++ 19.0) laterintel® cpu intrinsics header (<immintrin.h>) must available during compilation.python 2.7 later (scripts are both compatible python 2.7.x python 3.x)(optional) doxygen* 1.8.13 laterneeded manual generation documentation inline comments running docs custom target will generate automatically.graphviz* (2.38 later) is recommended generate documentation all embedded diagrams.( sure dot application is visible the path environment variable.) software was validated :centos* 7 gnu* compiler collection 5.2 (64-bit )windows® 10 windows® server 2012 r2 msvc 14.0 have validated using intel® intel-opencl-r4.1 (srb4.1) linux driver package.installationbuildingdownload cldnn source code clone repository your system: git clone https://github.com/01org/cldnn.gitsatisfy software dependencies ensure the versions are correct before building.cldnn uses multiple 3rd-party components. are stored binary form common subdirectory. currently are prepared msvc++ gcc*. will cloned repository.cldnn uses cmake-based build system. can cmake command-line tool cmake gui (cmake-gui) generate required solution. windows system, can call cmd ( powershell): @rem generate 32-bit solution (solution contains multiple build configurations)... cmake -e make_directory build && cd build && cmake -g \"visual studio 14 2015\" .. @rem generate 64-bit solution (solution contains multiple build configurations)... cmake -e make_directory build && cd build && cmake -g \"visual studio 14 2015 win64\" ..created solution be opened visual studio 2015 built using appropriate msbuild tool( can use cmake --build . select build tool automatically). unix linux systems: @rem create gnu makefile release cldnn build ... cmake -e make_directory build && cd build && cmake -dcmake_build_type=release .. && @rem create ninja makefile debug cldnn build ... cmake -e make_directory build && cd build && cmake -g ninja -dcmake_build_type=debug .. && ninja -k 20 can call scripts main directory project will create solutions/makefiles cldnn (will generate solutions/makefiles build subdirectory binary outputs be written build/ subdirectory):create_msvc_mscc.bat (windows*, visual studio* 2015)create_unixmake_gcc.sh [y|n] [<devtoolset-version>] (linux*, gnu* ninja* makefiles, optional devtoolset support) you specify first parameter y, ninja makefiles be generated. you specify second parameter (number), cmake be called via scl selected devtoolset version.cmake solution offers multiple options you specify using normal cmake syntax (-d<option-name>=<value>):cmake optiontypedescriptioncmake_build_typestringbuild configuration will used generated makefiles ( does affect multi-configuration generators generators visual studio solutions). currently supported: debug (default), releasecmake_install_prefixpathinstall directory prefix.cldnn__architecture_targetstringarchitecture target system (where binary output be deployed). cmake try detect automatically (based selected generator type, host os compiler properties). specify option if cmake has problem detection. currently supported: windows32, windows64, linux64cldnn__output_dir (cldnn__output_bin_dir, cldnn__output_lib_dir)pathlocation where built artifacts be written . it is set automatically roughly build//<arch-target>/<build-type> subdirectory. more control : cldnn__output_lib_dir (specifies output path static libraries) cldnn__output_bin_dir ( shared libs executables).cmake advanced optiontypedescriptionpython_executablefilepathpath python interpreter. cmake try detect python. specify option if cmake has problem locating python.cldnn__boost_versionstringversion boost prebuilded binaries use ( common subdirectory). is automatically setected cmake (highest version). specify, you multiple versions want use different automatically selected.cldnn__iocl_icd_use_externalbool this option enable of external intel® opencl sdk a source icd binaries headers (based inteloclsdkroot environment variable). default: offcldnn__iocl_icd_versionstringversion intel® opencl icd binaries headers use ( common subdirectory). is automatically setected cmake (highest version). specify, you multiple versions want use different automatically selected.cldnn__compile_link_allow_unsafe_size_optboolallow unsafe optimizations during linking ( aggressive dead code elimination, etc.). default: cldnn__compile_link_use_static_runtimeboollink static c++ runtime. default: off (shared c++ runtime is used)cldnn__include_coreboolinclude core cldnn library project generated makefiles/solutions. default: cldnn__include_testsboolinclude tests application project (based googletest framework) generated makefiles/solutions . default: cldnn__run_testsboolrun tests building tests project. option requires cldnn__include_tests option be . default: offcldnn__cmake_debugboolenable extended debug messages cmake. default: offcldnn includes unit tests implemented using googletest framework. validate build, run tests target, e.g.: tests( sure both cldnn__include_tests cldnn__run_tests were set on invoking cmake.)generating documentationdocumentation is provided inline can generated html format doxygen. recommend use latestdoxygen* graphviz*.documentation templates configuration files are stored docs subdirectory. can simply call: cd docs && doxygen generate html documentation docs/html subdirectory. is custom cmake target named docs will generate documentation cldnn__output_bin_dir/html directory. example, using unix makefiles, can run: docs order create .deploymentspecial install target place api header files libraries /usr/local(c:/program files/cldnn c:/program files (x86)/cldnn windows). change installation path, the option -dcmake_install_prefix=<prefix> invoking cmake.* names brands may claimed the property others.copyright © 2017, intel® corporation"
}