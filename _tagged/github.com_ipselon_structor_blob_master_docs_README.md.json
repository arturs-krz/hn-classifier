{
	"_id": "14121267",
	"site": "https://github.com/ipselon/structor/blob/master/docs/README.md",
	"title": " Structor's User Guide (React UI Builder)",
	"author": "ipselon",
	"date": "2017-06-13T13:35:13.504Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "structor's user guidegetting startedintegrating create react appdesigning ui component modelcombine modify component models to select component to paste component library to cut, copy paste componentsnavigation through pagesworking codedev environment code structurecomponent libraryreact components libraryredux containers librarycomponent default modelsgenerating source codereact component scaffoldredux container scaffoldtroubleshootingstructor marketextracting publishing components presetsextending existing presets the marketexportingexport pagesexport applicationgetting startedstructor does depend any starter/seed/boilerplate project. runs in empty folder package.json. before get familiar structor suggest run through brief tutorial. tutorial is using starter project lets quickly try cool features structor.installationclone download repo structor-starter github here:https://github.com/ipselon/structor-starter.run command cloned unpacked directory:npm installrun command:npm install structor the prompt is appeared the command line, choose app a directory where source code be located.specify directory name where source code the generated components be. the directory does exist the current project structure will created.(app) this point are able start structor:npm run structoropen following address the browser:http://localhost:2222/structor you should the structor's workspace. not, please create issue. getting familiar structor's workspace the opening 'll the workspace page. may call a page bacause behaves the real page the browser. there are modes the workspace. first mode is editing mode. the editing mode can cut, paste, duplicate, delete, replace, change style any component the page. a separate note, should understand is component component model terms the structor's workspace. page the workspace consists multiple react components. although, page is a react component itself, you may thought, page is a tree components models are written json. detailed explanation what is component model section component model this guide. second mode is preview mode. the preview mode are able see page looks try it works the browser. the left vertical toolbar may find buttons are responsible switching between modes: this stage the tutorial current page should in edit mode. not, please set edit mode .installing component presetshowever can in structor only those components are shipped structor distribution, this tutorial will install package material ui components structor market.activate library button plus icon it is shown the screenshot below. library panel shows groups available components the current project. find install button the top the left-side panel click it. are forwarded the structor market gallery, here can what packages component presets are avaialble install. let's install mui-next-spkg package, includes components the next version material ui lib. installation process take time structor installs dependencies via npm. once package is installed will new pages the workspace new groups components. try open pages using page selector component the top toolbar. composing new componentlet's start compose something interesting. sure the current page is /home page click somewhere the text the center the page. 'll that border appeared around area - means you selected component. is few ways understand the component is selected .we may find in breadcrumbs control the top the workspace it is shown the screenshot below. you take look the context menu appeared the place clicked right mouse button. additionally, is more common method will show the entire structure the page. is bottom panel the components tree the current page. click the button code icon the left vertical toolbar it is shown the screenshot below. note moving mouse cursor around the page show a boundaries components we are able select. let's place some components library onto page. is requirement the material ui lib place muithemeprovider a root component any mui components combination. , we find themeprovider component the mui group ( is wrapper muithemeprovider here) place as container our future combination. open mui group the library panel click themeprovider item the list. will that is sublist. sublist the library shows this component has several models. let's click default model see themeprovider component's model was copied clipboard. we to replace h3 component the tree the component clipboard. you not h3 selected, select by clicking it the page just select the treeview ( in breadcrumbs control). find replace button the top toolbar, click right mouse hit replace button the context menu. the result will the composition it is shown the screenshot below. replace placeholder component the page raised primary model button component. then place h2 component ( html group) before button inside layoutitem component.placing component before after another component be provided the same manner we were replacing components - have pick component the library then before after button the top toolbar context menu selected component. the result should the following composition: creating componentstructor ships a couple source code generators react component scaffolds. are going discuss here it works how can customized. although, please keep mind any scaffold template may changed fit requirements easily. we are going generate scaffold simple react component will equal and feel our composition we made above.select topmost div the hierarchy the current page, click generate component button the top toolbar the workspace. will the page the generators gallery, where have choose component want generate.note: may choose component the page a root node generate new react component. in tutorial will select topmost .here will choose react-component generator - click generate button start generation wizard. next step requires enter name new component /or namespace component. this note should step aside bit try understand the source code its structure will after generation. only requirement structor is use certain type the source code structure. will discuss structure motives use in the code structure guide's chapters. on step please keep mind following structure components is possible use structor:<app_dir> components/ <component_name> index.js - react component containers/ <container_name> index.js - redux container actions.js constants.js reducer.js sagas.js selectors.js modules/ <namespace_name>/ components/ <component_name> index.js - react component containers/ <container_name> index.js - redux container actions.js constants.js reducer.js sagas.js selectors.js index.js - components containers index reducer.js - composition containers' reducers sagas.js - composition containers' sagasenter counter a name react component, enter tutorial a namespace. are going create new namespace counter component. although, can create component without namespace that put in components folder.next step gives options a few variants the future scaffold. let's leave options they are proceed the next step.here is preview the generated source code. reviewing click install component button. we to switch the preview mode try click the button - nothing happened. is why need change source code make something valuable.open index.js file the directory...<project_dir>/app/modules/tutorial/components/counter... made chages generated code it is shown below. , please observe your changes are applied the preview page almost immediatelly./**** counter**/import react, { component } \"react\";import proptypes \"prop-types\";import { themeprovider, layoutcontainer, layoutitem, button} \"modules/mui\";const style = { display: \"flex\", justifycontent: \"center\", alignitems: \"center\", padding: \"1em\"};class counter extends component { constructor(props) { super(props);++ .handleincrease = .handleincrease.bind(); this.state = {-- examplevalue: \"\"++ countervalue: 0, }; }++ handleincrease(e) {++ e.stoppropagation();++ e.preventdefault();++ .setstate({countervalue: .state.countervalue + 1});++ } render() {-- const { examplevalue } = .state; // eslint-disable-line-- const { exampleprop } = .props; // eslint-disable-line++ const {countervalue} = .state; // eslint-disable-line return ( <div style={style}> <div> <themeprovider> <layoutcontainer gutter={24}> <layoutitem xs={12}>-- <h2><span>empty h2</span></h2>++ <h2><span>count: {countervalue}</span></h2>-- <button raised={true} primary={true}>++ <button ++ onclick={.handleincrease} ++ raised={true} ++ primary={true}++ > <span>button</span> </button> </layoutitem> </layoutcontainer> </themeprovider> </div> </div> ); }}-- counter.proptypes = {-- exampleprop: proptypes.string-- };-- counter.defaultprops = {-- exampleprop: \"\"-- };export default counter;switch again the preview mode try click the button - will that counter value is increasing. exporting pages building app step is necessary the projects have own building process requre add components manually appliation pages. structor starter app does have sophisticated app building process terms granularity, optimisation, etc. step is mostly the learning purpose.click the button book icon on left vertical toolbar. will show a list available pages. the top the list may two buttons: export pages export app. export pages responsible generating source code selected pages. export app button generates only pages' source code, also source code entry point terms webpack compiler. far we are going build application, are choosing export app. modal dialog worn about files be generated. we see green message a successful exporting. we find new <app_dir>/routes folder along files react/redux application. additionally, please find compiled bundle the application <project_dir>/build directory.finally can run application the local express server, to terminal run following command:npm run start:production command initiates building process our application starts express server instance 3000 port. the server is started may open http://localhost:3000 address our browser."
}