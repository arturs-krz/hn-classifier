{
	"_id": "14343967",
	"site": "https://github.com/kshvmdn/fsql",
	"title": " FSQL â€“ Search through your file system with SQL-esque queries",
	"author": "kshvmdn",
	"date": "2017-06-13T13:08:16.245Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"go",
			"makefile"
		]
	},
	"content": "readme.md fsql search through filesystem sql-esque queries.contentsdemoinstallationusagequery syntaxexamplescontributelicensedemosetup / installationassumes go is installed setup.install go :$ go -u -v github.com/kshvmdn/fsql/...$ fsql$gopath/bin/fsqlinstall homebrew:$ brew install fsql$ fsql/usr/local/bin/fsqlinstall directly via source:$ git clone https://github.com/kshvmdn/fsql.git $gopath/src/github.com/kshvmdn/fsql$ cd $_ # $gopath/src/github.com/kshvmdn/fsql$ install fsql$ ./fsqlusagefsql expects single query via stdin. may choose use fsql interactive mode. note this mode is currently work--progress, many common shell features are implemented yet (e.g. arrow key support, autocomplete, history, etc).view usage dialogue the -help flag.$ fsql -helpusage: fsql [options] query -interactive run interactive mode (ctrl+d exit) -version print version exitquery syntax general, each query requires select clause ( specify attributes be shown), from clause ( specify directories search), a where clause ( specify conditions test against).>>> select attribute, ... source, ... where condition; may choose omit select where clause. you're providing query via stdin, quotes are required, however 'll to escape reserved characters (e.g. *, <, >, etc).attributecurrently supported attributes include name, size, mode, , and .if attribute is provided, is chosen default.examples:each group features set equivalent clauses.>>> select name, size, ...>>> name, size, ...>>> select from ...>>> from ...>>> ...sourceeach source should a relative absolute path a directory your machine.source paths may include environment variables (e.g. $gopath) tildes (~). a hyphen (-) exclude directory. source paths support usage glob patterns. the case a directory begins a hyphen (e.g. -foo), the following include as source:>>> ... ./-foo ...examples:>>> ... . ...>>> ... from ~/desktop, ./*/**. ...>>> ... from $gopath, -.git/ ...conditioncondition syntax single condition is made of 3 parts: attribute, operator, a value.attribute: valid attribute is of following: name, size, mode, .operator:each attribute has set associated operators.name:operatordescription=string equality<> / !=synonymous using \" ... = ...\"inbasic list inclusionsimple pattern matching. % to match zero, , or multiple characters. check a string begins a value: <value>%, ends a value: %<value>, contains value: %<value>%.rlikepattern matching regular expressions.size / :all basic algebraic operators: >, >=, <, <=, =, <> / !=.mode:isvalue: the value contains spaces, wrap value quotes (either single double) backticks. default unit size is bytes. default format time is mmm dd yyyy hh mm (e.g. \"jan 02 2006 15 04\"). mode test a file is regular (is reg) if 's directory (is dir).conjunction / disjunction and / to join conditions. note precedence is assigned based order appearance. means where and b c is the same where c b a. parentheses get around behaviour, .e. where and b c is same where c (b a).examples:>>> ... where name = main. or size = 5 ...>>> ... where name = main. and size > 20 ...negation not negate condition. keyword must precede condition (e.g. ... where a ...).note negating parenthesized conditions is currently supported. however, can easily resolved applying de morgan's laws your query. example, ... where (a b) ... is logically equivalent ... where a not b ... ( latter is actually more optimal, due lazy evaluation).examples:>>> ... where name = main. ...attribute modifiersattribute modifiers are used specify input output values should processed. functions are applied directly attributes the select where clauses. table below lists currently-supported modifiers. note the parameter format is always attribute name.attributemodifiersupported selectsupported wherenameupper (synonymous format(, upper)lower (synonymous format(, lower)fullpathshortpathsizeformat(, unit)format(, layout)supported unit values: b (byte), kb (kilobyte), mb (megabyte), gb (gigabyte).supported layout values: iso, unix, custom. custom layouts must provided reference the following date: mon jan 2 15:04:05 -0700 mst 2006.examples:>>> ... where upper(name) %.go ...>>> ... where format(size, gb) > 2 ...>>> ... select format(, \"mon jan 2 2006 15:04:05\") ...subqueriessubqueries allow more complex condition statements. queries are recursively evaluated while parsing. selecting multiple attributes a subquery is currently supported; more one attribute ( all) is provided, the attribute is used.support referencing superqueries is yet implemented, #4 you'd to help this.examples:>>> ... where name (select name ../foo) ...usage exampleslist attributes each directory your home directory (note escaped *):$ fsql select \\* ~ where mode is dirlist names all files the desktop downloads directory contain csc the name:$ fsql \"select name ~/desktop, ~/downloads where name %csc%\"list files the current directory are present some directory:$ fsql -interactive>>> select from . where name (... select name ~/desktop/files.bak/... );passing queries via stdin without quotes is bit a pain, hopefully next examples highlight , my suggestion is use interactive mode wrap query quotes you're doing anything subqueries attribute modifiers.list files named main. in $gopath are larger 10.5 kilobytes smaller 100 bytes:$ fsql select from $gopath where name = main. and \\(format\\(size, kb\\) \\>= 10.5 size \\< 100\\)$ fsql \"select from $gopath where name = main. and (format(size, kb) >= 10.5 size < 100)\"$ fsql -interactive>>> select... ... from... $gopath... where... name = main.... and (... format(size, kb) >= 10.5... size < 100... )... ;list name, size, modification of javascript files the current directory were modified april 1st 2017:$ fsql select upper\\(name\\), format\\(size, kb\\), format\\(, iso\\) . where name %.js time \\> \\'apr 01 2017 00 00\\'$ fsql \"select upper(name), format(size, kb), format(, iso) . where name %.js time > 'apr 01 2017 00 00'\"$ fsql -interactve>>> select... upper(name),... format(size, kb),... format(, iso)... ... .... where... name %.js... time > 'apr 01 2017 00 00'... ;contribute project is completely open source, feel free open issue submit pull request.before submitting code, please ensure tests are passing the linter is happy. following commands may of , refer the makefile see they .$ make install \\ -tools \\ fmt \\ vet \\ lint \\ test \\ coveragelicensefsql source code is available under mit license."
}