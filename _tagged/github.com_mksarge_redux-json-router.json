{
	"_id": "14166678",
	"site": "https://github.com/mksarge/redux-json-router",
	"title": " Redux JSON Router â€“ Declarative, Redux-First Routing for the Browser",
	"author": "mksarge",
	"date": "2017-06-13T13:34:46.647Z",
	"tags": {
		"categories": [
			"opensource",
			"react",
			"redux",
			"router",
			"middleware",
			"json",
			"webpack",
			"code-splitting"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md redux json routerredux-json-router is minimal router intended use client-rendered react/redux applications.featuresdeclarative routing routing configuration is defined declaratively json, with plain javascript.redux- routing url is a regular part redux state, can updated dispatching actions.practical handling browser history url held the browser history redux store stay sync behind scenes, that ui always trust url the store its source truth.code-splitting code-splitting asynchronous loading routes is easily enabled a webpack loader.react bindings <router/> matching/loading/rendering routes, <link/> push/replace navigation.quick linksmotivationinstallationapiusagecreditscontributinglicensemotivationbackground know you're thinking - yet another react/redux router? really?yes, are many existing solutions there already. course, already react-router. you may also heard solutions redux-little-router universal-router.every router has strengths - , as any library, choosing router comes down finding one best suits needs. here are of categories similar routers target:environment: browser-, or universallibraries: react-, redux (react optional), otherrouting config: jsx, plain js, json-basedredux-json-router similarly targets subset the above categories. attempts answer question: is minimal api needed a redux- router client-rendered react/redux applications a json-based routing configuration?redux- routingkey point: with other complex/dynamic state, application view should depend solely the url held the redux store ( single source truth). modern browsers, url state history are held window.location window.history. can manipulate browser history directly using history api, even better, can utilize awesome history module accomplish .without redux- routing, react/redux application view may depend url state outside the store, this:# using react-router: history react router view redux # using react-router + react-router-redux:history react router view redux redux- routing, react/redux application view depends solely the url the redux store.# using redux-json-router:history redux view redux-json-router accomplishes redux- routing making url regular part the state tree, allowing redux actions dispatch url changes, keeping store browser history sync behind scenes.here's the url looks on state tree:// current url: https://www.website.com/redux/json/router?is=cool#yup// previous url: https://www.website.com/previous/route{ ..., // redux state router: { url: '/redux/json/router?is=cool#yup', hash: 'yup', queries: { is: 'cool' }, paths: [ 'redux', 'json', 'router' ], previous: { url: '/previous/route', hash: '', queries: {}, paths: [ 'previous', 'route' ] } }}installationnpm install --save redux-json-routerapiredux-json-router has reasonably small api. here's look the exports src/index.js:// history apiexport { createbrowserhistory } './history/createbrowserhistory';export { startlistener } './history/startlistener';// redux apiexport { routermiddleware } './redux/middleware';export { routerreducer } './redux/reducer';export { push, replace, , goback, goforward, manualchange } './redux/actions';export { push, replace, , go_back, go_forward, manual_change } './redux/constants';// react apiexport { routercontainer router } './react/router';export { linkcontainer link } './react/link';/* webpack loader 'route-loader' is exported here. import directly your webpack config, following instructions below. */history apicreatebrowserhistory()creates history object; exported directly history (learn more)startlistener(history, store)creates history listener listen external navigation changes (popstate events, eg. browser navigation buttons address bar) subsequently dispatch manualchange actionredux apiroutermiddleware(history)intercepts router actions (push, replace, , goback goforward) update browser history, before continuing/breaking middleware chainrouterreducerparses adds url the redux staterouteractionsused dispatch url updates; middleware intercepts calls equivalent history navigation actionspush(href) updates current previous url the redux statereplace(href) updates current url, not previous url, the redux state(index) intercepted routermiddleware; startlistener subsequently dispatches manualchange actiongoback() intercepted routermiddleware; startlistener subsequently dispatches manualchange actiongoforward() intercepted routermiddleware; startlistener subsequently dispatches manualchange actionmanualchange(href) updates current previous url the redux staterouterconstantspublic action types use user-defined middlewarereact components<router/>matches current url the routing configuration, loads, renders pageprops:routes (array) routing configuration ( routing configuration)<link/>used internal navigation ( opposed <a/>, external navigation)props: (string) required; internal url (pathname + query + hash) navigate (eg. '/', '/blog?posted=2017', '/blog/post/1#introduction')replace (boolean) optional; set true the link dispatch replace action (default: push)onclick (function) optional; specify callback run click, before push/replace action is dispatchedwebpack loader (optional)route-loadertranslates .json routing configuration file javascript; routing configuration acceptable json, webpack configuration set- instructionsoptions:debug (boolean) optional; true, logs output the console (default: false)chunks (boolean) optional; true, splits routes without specified chunk property separate chunks; false, adds pages without specified chunk the main code chunk (default: true)usagelet's at we'd add redux-json-router a react/redux application. 'll make few changes:routing config 'll define routes a routes.json routes.js file.redux config 'll add redux reducer middleware the store.js configuration file.app entry point 'll add bit boilerplate index.js render app <router/>.webpack config (optional) load routes.json, 'll add custom loader webpack.config.js.routing configurationdeclare routes a routes.json file an array \"route objects\":// routes.json[ { \"path\": \"/\", // exact path \"page\": \"./pages/home\", \"chunk\": \"main\" }, { \"path\": \"/docs\", \"page\": \"./pages/docs\", \"chunk\": \"main\", \"children\": [ { \"path\": \"/:id\", // nested parameterized path \"page\": \"./pages/post\" } ] }, { \"path\": \"*\", // catch- path \"page\": \"./pages/error\" }]route objects are defined follows:type routeobject { path: string, // required. specifies path name (options: exact, param, catch-). page: string, // required. specifies react component be instantiated. chunk?: string, // optional. specifies code chunk be loaded (default: separate chunks all pages). children?: [routeobject] // optional. specifies nested routes.} bundled webpack loader is used translate routes.json javascript can read the <router/> component. alternatively, may choose write routing config javascript yourself:// routes.js - equivalent routes.json aboveexport default [ { path: '/', load: () => promise.resolve(require('./pages/home').default), // file loaded the main code chunk }, { path: '/docs', load: () => promise.resolve(require('./pages/docs').default), // file loaded the main code chunk children: [ { path: '/:id', load: () => promise((resolve, reject) => { try { require.ensure(['./pages/post'], (require) => { // file loaded a separate code chunk resolve(require('./pages/post').default); }); } catch (err) { reject(err); } }), }, ], }, { path: '*', load: () => promise((resolve, reject) => { try { require.ensure(['./pages/error'], (require) => { // file loaded a separate code chunk resolve(require('./pages/error').default); }); } catch (err) { reject(err); } }), },];redux configuration your redux config, add routerreducer the root reducer under router key, add routermiddleware your redux middlewares, passing the history singleton created the application entry point ( shown the following section).// store.jsimport { combinereducers, applymiddleware, compose, createstore } 'redux';import { routerreducer, routermiddleware } 'redux-json-router';import { otherreducers, othermiddlewares } './other';// add `routerreducer` your root reducerconst makerootreducer = () => combinereducers({ ...otherreducers, router: routerreducer});function configurestore(history, initialstate = {}) { // add `routermiddleware` your middlewares, passing the history singleton the app's entry point const middlewares = [...othermiddlewares, routermiddleware(history)]; const enhancers = [applymiddleware(...middlewares)]; return createstore(makerootreducer(), initialstate, composeenhancers(...enhancers));}application entry point your app's entry point, import routing config, create history singleton, create store the history singleton, call startlistener initialize router state the store start listening external actions. finally, render application using <router/> inside redux <provider/>.// index.jsimport react 'react';import { render } 'react-dom';import { provider } 'react-redux';import { createbrowserhistory, startlistener, router } 'redux-json-router';import configurestore './store';import routes './routes.json'; // webpack-loaded json routing config// import routes './routes'; // plain javascript routing config// create history singletonconst history = createbrowserhistory();// configure store historyconst store = configurestore(history);// dispatch actions the history is manually changed ( navigation buttons / address bar)startlistener(history, store);// render application <router /> match current url the routing configrender( <provider store={store}> <router routes={routes} /> </provider>, document.getelementbyid('app'));webpack configuration (optional) use included webpack loader, import route-loader directly your webpack config:// webpack.config.jsconst routes = [path.resolve(__dirname, './app/routes.json')]; // path your json routing configconst config = { ..., module: { rules: [ ..., { test: /\\.json$/, exclude: routes, // exclude routes.json being loaded the usual json-loader loader: 'json-loader', }, { test: /\\.json$/, include: routes, // load routes.json route-loader instead loader: 'redux-json-router/lib/route-loader', options: { // debug (boolean) - defaults false // chunks (boolean) - defaults true }, }, ...credits project was heavily inspired similar and research javascript/react/redux routing including:routersreacttraining/react-routerformidablelabs/redux-little-routerkriasoft/react-static-boilerplatekriasoft/universal-routercolinmeinke/universal-redux-routerarticles might need react router konstantin tarkuslet url the talking tyler thompsonreacttraining/historyreactjs/react-router-reduxcontributingcontributions are welcome are greatly appreciated!feel free file issue, start discussion, send pull request.licensemit"
}