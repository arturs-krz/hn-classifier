{
	"_id": "14396962",
	"site": "https://github.com/casbin/casbin",
	"title": "Casbin â€“ authorization library that supports models like ACL, RBAC, ABAC",
	"author": "andreygrehov",
	"date": "2017-06-13T13:56:41.857Z",
	"tags": {
		"categories": [
			"opensource",
			"casbin",
			"go",
			"etcd",
			"access-control",
			"authorization",
			"rbac",
			"abac",
			"acl",
			"auth",
			"library"
		],
		"languages": [
			"go"
		]
	},
	"content": "readme.md casbinnote: plugins middleware based casbin be found : https://github.com/casbincasbin is powerful efficient open-source access control library golang projects. provides support enforcing authorization based various models. far, access control models supported casbin are:acl (access control list)acl superuseracl without users: especially useful systems don't authentication user log-ins.acl without resources: scenarios may target a type resources instead an individual resource using permissions write-article, read-log. doesn't control access a specific article log.rbac (role-based access control)rbac resource roles: both users resources have roles ( groups) the same .rbac domains/tenants: users have different role sets different domains/tenants.abac (attribute-based access control)restfuldeny-override: both allow deny authorizations are supported, deny overrides allow.priority: policy rules be prioritized firewall rules. casbin, access control model is abstracted a conf file based the perm metamodel (policy, effect, request, matchers). switching upgrading authorization mechanism a project is as simple modifying configuration. can customize own access control model combining available models. example, can rbac roles abac attributes together inside model share set policy rules. most basic simplest model casbin is acl. acl's model conf is:# request definition[request_definition]r = sub, obj, act# policy definition[policy_definition]p = sub, obj, act# policy effect[policy_effect]e = (where (p.eft == allow))# matchers[matchers]m = r.sub == p.sub && r.obj == p.obj && r.act == p.act example policy acl model is :p, alice, data1, readp, bob, data2, write means:alice read data1bob write data2features casbin does:enforce policy the classic {subject, object, action} form a customized form you defined, both allow deny authorizations are supported.handle storage the access control model its policy.manage role-user mappings role-role mappings (aka role hierarchy rbac).support built- superuser root administrator. superuser do anything without explict permissions.multiple built- operators support rule matching. example, keymatch map resource key /foo/bar the pattern /foo*. casbin does do:authentication (aka verify username password a user logs )manage list users roles. believe 's more convenient the project itself manage entities. users usually their passwords, casbin is designed a password container. however, casbin stores user-role mapping the rbac scenario.installation get github.com/casbin/casbin started a casbin enforcer a model file a policy file:e := casbin.newenforcer(\"path//model.conf\", \"path//policy.csv\")note: can initialize enforcer policy db instead file, persistence section details.add enforcement hook your code right before access happens:sub := \"alice\" // user wants access resource.obj := \"data1\" // resource is going be accessed.act := \"read\" // operation the user performs the resource. e.enforce(sub, obj, act) == true { // permit alice read data1} else { // deny request, show error}besides static policy file, casbin provides api permission management run-. for example, can all roles assigned a user below:roles := e.getroles(\"alice\")note: provide sets apis manage permissions:management api: primitive api provides full support casbin policy management.rbac api: more friendly api rbac. api is subset management api. rbac users use api simplify code.please refer the _test. files more usage.syntax models: model.mdpersistence model policy be persisted casbin the following restrictions:persist methodcasbin modelcasbin policyusagefileload load/savedetailsdatabase (tested mysql) supportedload/savedetailscassandra (nosql) supportedload/savedetails think model represents access control model our customer uses is often modified run-, so don't implement api modify current model save model a file. the model cannot loaded or saved a database. model file should in .conf format. policy is much more dynamic model can loaded a file/database saved a file/database any . as file persistence, policy file should in .csv (comma-separated values) format. for database backend, casbin should support relational dbmss i tested mysql. casbin has built- database it, have setup database your own. let know there are compatibility issues here. casbin automatically create database named casbin use for policy storage. make sure provided credential has related privileges the database use.filebelow shows to initialize enforcer file:// initialize enforcer a model file a policy file.e := casbin.newenforcer(\"examples/basic_model.conf\", \"examples/basic_policy.csv\")databasebelow shows to initialize enforcer database. connects a mysql db 127.0.0.1:3306 root blank password.// initialize enforcer a model file policy database. := mysql_adapter.newdbadapter(\"mysql\", \"root:@tcp(127.0.0.1:3306)/\")e := casbin.newenforcer(\"examples/basic_model.conf\", )use own storage adapter casbin, both above file database storage is implemented an adapter. can your own adapter below:// initialize enforcer an adapter. := persist.newfileadapter(\"examples/basic_policy.csv\") // replace your own adapter.e := casbin.newenforcer(\"examples/basic_model.conf\", )an adapter should implement methods:loadpolicy(model model.model) savepolicy(model model.model). keep light-weight, don't put adapter code this main library. can choose officially supported adapters : https://github.com/casbin use like plugin above.load/save run-you may want reload model, reload policy save policy initialization:// reload model the model conf file.e.loadmodel()// reload policy file/database.e.loadpolicy()// save current policy (usually changed casbin api) to file/database.e.savepolicy()examplesmodelmodel filepolicy fileaclbasic_model.confbasic_policy.csvacl superuserbasic_model_with_root.confbasic_policy.csvacl without usersbasic_model_without_users.confbasic_policy_without_users.csvacl without resourcesbasic_model_without_resources.confbasic_policy_without_resources.csvrbacrbac_model.confrbac_policy.csvrbac resource rolesrbac_model_with_resource_roles.confrbac_policy_with_resource_roles.csvrbac domains/tenantsrbac_model_with_domains.confrbac_policy_with_domains.csvabacabac_model.confn/restfulkeymatch_model.confkeymatch_policy.csvdeny-overriderbac_model_with_deny.confrbac_policy_with_deny.csvprioritypriority_model.confpriority_policy.csv usersweb serversbeego: open-source, high-performance web framework go, via built- plugin: plugins/authzcaddy: fast, cross-platform http/2 web server automatic https, via plugin: caddy-authzgin: http web framework featuring martini- api much better performance, via plugin: authzrevel: high productivity, full-stack web framework the language, via plugin: revel-authzecho: high performance, minimalist web framework, via plugin: echo-authz (thanks @xqbumu)tango: micro & pluggable web framework go, via plugin: authzchi: lightweight, idiomatic composable router building http services, via plugin: chi-authzmacaron: high productive modular web framework go, via plugin: authzdotweb: simple easy web micro framework, via plugin: authzothersdocker: world's leading software container platform, via plugin: casbin-authz-plugin (recommended docker)pybbs-: a simple bbs fine-grained permission management based beego, via direct integrationzenpress: cms system written golang, via direct integrationlicense project is licensed under apache 2.0 license.contact you any issues feature requests, please contact . pr is welcomed.https://github.com/casbin/casbin/issueshsluoyz@gmail.com"
}