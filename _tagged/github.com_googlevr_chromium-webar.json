{
	"_id": "14370033",
	"site": "https://github.com/googlevr/chromium-webar",
	"title": "Googlevr/chromium-webar",
	"author": "taylorbuley",
	"date": "2017-06-13T13:57:07.687Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"c++",
			"python",
			"java",
			"javascript",
			"shell",
			"html",
			"other"
		]
	},
	"content": "readme.md indexoverviewdisclaimer to this repousing chromium webar prototype the apis to install use chromium webar prototypeexamplesoverview the webar apisusing webar apis threejs to build own version chromium webarsupported deviceslicenseknown issuesfuture overview project's goal is provide initial implementation a possible augmented reality (ar) api the web top chromium. initial prorotype is built top the tango platform android google. maybe, more platforms be supported the future. is precompiled working prototype can right away along documentation the apis some examples. is a tutorial how build own version modified chromium the webar apis it. major objective this project is get conversation going the subject how provide augmented reality capabilities the web: webar.disclaimer is an official google product.defining a web standard look is complex conversation. the code proposals this project are meant be definitive implementatios ar capabilities the web, some prototypes can play around at own risk have starting point build upon. use repo repository be used 2 ways:installing chromium prototype, learning the webar apis trying examples: using webar prototype the apis.compiling own version chromium webar capabilities contributing the project: to build own version chromium webar.using chromium webar prototype the apis to install use chromium webar prototype bin folder this repo holds precompiled versions chromium support webar api. check supported devices section learn devices/platforms are currently supported have been tested. you install execute build a non-tango device, warning message be shown you won't able use application. to install use chromium webar prototype android install apk can the android sdk adb command the command line. assuming you are the bin folder:bin$ adb install -r chromiumar.apk -r parameter reinstall apk case already had . there are ways install apk downloading directly your device via email example allowing android install for .the installed application display chromiumar name the android icon. executed, will show overly simplified version a browser just qrcode button (explained later), url bar the and forward buttons this version the prototype is using webview \"flavor\" chromium. qrcode buttonallows introduce urls encoded qrcodes. personally not introducing long/complex urls using on screen touch keyboard android, qrcodes come handy ( mandatory be used). order use functionality installation the barcode scanner app googleplay be required it is already installed the device. not worry, app itself prompt to install and redirect to store automagically first you press qrcode button the barcode scanner app is yet present. are multiple qrcode generators around web i highly recommend use qrcode generator. last introduced loaded url be stored future executions the app.examples repository includes several examples show basics how use webar chromium prototype the webar api top the webvr api. examples been divided raw webgl threejs based trying fill the needs developers want go deeper level use webvr+webgl directly the ones would to a higher level engine threejs. you a tango ready device have installed prototype apk, can the qrcodes provided below directly point the available examples.raw webgl based examples: available inside examples/webgl folder.video: shows basic functionality rendering video feed is associated the vrseethroughcamera.url: http://judax.github.io/webar/examples/webgl/video/qrcode:threejs based examples: available inside examples/threejs folder. examples the support three.webar.js library simplify boilerplate code while using webvr/webar api.video: shows basic functionality rendering video feed is associated the vrseethroughcamera.url: http://judax.github.io/webar/examples/threejs/video/qrcode:picking: shows an 3d model be placed the real world using point cloud functionality. also allows show vrpointcloud, 6dof motion tracking enable/disable vrseethroughcamera. even allows perform continuous picking place 3d model the real space real .url: http://judax.github.io/webar/examples/threejs/picking/qrcode:occlusion: similar the picking example in case uses point cloud enable depth based occlusion real objects occlude virtual objects.url: http://judax.github.io/webar/examples/threejs/occlusion/qrcode:wayfair google /o 2017 prototype: online shopping experience prototype. project is currently open source you test :url: https://webar-wayfair-prototype.appspot.com/qrcode:overview the webar apis implementation webar is addition some features top the webvr api specification version 1.1. ar vr share many common concepts motion tracking even see through camera a depth sensor, they be found both ar vr devices (google tango, microsoft hololens, htc vive, ...). you are familiar the webvr api, highly recommend you review before continuing some basic knowledge it be assumed the following paragraphs. the documentation specific the apis inside webvr be found online : http://judax.github.io/webar/doc/webarapi is generated the file webarapi.js found this repository. main point entry the webar api is still vrdisplay instance in webvr. actually, an ar device such tango wants be used 6dof (6 degrees freedom) vr experiences (non ar), webvr api is be used. getpose getframedata calls correctly return position orientation acquired the underlying hardware implementation. prototype exposes new vrdisplay instance the name \"tango vr device\" now the navigator.getvrdisplays call is made. there are new features the webvr spec does include that provide additional functionality based the underlying ar platform. new characteristics be identified using vrdisplaycapabilities instance obtained the vrdisplay instance now exposes 2 flags specify the device:haspointcloud: vrdisplay instance is able provide point cloud acquired a depth sensing device the underlying platform.hasseethroughcamera: vrdisplay instance is able use underlying through camera show real world. any these flags are enabled (true), new set functionalities apis be used always using vrdisplay a starting point. new methods the vrdisplay instance are:getmaxnumberofpointsinpointcloud: provides maximum number points may acquired the point cloud.getpointcloud: updates /or retrieves points the vrpointcloud type.getpickingpointandplaneinpointcloud: allows calculate collision represented the type vrpointandplane between normalized 2d position a ray casted to point cloud.getseethroughcamera: retrieves instance the type vrseethroughcamera it be used both correct fustrum calculation for rendering camera video feed synchronized the calculated pose. new data structures/classes been created support new functionalities the underlying tango platform allows types interactions/features. of calls are pretty straightforward the documentation might provide idea how could integrated any web application. one might need bit more explanation is vrseethroughcamera class it provides useful information the camera parameters ( are called camera intrinsics), it might be clear it be used render camera feed an application. the current implementation, approach has been selected is create new overloaded function the webgl api. webglrenderingcontext exposes following function:void teximage2d(glenum target, glint level, glenum internalformat, glenum format, glenum type, vrseethroughcamera? source); approach has benefits: is need retrieve pixels the image ( is very efficient pass whole frame native javascript). is full control the camera image webgl ( a fragment shader example). uses common to handle video content (teximage2d already has overloads using htmlvideoelement, htmlcanvaselement htmlimageelement among others). is caveat the current implementation should taken account doing custom rendering the camera's image it is handled inside teximage2d call requires use opengl extension is available webgl the moment: oes_egl_image_external. android chromium webar modification this repository includes activation this extension internally. is important note the fragment shader render video feed also need use corresponding extension:#extension gl_oes_egl_image_external : require...uniform samplerexternaloes map;... best recommendation better understand new webar api is review examples provided this repository try explain of new functionalities the ground both using plain webgl also threejs, most widely used 3d engine the web.please review known issues section better understand drawbacks the form log warning messages using approach.using webar apis threejs mentioned the previous section, order use video feed the underlying tango platform, 's need use webgl extension is available the webgl standard the moment. chromium implementation this repository activates so fragment shaders may it. the case threejs, it internally maps uniforms the shaders, modification the engine/library is required. is simple modification we are working making available future releases threejs directly. the getsingularsetter function is able identify set-functions the different types uniforms/attributes a shader, new type needs be added follows:function getsingularsetter( type ) {switch ( type ) {case 0x1406: return setvalue1f; // floatcase 0x8b50: return setvalue2fv; // _vec2case 0x8b51: return setvalue3fv; // _vec3case 0x8b52: return setvalue4fv; // _vec4case 0x8b5a: return setvalue2fm; // _mat2case 0x8b5b: return setvalue3fm; // _mat3case 0x8b5c: return setvalue4fm; // _mat4case 0x8b5e: case 36198: return setvaluet1; // sampler_2d // case 36198: added webarcase 0x8b60: return setvaluet6; // sampler_cubecase 0x1404: case 0x8b56: return setvalue1i; // int, boolcase 0x8b53: case 0x8b57: return setvalue2iv; // _vec2case 0x8b54: case 0x8b58: return setvalue3iv; // _vec3case 0x8b55: case 0x8b59: return setvalue4iv; // _vec4}} that case 36198 is id identifies shader uniforms type samplerexternaloes used the extension. are additional modifications needed the threejs engine. support library has been developed inside repository under three.webar folder provides functionalities ease use the underlying webar apis threejs creating basic types structures needed the three.mesh instance represents video camera quad (along the corresponding three.videotexture instance the right fragment shader), three.camera instance represents orthogonal camera correctly render video camera feed, vrpointcloud structure handles point mesh a three.buffergeometry internally render point cloud, etc. the documentation the three.webar.js file is available : http://judax.github.io/webar/doc/three.webar to build own version chromium webarimportant: repository includes the modifications the chromium repository allows add tango/webar capabilities (check chromium folder this repo). chromium is complex project gigabytes source code, resources third party libraries. some point the steps below will need copy of content this repo the actual chromium repo. * means will need have 2 repos: one chromium-webar) the chromium repo itself copy content the former the latter stated the step number 9 below.building modified version chromium is 2 step process:clone chromium project (copying changes this repository) prepare to build .build, install run.1. clone chromium project (copying changes this repository) prepare to builtchromium cloning/building instruction are available online: https://www.chromium.org/developers/-tos/android-build-instructionsanyway, order help the process, recommend follow following steps.tango is available the android platform the moment in order be able use modifications present this project, need compile chromium android can be done linux. unfortunately, document does include instructions how setup linux machine.let's assume the machine is installed along :gitpythonopen terminal window be ableinstall depot_tools. can follow tutorial simply follow 2 steps:git clone https://chromium.googlesource.com/chromium/tools/depot_tools.gitexport path=$path:/path//depot_toolscreate folder contain chromium: $ mkdir ~/chromium && cd ~/chromiumcheckout chromium repo: ~/chromium$ fetch --nohooks android. note: process may a long (an hour?)enter src folder: $ cd src.checkout specific tag a branch. tag used this build is 57.0.2987.5. can whatever name like the branch we recommend webar_57.0.2987.5 it states is webar the tag is based : ~/chromium/src$ git checkout -b webar_57.0.2987.5 57.0.2987.5. remember name the branch (webar_57.0.2987.5 our example) it be useful the next step the output folder is created.synchronize dependencies this command: ~/chromium/src$ gclient sync --disable-syntax-validation. note: process may some too.create folder where make final product compilation using same name the branch created the previous step: ~/chromium/src$ mkdir -p /webar_57.0.2987.5 our example.lscreate edit new file /webar_57.0.2987.5/args.gn the command ~/chromium/src$ gedit /webar_57.0.2987.5/args.gn ( any editor). you chose use different branch/folder name, please, the name chose this step. copy paste following content the args.gn file:target_os = \"android\"target_cpu = \"arm\" is_debug = falseis_component_build = trueenable_webvr = trueproprietary_codecs = falseffmpeg_branding = \"chromium\"enable_nacl = falseremove_webcore_debug_symbols = truecopy paste the content the chromium/src folder inside repository the ~/chromium/src folder created the step number 2 above. override every possible conflict may arise you the file explorer merging replacing. can the following command line too: cp -r path_to_this_repos_src_folder/* ~/chromium/src.prepare build: ~/chromium/src$ gn args /webar_57.0.2987.5. note: once command is executed, vi editor show the content the args.gn file edited few steps before. exit pressing esc typing colon q an exclamation mark = :q!.install build dependencies: ~/chromium/src$ build/install-build-deps-android.shsynchronize resources once again: ~/chromium/src$ gclient sync --disable-syntax-validationsetup environment: ~/chromium/src$ . build/android/envsetup.sh know, many steps be followed, once have completed of (remember some take loooong to finish), won't need execute again (except gclient sync --disable-syntax-validation you may need execute occassionally you rebase one tag another example).2. build, install runimportant: changes been done the chromium command buffer enable camera feed rendering. changes may require rebuild command buffer. python script do does execute along the regular building process the script needs be executed the following command least once ( everytime change is made the command buffer):~/chromium/src/python gpu/command_buffer/build_gles2_cmd_buffer.py tutorial specified the name the folder created during setup process above is same the branch (webar_57.0.2987.5). is coincidence, the build_install_run.sh shell script provided along this documentation allows build chromium project depending the current checked git branch. script only compiles chromium also tango native library called tango_chromium handle tango sdk calls. moreover, script installs final apk to connected device runs , so is convenient you connect tango device via usb before executing . the project will built default is chromium webview project, only that has been modified provide tango/webar capabilities.~/chromium/src/build_install_run.sh can review content the script see it does ( is fairly simple script) if would to compile final apk your own could it executing following command:~/chromium/src$ ninja -c /webar_57.0.2987.5 final apk be built the folder ~/chromium/src//webar_57.0.2987.5//apks. brief overview the chromium source code modifications support webar in progresssupported devices current version chromium supports webar has been built top tango has been tested the following devices:tango development kit tabletandroid version: 4.4.2tango core version: 1.53:2017.04.28-hopak-release-0-gb1545f34:190015395:stabletango sdk version: hopaklenovo phab 2 proandroid version: 6.0.1tango core version: 1.53:2017.04.28-hopak-release-0-gb1545f34:230015395:stabletango sdk version: hopakasus zenfone arandroid version:tango core version:tango sdk version: hopaklicenseapache license version 2.0 ( the `license' file inside repo).known issues webview flavor chromium. current implementation webar is built top the chromium webview flavor. has implementation advantages some performance use disadvantages. are working making implementation a full version chromium.black view pausing/resuming app. is consequence having built implementation top the webview flavor chromium. some point, chromium committers introduced bug. proper implementation full chromium a rebase a different chromium webview version might solve annoying problem.granting permissions. currently, the neccessary permissions are requested soon the application starts. is how web works the permissions should requested needed the underlying apis.console warning: render warning: is texture bound the unit x. the vrseethroughcamera rendering requires external image texture extension the moment, underlying webgl implementation has mismatch the type texture has been bound. initial solution this warning message has been tested ( that worked) is expose correct target type the vrseethroughcamera texture: gl_texture_external_oes. problem approach is it requieres serious modifications both chromium specially threejs for , this warning be shown the console :(.logcat error: tangoegl: bindtextureimage: error binding external texture image 0xab874310: 0x502. similar consequence the previous known issue. tango, while updating camera image texture is expecting the texture is bound is the correct target gl_texture_external_oes this gl error is logged.future adapt implementation the webvr spec proposal version 2.0.implement prototype full chromium ( on webview flavor) to newer tag verion (>57.0.2987.5).improve vrseethroughcamera rendering pipeline either making obscure the developer by using regular webgl textures shader samplers without having use external image texture extension.add more tango sdk \"hidden\" features: mesh reconstruction, area description, marker detection, ...develop more examples.6dof vr example.fully operational example shows possibilities webar online shopping."
}