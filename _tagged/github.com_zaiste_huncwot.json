{
	"_id": "14456997",
	"site": "https://github.com/zaiste/huncwot",
	"title": " Huncwot – a Koa / Express alternative built for ES6+ and Node 8 era",
	"author": "zaiste",
	"date": "2017-06-13T13:05:04.109Z",
	"tags": {
		"categories": [
			"opensource",
			"nodejs",
			"web-framework",
			"http",
			"es6",
			"es7",
			"async-await",
			"es7-async",
			"node-js"
		],
		"languages": [
			"javascript",
			"html"
		]
	},
	"content": "readme.md huncwot (pre-alpha)huncwot is fast, opinionated minimal node.js web framework built es6/7 era « batteries included » approach. exclusively supports node 7.6+ avoid transpilation pipeline any kind. is integrated solution optimizes programmers productivity reducing choices incorporating community conventions.website |contribution guide |twitterhello huncwot is example a basic huncwot application. save to file e.g. main.js, run with node main.js visit application https://localhost:5544.const huncwot = require('huncwot');const { ok } = require('huncwot/response');const app = huncwot();// implicit `return` a `text/plain` responseapp.('/', _ => 'hello huncwot')// explicit `return` a 200 response `application/json` typeapp.('/json', _ => { return ok({ : 1, b: 2 });})// set own headersapp.('/headers', _ => { return { body: 'hello b', statuscode: 201, headers: { 'authorization': 'pass' } }})// request body is parsed `params` defaultapp.post('/bim', request => { return `hello post! ${request.params.name}`;})app.listen(5544); example shows regular, server-side application the style express koa, e.g. define various routes a combination paths functions attached it .e. route handlers. contrast express, huncwot handlers take http request input always return http response: either defined explicitly an object body, status, etc keys, implicitly an inferred type e.g. text/plain as wrapping function e.g. ok() 200, created() 201.rationalehuncwot is being built battery included approach mind, .e. comes a (eventually large) library useful modules are developped a coherent . this stands direct opposition koa approach. huncwot tries formalize conventions eliminate valueless choices providing solid defaults building web applications increase programmers productivity.getting startedinstall huncwot globally use cli commands simplify frequent operations. also need install yarn.yarn global add huncwotgenerate applicationhuncwot my-project cd -projectstart application using built- development serverhuncwot servervisit https://localhost:5544usagehuncwot be used a replacement express koa, it goes beyond by providing opinionated choices other layers the stack (view, orm, etc) required build fully functional web application. are essential ways huncwot constract web application: traditional server-side modern component-based. nonenthless, those approaches be combined any proportion.server-sideserver-side means the application content is generated the server. usually here terms pages available particular paths. routing is performed the server paths corresponding pages.here's server-side example a huncwot application.const huncwot = require('huncwot');const { page, gzip } = require('huncwot/view');const app = huncwot();app.('/', request => gzip(page('index', { name: 'frank' })))app.listen(5544);component-basedcomponent-based means pages are built combining components: independant chunks html their own styling behaviour defined javascript. is usually a single page (rendered the server) which components are being attached - happens the browser (client-side). routing is usually performed the browser paths corresponding components.here's component exampleclass { oncreate() { .state = { count:0 }; } increment() { .state.count++; }}style { .count { font-size:3em; } .example-button { font-size:1em; padding:0.5em; }}<h1 class=\"title\">here dragons!</h1><h2 class=\"subtitle\"> experience huncwot magic carefully follow instruction.</h2><div.count> <p class=\"title count\">${state.count}</p></div><button.is-danger.button.is-outlined -click('increment')> click !</button>conceptsviewhuncwot uses marko the view layer handle both server-side template generation browser, component-based approach.const huncwot = require('huncwot');const { page, gzip } = require('huncwot/view');const app = huncwot();app.('/', request => gzip(page('index', { name: 'frank' })))app.listen(5544);huncwot provides helper functions simplify usual operations the request/response cycle. is gzip compresses response along setting proper headers, page function checks pages/ directory marko templates. before running example, sure have pages/ directory the root your project along the following index.marko<!doctype html><html><head> <title>marko example</title></head><body> <h1>hello ${input.name}</h1></body></html>routes can define route using of http verbs e.g. .(), .post(), .put(), .patch() .delete() - takes string defines desired path a function defines action will exectued once route is hit. action takes incoming request its parameter returns response will send the client. response is represented a javascript object must at least body statuscode keys. conventions, return string value is considered be 200 response type plain/text body set that string. is a reply helper function allows create responses application/json type of javascript objects.parameters are kinds parameters possible a web application: ones are sent part the url ?, called query string parameters; the ones are sent part the request body, referred as post data (usually comes an html form as json). huncwot does make distinction between query string parameters post parameters, both are available the request params object.moduleshuncwot comes a set modules enable common functionalitiesauthapp.(auth({ users: { 'admin': 'secret' }}))staticapp.(static('./public'))3-rd party integrationsnunjucks integrationconst huncwot = require('huncwot');const { html } = require('huncwot/response');const nunjucks = require('nunjucks');const app = huncwot();nunjucks.configure('views', { autoescape: true });app.('/', request => { return html(nunjucks.render('index.html', { username: 'zaiste' }));})app.listen(3000); your project create views/ directory the following index.html<!doctype html><html><head> <title>nunjucks example</title></head><body> <h1>hello {{ username }}</h1></body></html>exampleshuncwot-component-app basic huncwot application using componentshuncwot-server-app basic server-side huncwot applicationhuncwot-rest-api rest api built huncwothuncwot-graphql-api graphql api built huncwotroadmaphuncwot keeps track the upcoming fixes features github projects: huncwot roadmapbug reports use github issues managing bug reports feature requests. you run problems, please search issues submit new here:https://github.com/zaiste/huncwot/issuesdetailed bug reports are always great; 's event better you are able include test cases."
}