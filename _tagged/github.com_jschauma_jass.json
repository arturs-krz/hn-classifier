{
	"_id": "14402411",
	"site": "https://github.com/jschauma/jass",
	"title": "Jass â€“ a tool to share secrets using SSH keys (and GitHub)",
	"author": "NightMKoder",
	"date": "2017-06-13T13:56:40.939Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"go",
			"shell",
			"makefile",
			"python"
		]
	},
	"content": "readme.md quick summaryjass(1) is tool let encrypt/decrypt data using ssh keys. keys be provided locally, fetched ldap, retrieved github another external keyserver.please below further details.installing jass you run x86-64 based rpm based linux version, can download rpm jass(1) here(gpg signature). you run os x, can download dmg installer here (gpgsignature). pgp signatures are created using pgpkey. you to build jass(1) yourself, can run:git clone https://github.com/jschauma/jass.gitcd jass install will copy binary manual page under /usr/local whereverprefix points .sharing secretsevery and we a need share \"secret\" somecow-orkers. coordinating can problematic, since would eitherneed be the same physical space the same , or would need be able talk the phone ( know who 're talking is fact person think 're talking ) etc. etc.wouldn't be nice you just attach file question anemail, insert into ticketing system, drop on shared host?using ssh keysmany organizations already ssh keys access their hosts. is, have central place (local file systems shared hosts well ,perhaps, ldap) where have public keys you already trust belong the given person. engineers are familiar ssh(1) the of ssh keys authentication, what everybody might aware is by very nature keys also used encryption non-ssh related data.jass(1) does that. supports encryption multiple keys should generally reasonably \"user friendly\".supported platformsjass(1) is written go, it should run pretty much anywhere you build binary . (an older version jass(1) written shell is available the 'src' directory.)jass(1) was tested the following systems:centos release 5 6redhat enterprise linux 6.5mac os x 10.10.3netbsd 6.0.1finding keys can specify public key(s) encrypt data on command-line.alternatively, jass(1) try fetch key(s) a given user members a unix group ldap a keyserver. can specify default method the sources prior buildingjass(1); support a configuration file may added the future.keykeeper serverjass(1) query \"keykeeper\" server retrieve public ssh keys. doing , it expects server respond json data the format:{ \"result\" : { \"keys\" : { \"key\" : [ { \"trust\" : \"string\", \"content\" : \"ssh-rsa aaaab3nzac1...\", \"sudo\" : \"string\", \"type\" : \"string\", \"validated\" : \"string\", \"api\" : \"string\" }, ... ] }, \"status\" : \"string\", \"user\" : \"string\" }} to jass(1)encrypting data encrypt file service.yml the local user jschauma send via email:$ jass -u jschauma <service.yml | \\ mail -s \"please the needful!\" jschauma you not a user named 'jschauma' your local systems, nor ldap ( you set up), you ask jass(1) look user'skey github specifying '-g' flag: example, encrypt message linus torvalds, might run:$ echo \"0- in ext4, ping for details\" | jass -g -u torvaldsplease the manual page details other examples.decrypting data decrypt data, need have access the private ssh key question. means this should happen a shared box instead is likely occur your desktop, laptop other privatesystem:jass -d -k ~/.ssh/privkey <secretfaqwhy don't just pgp?why indeed. pgp has many advantages more widespread would things lot easier, very few appear use . if 'reinterested getting introduction pgp, 'll gladly and you your team presentation.why does ask for passphrase decrypting? 't get from ssh agent?unfortunately key available any possible ssh agent cannot used jass(1), since are actually using ssh(1) all: just happen use ssh key. the key is encrypted, we need prompt user the passphrase. wrote tool?jass(1) was originally written jan schaumann (jschauma@netmeister.org) april 2013. can read more it here:http://www.netmeister.org/blog/sharing-secrets-using-ssh-keys.htmlhttp://www.netmeister.org/blog/jass.htmlhttps://www.netmeister.org/blog/ssh2pkcs8.html"
}