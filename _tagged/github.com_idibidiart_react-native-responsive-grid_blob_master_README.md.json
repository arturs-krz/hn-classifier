{
	"_id": "14379537",
	"site": "https://github.com/idibidiart/react-native-responsive-grid/blob/master/README.md",
	"title": "A Unified Theory of Layout",
	"author": "bambooshoot",
	"date": "2017-06-13T13:57:07.417Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "i made grid happened be thinking the innocence trees then grid came my mind i thought represented innocence, i still , and i painted and i was satisfied. thought, is vision. --agnes martinresponsive adaptive layout react nativeinstall your project folder, yarn add react-native-responsive-grid*requires react native 0.43.x newerbackgroundbefore react native v0.42 didn't a performant, declarative of specifying percentage-based dimensions. came react native v0.42 gave that ability. since several open source contributors made responsive grids take advantage this capability. \"grid\" takes of simplest most -thought- ones, namely, react-native-flexbox-grid ( @rundmt), modifies heavily produce simple yet powerful layout model we use implement responsive adaptive behavior our apps. unified theory layout grid eschews flexbox-based sizing favor percentage-based sizing while the same relying flexbox alignment. delivers predictability the percentage-based model the more sophisticated alignment capasbility the flexbox model. grid construct is extended beyond archetypal form a rectilinear 2d grid generalized two cross-nestable, orthogonal components, namely, row column, can combined an alternating pattern build tree views any shape depth. is say, row view (row short) may contain or more column views (column short), each which may contain or more rows, in turn may contain or more columns, so . both rows columns be styled using predictable, percentage-based width, height, padding margins. rows be aligned vertically (along main axis) horizontally (along cross axis) inside columns, columns be aligned horizontally (along main axis) vertically (along cross axis) inside rows. [additionally, multiple lines created wrapped row content may aligned vertically relative the parent column.] with , we build entire ui component tree ( an individual component's subtree) using consistent, repeatable recursive pattern, that has predictable dynamic -- only static-- responsiveness the ability trigger specific adaptive behavior built it. tree nodes are represented rows their children are represented columns. tree leaves are columns have row a child. grid a tree? this grid, don't lose aspect the normal rectilinear 2d grid. just gain generalized consistent of building responsive ui component trees. normal rectilinear 2d grid is tree where rows are children the columns within each are grand children. a ui is constructed a tree arbitrary shape corresponds the ui's visual composition, a normal rectilinear 2d grid is simplest tree structure for layout farmework, is the responsive grid is, want ability build ui view trees any shape complexity predictable responsive behavior. is this grid gives . it's granular, responsive layout system, just design/formatting tool. could certainly constructa high level rectilinear 2d grid it, that is a specific case.( more details design principles)react native examples may this grid build responsive 2d layouts maintain relative proportions, change basic structure a predictable and dynamically decide content display, based screen size, aspect ratio, orientation.example 1: aspectratioexample 2: breakpoints (row wrapping)example 3: layouteventexample 4: flatlist + row & column wrapping demos the videos above show of possibilities, this grid is capable more complex responsive adaptive behavior.example 1 the demo, grid picks image the closest aspect ratio the device aspect ratio, dynamically, taking account current device orientation. images themselves must cropped the designer that match common device aspect ratios ( below) while showing part the image the designer intends show each aspect ratio. since could many aspect ratios correspond different devices should multiple such images (, optionally, rotated versions.) following table maps common device aspect ratios the ratio width/height devices known this developer, both landscape portrait device orientations. physical device aspect ratio does change device rotation (.e. device 16:9 aspect ratio does become with 9:16 aspect ratio it's rotated, although does mathematically), since width height flipped changing orientation portrait lanscape vice versa, need have images per each physical device aspect ratio, for portrait mode the for landscape. however, our app supports portrait landscape mode we need have one corresponding that orientation.aspect ratiowidthheightwidth/height ratio (landscape)devices'16:9'5683201.77iphone 5'16:9'6673751.77iphone 6 & 7'16:9'7364141.77iphone 6 plus & 7 plus'16:10'??1.6?'3:2'4803201.5iphone 4'4:3'10247681.33ipad mini, ipad air small ipad pro'4:3'136610241.33large ipad pro'1:1'1???aspect ratiowidthheightwidth/height ratio (portrait)devices'16:9'3205680.56iphone 5'16:9'3756670.56iphone 6 & 7'16:9'4147360.56iphone 6 plus & 7 plus'16:10'??0.625?'3:2'3204800.66iphone 4'4:3'76810240.75ipad mini, ipad air small ipad pro'4:3'102413660.75large ipad pro'1:1'1???<row> <col fullwidth aspectratio={{ratio: '3:2', orientation: \"portrait\"}}> <image source={require('./assets/homepage hero-3-2-portrait.jpg')} style={styles.homeimage}></image> </col></row><row> <col fullwidth aspectratio={{ratio: '3:2', orientation: \"landscape\"}}> <image source={require('./assets/homepage hero-3-2-landscape.jpg')} style={styles.homeimage}></image> </col></row><row> <col fullwidth aspectratio={{ratio: '16:9', orientation: \"portrait\"}}> <image source={require('./assets/homepage hero-16-9-portrait.jpg')} style={styles.homeimage}></image> </col></row><row> <col fullwidth aspectratio={{ratio: '16:9', orientation: \"landscape\"}} <image source={require('./assets/homepage hero-16-9-landscape.jpg')} style={styles.homeimage}></image> </col></row>example 2 the second demo, grid folds columns a row has been tagged 'wrap' prop using , using screen-device-depebdent breakpoints prop the column. means different break points be supplied the different screen sizes. example demonstrates to row content (e.g. child columns) wrap certain break points ( can supplied per screen width) following are preset screen widths which breakpoints maybe specified:sm: <= 480pxmd: > 480 < 1024lg: >= 1024 < 1366xl: >= 1366<row style={{paddingtop: '6%', paddingbottom: '6%', backgroundcolor: 'white', borderbottomcolor: 'lightgray', borderbottomwidth: 1}}> <col size={80} offset={6} > <row wrap> <col size={50} breakpoints={{sm: 200}}> <text style={{fontsize: 15, color: '#bd1206', fontweight:'bold'}}>february 28, 2017</text> <row> <col size={5}> <fontawesome name='shopping-cart' size={17} color='gray'/> </col> <col size={60} offset={2.5}> <text style={{fontsize: 12, color: 'gray', lineheight: 20}}>takeout order</text> </col> </row> </col> <col size={50} breakpoints={{sm: 200}}> <text style={{fontsize: 16, color: '#0a0a0a'}}>grilld cheese sandwich</text> <text style={{fontsize: 16, color: '#0a0a0a'}}>key lime pie</text> </col> </row> </col> <col size={14} offset={-6} halign='right'> <materialicons name=\"keyboard-arrow-right\" size={28} color=\"#bd1206\" style={{left: 5}} /> </col></row>example 3 the third demo, normally, each row automatically rerenders itself upon receiving react native's layout change event running pending transitions (library do have do anything.) 'layoutevent' is supplied a prop a row a row-specific event name row emit event upon receiving react native's layout change event rather re-render. is useful we wish react layout change per-row basis. example below shows we may listen react such specific layout events components.import react, { component} 'react'import { view, text, deviceeventemitter} 'react-native'import { row, column col} 'react-native-responsive-grid'export default class home extends react.component { constructor (props) { super(props) .sub = null } static route = { navigationbar: { title: 'home', rendertitle: \"layout event demo\", backgroundcolor: \"#fff\" } } componentwillmount() { .sub = deviceeventemitter.addlistener(\"someeventkey\", (e) => { .setstate({someeventkey: e}) }) } componentwillunmount() { .sub.remove() } contentready = () => { (this.state && .state.someeventkey) { return ( <col fullwidth halign='center'> <row> <text style={{fontsize: 20}}>screen width: {.state.someeventkey.screeninfo.width}</text> </row> <row> <text style={{fontsize: 20}}>screen height: {.state.someeventkey.screeninfo.height}</text> </row> <row> <text style={{fontsize: 20}}>orientation: {.state.someeventkey.screeninfo.aspectratio.currentorientation}</text> </row> <row> <text style={{fontsize: 20}}>aspect ratio: {.state.someeventkey.screeninfo.aspectratio.currentnearestratio}</text> </row> <row> <text style={{fontsize: 20}}>element width: {.state.someeventkey.rowinfo.width}</text> </row> <row> <text style={{fontsize: 20}}>element height: {.state.someeventkey.rowinfo.height}</text> </row> <row> <text style={{fontsize: 20}}>element x: {.state.someeventkey.rowinfo.x}</text> </row> <row> <text style={{fontsize: 20}}>element y: {.state.someeventkey.rowinfo.y}</text> </row> </col> ) } else { return null } } render() { return ( <row fullheight fullwidth valign='middle' halign='center' style={{backgroundcolor: 'orange'}}> <col size={50} style={{backgroundcolor: 'pink', padding: '0%'}}> <row layoutevent=\"someeventkey\" style={{backgroundcolor: 'yellow'}}> {.contentready()} </row> </col> </row> ) }}example 4flatlist is virtualized replacement react native's old listview component. using flatlist a container is supported this grid. example demonstrate wrapping column content based screen size. ('size' prop under props section.) also demonstrates to wrap row content (e.g. child columns) based screen size ( see example 2 more details)import react, { component } 'react';import { flatlist, text, scrollview} 'react-native';import { row, column col} 'react-native-responsive-grid'import { materialicons } '@expo/vector-icons';import faker 'faker';let j = 0const randomusers = (count = 10) => { const arr = []; (let = 0; < count; ++) { arr.push({ key: faker.random.uuid(), date: faker.date.weekday(), name: faker.name.firstname(), job: faker.name.jobtitle(), index: j++ }) } return arr}export default class home extends component { state = { refreshing: false, data: randomusers(10), }; onendreached = () => { const data = [ ....state.data, ...randomusers(10), ] .setstate(state => ({ data })); }; onrefresh = () => { .setstate({ data: randomusers(10), }); } render() { return ( <flatlist data={.state.data} initialnumtorender={10} onendreachedthreshold={1} onendreached={.onendreached} refreshing={.state.refreshing} onrefresh={.onrefresh} renderitem={ ({ item }) => { return ( <row key={item.key} style={{paddingtop: '6%', paddingbottom: '6%', backgroundcolor: 'white', borderbottomcolor: 'lightgray', borderbottomwidth: 1}}> <col size={80} offset={6} > <row wrap> <col size={60} > <text style={{fontsize: 15, color: '#bd1206', fontweight:'bold'}}>{string(item.date)}</text> <row> <col size={10}> <materialicons name='person' size={17} color='gray'/> </col> <col smsize={60} size={87.5} offset={2.5}> <text style={{fontsize: 12, color: 'gray', lineheight: 20}}>{item.job}</text> </col> </row> </col> <col size={40} breakpoints={{sm: 200}}> <text style={{fontsize: 16, color: '#0a0a0a'}}>{item.name}</text> </col> </row> </col> <col size={8} offset={-6} halign='right'> <text>{item.index}</text> </col> </row> ) } } />) }}props props are case sensitive.aspectratio ( example 1)breakpoints ( example 2)layoutevent ( example 3)size may supplied prop column. possible values is 0 infinity. number defines width the column is a percentage its parent view's computed explicitly set width. defaults content width ( no width.) since size accepts number 0 infinity ( horizontal scroll limit), can the column wide you .smsize, mdsize, lgsize xlsize are device-dependent size values are applied columns. addition their utility deciding size content based screen size, may are used defining column wrapping behavior based screen size. example, column content wrap column size is made smaller smaller screen sizes.offset may applied column. accepts number. number defines marginleft ( marginright csase rtl mode) the column a percentage its parent view's computed explicitly set width. offset values also negative. default is 0.smoffset, mdoffset, lgoffset xloffset are device-dependent offset values are applied columns.using offset values rtl mode moves things right left. using in normal ltr mode moves things left right. 's pretty normal expect . if 're working both directions, makes offsets more useful using marginleft marginright directly.smhidden, mdhidden, lghidden xlhidden - may applied column. tells grid hide certain columns based the current width the screen.valign may supplied prop column vertically align elements /or rows within . possible values are: middle, top, bottom, space distribute. default is top.valign may be supplied prop row align columns within in vertical direction. possible values are: top, middle, bottom stretch. default is top.halign may supplied prop row align columns within in horizontal direction. possible values are: center, left, right, space distribute. default is left.halign may be supplied prop column align rows /or elements within in horizontal direction. possible values are: center, left, right, stretch. default is left.rtl may supplied prop row both reverse order columns ( elements) inside row well to set halign 'right.' is useful right--left layouts.fullheight may supplied prop row column. sets the height 100% the computed explicitly height its parent view.fullwidth may supplied prop row column. sets the width 100% the computed explicitly set width its parent view.wrap may supplied prop row wrap child element is otherwise rendered fully outside the width the row's computed explicitly set width.alignlines may supplied prop row vertically align wrapped lines within row ( to confused the items are inside each line.) possible values are: top, middle, bottom, space, distribute, stretch. ( section aligning wrapped lines within rows) screen-size-specific size props (smsize, mdsize, lgsize, xlsize), screen-size-specific offset props (smoffset, mdoffset, lgoffset xloffset) the screen-size-specific hidden props (smhidden, mdhidden, lghidden, xlhidden) props refer the effective screen width, changes orientation. following are screen width thresholds these props:sm: <= 480pxmd: > 480 < 1024lg: >= 1024 < 1366xl: >= 1366nesting you're nesting column inside row is inside another column is inside another row below:<row> <col size={50}> <row> <col size={50}> <text> column is 25% the outer view's width ( 25% the screen width the top level row has parent) </text> </col> </row> </col></row> nested column's size be column size value (size, sm, md, lg, xl) a percentage the width the preceding column the hierarchy . nested percentages model applies offsets, too.rtl support is intended right--left (rtl) layouts apps have text any the following languages:arabicaramaicazeridhivehi/maldivianhebrewkurdish (sorani)persian/farsiurdunotice reversed order the text relative the physical order the markup. notice columns are justified flex-end within row their content is rightaligned (except the second column is explicitly leftaligned mimic rightaligned behavior normal ltr layout)normal ltr markup<row style={{paddingtop: '11%', paddingbottom: '4%', backgroundcolor: '#f3f3f3', borderbottomcolor: 'lightgray', borderbottomwidth: 1}}> <col size={60} offset={6} > <text style={{fontweight: 'bold', fontsize: 18, color: 'black'}}> previous orders </text> </col> <col size={30} halign='right'> <text style={{ fontsize: 16, color: '#bd1206'}}> all </text> </col></row>rtl markupnotice offset values in rtl direction . the addition .7 offset is mimic fact the left margin the ltr layout is smaller the right margin that layout, whereas 's opposite the rtl direction. the .7 offset is used rtl layout instead the 1 offset, alignment is identical.<row rtl style={{paddingtop: '11%', paddingbottom: '4%', backgroundcolor: '#f3f3f3', borderbottomcolor: 'lightgray', borderbottomwidth: 1}}> <col size={60} offset={4} > <text style={{fontweight: 'bold', fontsize: 18, color: 'black'}}> previous orders </text> </col> <col size={30} halign='left'> <text style={{ fontsize: 16, color: '#bd1206'}}> all </text> </col></row>predictable, dynamic layout behaviorbeing able readt layout changes, including changes due device rotation ( apps allow ), is key aspect responsive design. grid is designed enable dynamic response layout changes ( the demos the start this readme)columns rows position: 'relative' enforced design keep within layout flow. each be moved within parent row column, respectively, using top bottom margins /or offsets. columns be made overlap horizontally within row using negative offset ltr rtl directions ( rtl support.) rows be made overlap vertically within column using negative top bottom margins. intent is allow free positioning rows columns without taking out the layout flow. is required have predictable response layout change.elements, including column elements, must wapped a row order the grid react layout changes those elements, including mounting, un-mounting re-mounting. can decide where re-rendering happens the component subtree placing layoutevent prop the desired row node ( layoutevent demo markup introduction.)more examplesimport {column col, row} 'react-native-responsive-grid';<row> <col smsize={50} mdsize={33.333} lgsize={25}> <text> column</text> </col></row> the example abovw, a phone portrait mode, column take 50% the row's computed width. a phone landscape nmode a normal tablet column take 33.333% the row's width. a big tablet column take 25% the row's width.import {column col, row} 'react-native-responsive-grid';<row style={{height: 20}}> <col smoffset={0} mdoffset={10} lgoffset={20} xloffset={40}> <text>test</text> </col></row> the example above, text \"test\" move further the right larger screen sizes.import {column col, row} 'react-native-responsive-grid';<row> <col smhidden> <text>column displayed width is <= 480</text> </col> <col mdhidden lghidden xlhidden> <text>column displayed width is > 480</text> </col></row> the example above, column all it's children be hidden small screens phones, it appear bigger screens tablets. size-prefixed 'hidden' props may applied columns. hidden props are booleans. default false. more examplesresponsive layoutcustom componentswrapped alignment"
}