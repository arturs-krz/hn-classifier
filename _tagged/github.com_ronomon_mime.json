{
	"_id": "14402172",
	"site": "https://github.com/ronomon/mime",
	"title": "A fuzz-tested email parser for Node.js",
	"author": "jorangreef",
	"date": "2017-06-13T13:56:41.767Z",
	"tags": {
		"categories": [
			"opensource",
			"mime",
			"rfc-5322",
			"rfc-2045",
			"rfc-2046",
			"rfc-2047",
			"rfc-2183",
			"rfc-2231",
			"decoder"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md mimefast, robust, standards-compliant mime decoder. ships extensive tests fuzz tests.installationnpm install @ronomon/mimefastdecodes demand as much necessary access particular property. example, you need mime.subject, mime search the crlfpair marking end the headers decode the subject header,without decoding other headers without decoding body. works with first few layers spam defenses, often need decodeparticular headers reject email.caches decoded properties subsequent .uses native fuzz-tested c++ base64 quoted-printable bindings.mime's base64 decoder particular was developed decoding wrapped base64more efficiently detectingobvious corruption character truncation.uses custom lookup tables minimize cost branching through too manyconditionals decoding.avoids unnecessary string buffer allocations. algorithms accept work buffers directly, allocate copy buffers when necessary.avoids regular expression decoders.robustprovides detailed error messages refer the relevant rfcs assistdebugging, which be used directly part an smtp reply.accepts crlf lf line-endings ( are common) not crline-endings ( are rare).accepts illegal transport padding frequently added intermediaries (e.g.within angle brackets a msg-id angle-addr, between tokens an encoded-word).decodes variety malformed common mailbox syntaxes (e.g. anglebrackets around addr-spec, a display-name present the left right).removes balanced single quotes around display-name addr-spec anemail address (sometimes added outlook).decodes encoded-words separated wsp.decodes encoded-words empty encoded-text.decodes encoded-words found content-type content-dispositionparameters (used outlook gmail contrary rfc 2047 5 ofencoded-words message headers).removes directory path components an attachment name filename( accessed via mime.filename, usage below).decodes msg-ids separated whitespace commas (.e. separated by angle brackets).rejects unrecognized content-transfer-encoding mechanisms contrary rfc 2045 6.4 (e.g. anything than 7bit, 8bit, binary, base64, quoted-printable). is avoid accepting responsibility content will display correctly, at . in contrast, spec advocates silently altering content-type.rejects malicious rfc 2231 continuation indices designed causeoverallocation.rejects base64 data containing illegal characters (anything is avalid base64 whitespace character, e.g. null bytes could cause securityissues).rejects base64 data is clearly truncated ( opposed just missingpadding).rejects quoted-printable data containing illegal characters (anything is a valid quoted-printable character, e.g. null bytes could causesecurity issues).rejects illegal character sequences according the specified charset.rejects truncated character sequences according the specified charset.normalizes aliases variety character sets the canonical characterset, (e.g. ks_c_5601-1987 is sometimes used outlook is aliased cp949 - korean, otherwise characters decode the wrong characterset be unintelligible).rejects unknown character sets supported iconv.decodes text/* body parts utf-8 buffers the content-type indicates the body is encoded any character set.rejects unterminated comments quoted-strings.rejects invalid content-type syntax.detects missing multipart parts (e.g. terminating boundary delimiter).rejects dangerous message/external-body message/partial media types.decodes variety time zones year formats.accepts missing zone assumes utc support email clients such blackberry do provide required zone the date header.rejects invalid date header syntax.rejects missing header.rejects headers containing forbidden characters.rejects folded header lines exceed 998 line length limit, only allowing clients such outlook.com exclude field-name colon their character count, which mistake limit be 1000 characters excluding crlf. limit is fact 998 charactersexcluding crlf.rejects multipart boundaries containing forbidden characters.rejects malicious data designed cause cpu-intensive decoding stackoverflows.rejects malicious multiple occurrences crucial headers parameters, could cause clients render email differently that scanned anti-virus software.standards-compliantrfc 5322 - internet message format.rfc 2045 - multipurpose internet mailextensions (mime) part : format internet message bodies.rfc 2046 - multipurpose internet mailextensions (mime) part : media types.rfc 2047 - mime (multipurpose internetmail extensions) part three: message header extensions non-ascii text.rfc 2183 - content-dispositionheader field.rfc 2231 - mime parameter value encoded word extensions: character sets, languages, continuations.usagevar mime = require('@ronomon/mime');// instantiate new mime instance ( decoding take place):var mime = mime.message(buffer);// decoding take place the following getter properties are accessed.// getter properties may throw exception malformed mime data.mime.headers; // { 'received': [<buffer>] }mime.body; // <buffer>mime.; // [ { name: <string>, email: <string> } ]mime.sender; // { name: <string>, email: <string> } / undefinedmime.replyto; // [ { name: <string>, email: <string> } ]mime.; // [ { name: <string>, email: <string> } ]mime.cc; // [ { name: <string>, email: <string> } ]mime.bcc; // [ { name: <string>, email: <string> } ]mime.messageid; // <string> / undefinedmime.references; // [ <string>, <string> ]mime.inreplyto; // [ <string>, <string> ]mime.date; // <unix timestamp integer> / undefinedmime.subject; // <string>mime.contentdisposition; // { value: <string>, parameters: {} }mime.contenttype; // { value: <string>, parameters: {} }mime.contentid; // <string> / undefinedmime.filename; // <string> / undefinedmime.parts; // [ <mime.message>, <mime.message> ]tests run included tests fuzz tests:node test.js"
}