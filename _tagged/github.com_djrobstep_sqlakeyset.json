{
	"_id": "14421347",
	"site": "https://github.com/djrobstep/sqlakeyset",
	"title": " Sqlakeyset: easy offset-free paging for sqlalchemy",
	"author": "djrobstep",
	"date": "2017-06-13T13:06:43.998Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"makefile"
		]
	},
	"content": "readme.rst sqlakeyset: offset-free paging sqlalchemy library implements keyset-based paging sqlalchemy (both orm core). library has been tested postgresql mariadb/mysql. should with sqlalchemy-supported databases too provided support row( syntax ( below).background lot people sql's offset syntax implement paging query results. trouble that is, more pages get through, slower query gets. , if results 're paging through change frequently, 's possible skip or repeat results between pages. keyset paging avoids problems: selecting the millionth page is fast selecting first.sqlakeyset seems work so far, is its early stages development, as such, is alpha software. treat accordingly.getting startedhere's it works a typical orm query: sqlakeyset import get_page sqlbag import s models import book s('postgresql:///books') s: # create session q = s.query(book).order_by(book.author, book.title, book.id) # # gets first page page1 = get_page(q, per_page=20) # gets key the next page next_page = page1.paging.next # gets second page page2 = get_page(q, per_page=20, page=next_page) # returning the page, getting key previous_page = page2.paging.previous # first page again, backwards the previous page page1 = get_page(q, per_page=20, page=previous_page) # if items were added the start? page1.paging.has_previous: # back further previous_page = page1.paging.previous page1 = get_page(q, per_page=20, page=previous_page)under hoodsqlakeyset does following your query order get paged contents:adds where clause, get rows the specified row key. getting previous page, reverses order direction order get rows before specified bookmark.adds limit clause, fetch enough items fill page, plus additional ( additional row is used to test the existence further pages the current , and is discarded the results).returns page contents an ordinary list has attached .paging attribute the paging information this related pages.page objectspaged items/rows are returned a page object, is vanilla python list, except an attached paging object the paging information.properties such next previous return 2-tuple containing ordering key the row, a boolean specify the direction is forwards backwards. our above example, 2-tuple specifying second page might like:('joseph heller', 'catch 22', 123), false false means query fetch page the row containing catch 22. tuple contains elements, title id, match order clause the query. page before row be specified :('joseph heller', 'catch 22', 123), true first last pages are fetched none instead a tuple, for first page ( is the default the page parameter is specified):none, false the last page:none, truekeyset serialization will probably to turn keysets/bookmarks passing around. sqlakeyset includes code do . to a serialized bookmark, add bookmark_ the name the property holds keyset want. commonly 'll next previous, :>>> page.paging.bookmark_previous<:1~:2015~s:bad blood~:34>>> page.paging.bookmark_next>:1~:2014~s:shake off~:31sqlakeyset uses python csv row serializer serialize bookmark values (using ~ instead a , the separator). direction is indicated > (forwards/next), < (backwards/previous) the start the string.limitationsgolden rule: always ensure keysets are unique per row. you violate condition risk skipped rows other nasty problems. simplest to this is always include primary key column(s) the end your ordering columns. you're using in-built keyset serialization, only handles basic data/column types far (strings, ints, floats, datetimes, dates, booleans, a few others). serialization be extended serialize more advanced types necessary (documentation this is forthcoming).known mariadb/mysql issue: performing comparisons, sqlakeyset generates row-value syntax similar the following:where row('', 1) > row(name, id)indexing support this syntax mariadb/mysql is apparently faulty. performance paging large tables may poor (meanwhile, postgresql correctly supports indexing this syntax).sqlakeyset is alpha software please aware sqlakeyset is its early stage development. said, please it! feedback is welcome ( or bad).documentationsqlakeyset is early alpha documentation than readme is scarce far. are working remedying . watch space.installationassuming have pip installed, you need do is install follows:$ pip install sqlakeyset will install sqlakeyset also sqlalchemy not already installed. obviously 'll need necessary database driver your chosen database be installed ."
}