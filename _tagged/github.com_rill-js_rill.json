{
	"_id": "14284086",
	"site": "https://github.com/rill-js/rill",
	"title": " Rill â€“ The Express style router for the browser",
	"author": "piercey4",
	"date": "2017-06-13T13:32:02.519Z",
	"tags": {
		"categories": [
			"opensource",
			"nodejs",
			"middleware",
			"router",
			"isomorphic",
			"universal"
		],
		"languages": [
			"javascript",
			"makefile"
		]
	},
	"content": "readme.md expressive http middleware nodejs the browser.rill brings cascading middleware the browser enables fully universal web applications. makes apps enjoyable write a simpler top down mental model your app free progressive enhancement.rill provides minimum abstractions nodejs the browser enabling things routing ( redirecting, refreshes more), cookies, middleware the same api.installationnpmnpm install rillbowerbower install rilldownload<script type=\"text/javascript\" src=\"rill.js\"></script><script> define(['rill'], function (rill) {...}) // amd window.rill // global rill no module system place.</script>browser support modern browsers are supported including ie10+. ie9 is supported a history api polyfill.older browsers also need polyfill promise api, checkout es6-promise a polyfill, babel-polyfill covers .communityapi documentation.examplesmiddleware listwikigitter communityreddit communityarticlesisomorphic javascript, lets it easier.browsers, servers, apiswhy everyone is talking isomorphicwhy rill?rill is answer a simple question; i run express style router the browser? turns you and works awesome. brings common interface many typical app features both browser nodejs. many isomorphic frameworks crazy abstractions learning curves with rill, you understand express koa, already how routing works! rill get program much your application logic using same api (client server) including routing, rendering, data fetching more are easily shared.rill works perfectly a stand alone nodejs server a stand alone browser framework. allows easy progressive enhancement. all is the browser handle much your application logic if javascript fails any reason server knows exactly to .how does thing ?if look the source rill here will quickly notice is zero browser specific code. is thanks @rill/http is node's http.createserver ported the browser. the browser works listening internal link clicks, form submissions browser history changes. will create rill context each these events emit through router, similar how receiving request works nodejs. supports everything 'd expect a client side nodejs server. includes redirects, refreshes, cookies, scrolling url updates using history api.examplecreate app/** * following code run 100% the browser in nodejs. * examples es2015/2016 babel jsx this is optional. */import rill 'rill'const app = rill()setup middleware// universal form data parsing middleware.import bodyparser '@rill/body'app.(bodyparser())// universal react rendering middleware.import reactrenderer '@rill/react'app.(reactrenderer())// example loggerapp.(async ({ req }, next)=> { const start = date // rill uses promises control flow. // es2016 async functions great well! await next() const ms = date - start console.log(`${req.method} ${req.url} - ${ms}`)})setup page// respond a request.app.('/todos', async ({ res })=> { // fetch todolist some service. const todolist = await mytodolistservice.getalltodos() // directly set react virtual dom the body thanks @rill/react. // (checkout @rill/html universal html diffing). res.body = ( <html> <head> <title> app</title> <meta name=\"description\" content=\"rill application\"> </head> <body> <form action=\"/add-todo\" method=\"post\"> <h1> a plain old form</h1> <input type=\"text\" name=\"todo\"/> <button type=\"submit\">add todo</button> </form> {todolist.length ? todolist.map(rendertodo) : ' todos display.' } <script src=\"/app.js\"/> </body> </html> )})handle form submission// respond a post request.app.post('/add-todo', async ({ req, res })=> { // handle form submissions rill same one with other node framework. // here are simply adding todo via service. await mytodolistservice.addtodo({ text: req.body.todo }) // then redirect (same res.redirect('/todos')) res.redirect('')})start app// start regular http server.// the browser form submissions link clicks intercepted @rill/http.app.listen({ port: 80 }) alsoisbrowser - browserify transform remove server-side code.isomorphic-fetch - universal http requests using whatwg fetch.isomorphic-form-data - send multipart form data universally (able send files works fetch).scroll-behavior - @rill/http automatically try use \"smooth\" scroll-behavior scrolling targets link clicks. will polyfill across modernish browsers.submit-form - manually trigger rill navigation the browser.prior artkoa-client - koa clone runs the browser, inspired package.monorouter - another isomorphic router partially inspired package.contributions npm test run tests.licensemit"
}