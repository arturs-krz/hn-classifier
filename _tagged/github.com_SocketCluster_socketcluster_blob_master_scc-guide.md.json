{
	"_id": "14455006",
	"site": "https://github.com/SocketCluster/socketcluster/blob/master/scc-guide.md",
	"title": "Pub/sub service which runs and auto-scales on Kubernetes",
	"author": "jondubois",
	"date": "2017-06-13T13:55:02.249Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "scc guidescc is collection services allow to easily deploy scale socketcluster any number machines (almost number, notes the bottom this page).scc is designed scale linearly is optimized running kubernetes it be setup without using orchestrator.scc is made of following services:socketcluster https://github.com/socketcluster/socketclusterscc-broker https://github.com/socketcluster/scc-brokerscc-state https://github.com/socketcluster/scc-statescc-ingress (kubernetes )how works socketcluster service be made of number regular socketcluster instances - main difference between running socketcluster a single instance vs running as cluster is in cluster mode, need point each socketcluster instance a working scc-state (state server) instance. scc-broker service be made of number scc-broker instances - is special backend- service is designed brokermessages between multiple frontend-facing socketcluster instances. the pub/sub channels your entire system be sharded evenly across available scc-broker instances. like the socketcluster instances above, each scc-broker instance needs point a state server order work. scc-state service is made of single instance - job is dispatch state the cluster all interested services allow to reshard themselves. scc-state instance notify frontend socketcluster instances whenever new backend scc-broker joins cluster. allows socketcluster instances rebalance pub/sub channels evenly across available brokers whenever new scc-broker instance joins cluster. scc setup across multiple hosts may like (though quantity each instance type is likely vary; except scc-state only ever has instance per cluster):running kubernetesrunning kubernetes (k8s) is easy; just need run the .yaml files the kubernetes/ directory the socketcluster repo (https://github.com/socketcluster/socketcluster/tree/master/kubernetes) using kubectl command ( at time):kubectl create -f <service-deployment--ingress-definition.yaml> default, should add tls/ssl key cert pair your provider (rancher has page were can paste in). if don't to a certificate ( recommended), can delete lines scc-ingress.yaml before create with kubectl: tls: - secretname: scc-tls-credentialsnote the step above is crucial you don't to tls/ssl - otherwise ingress load balancer service not show on rancher control panel until add credentials the name scc-tls-credentials your rancher control panel ( infrastructure > certificates page).running kubernetes baasil ( simple development deployment)baasil is open source cli tool baasil.io is hosted '-a-service' rancher/kubernetes control panel. you to try scc k8s you not already a k8s environment/cluster, simplest to started is sign to free trial account http://baasil.ionote you use baasil cli tool (https://www.npmjs.com/package/baasil) deploy socketcluster service/app any rancher/kubernetes environment, just to modify ~/.kube/config file your local machine hold configs your own rancher control panel (instead the hosted baasil.io). is strongly recommended you kubernetes rancher consistency. http://rancher.com/ more details. run service/app locally inside containers to deploy your own rancher/k8s cluster, follow guide: https://docs.baasil.io/running using node.js directly can run scc using node.js version >= 6.x.x. simplicity, will show how run everything your localhost (127.0.0.1), in practice, will need change 127.0.0.1 an appropriate ip, host name domain name., you need download each these repositories your machine(s):git clone https://github.com/socketcluster/scc-brokergit clone https://github.com/socketcluster/scc-state inside each repo, should run npm install without arguments install dependencies. you need setup new socketcluster project use your user-facing instance. info how setup socketcluster project, this page: http://socketcluster.io/#!/docs/getting-startedonce have two repos mentioned earlier your socketcluster project setup, should launch state server bygoing inside local scc-state repo then running command:node servernext, launch broker, should navigate your scc-broker repo run command:scc_state_server_host='127.0.0.1' socketcluster_server_port='8888' node serverfinally, run frontend-facing socketcluster instance, can navigate your socketcluster project directory run:scc_state_server_host='127.0.0.1' socketcluster_port='8000' node server can add second frontend-facing server running ( time running port 8001):scc_state_server_host='127.0.0.1' socketcluster_port='8001' node server if navigate either localhost:8000 localhost:8001 your browser, should that pub/sub channels are shared between two socketcluster instances.note you provide additional environment variables various instances set custom post numbers, passwords etc... more info, can inside code the server.js file each repo see process.env vars are used. running multiples instances any service the same machine, sure the ports don't clash - modify socketcluster_server_port socketcluster_port environment variable each instance make sure they are unique.notes should ever run single scc-state per cluster - is currently single point failure ( plan improve at point). this reason, is recommended you run instance inside datacenter/aws availability zone do expose to public internet. scc-state instance does handle pub/sub messages so should affect scalability your cluster ( will scale linearly).note you launch services any order like if state server crashes, may socket hung errors other instances (while keep trying reconnect)."
}