{
	"_id": "14459588",
	"site": "https://github.com/workflowproducts/postage/blob/master/Facts_About_Electron_Performance.md",
	"title": "Facts about Electron performance",
	"author": "wjh_",
	"date": "2017-06-13T13:55:02.216Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "is electron problem a tool? article \"electron is flash the desktop\" caused bit a commotion among postage team recently. speed has course been central our cause since inception postage \"a fast alternative pgadmin\" it struck right the gut. initial reaction was fire task manager, out stop watch start testing. learned few things that for reason think \"electron is flash the desktop\" was worthwhile read. you ever had memory leak? first takeaway the article was we hadn't been watching memory usage electron. memory usage is important can lead all kinds bottlenecks. i looked it. had memory leak! was bad too. memory usage grew grew. was especially disappointing since spend lot time making sure don't memory leaks c. use valgrind other consuming tactics be certain postage is performing and freeing memory. problem was we had completely overlooked web browser. were properly attaching various items dom elements they were essentially global objects. once were longer needed dom was destroyed the globals were .shortly discovery dealt the leak the problem appears be gone. weren't thinking it we got burned. lesson learned.making cross platform application is hard. electron has perks.although postage started as web server intended command line install, spent lot time install issues the very beginning. much this was own fault. big mistake was attempting use new libtls library libressl. seemed a idea the . recently, 've decided can't wait libtls become usable a cross-platform so went the openssl api. we don't to ship libressl postage, if want use libressl 'll need install yourself.another mistake was attempting write command line installer. very few used . i say with authority i 't remember ever using successfully. was hard problem we have been better off putting more effort making configure--install better instead.are persuaded facts?electron solved of install issues just few days. have continued pursue making postage install on many platforms configure--install most users download binaries be and running seconds.mac install went a dmg-- drag to applications folder. install windows is fifteen seconds no longer requires uninstall . these times are reasonable are much faster installing source. a at stats a typical windows box: install startuppgadmin3 ~10sec 4secpgadmin4 ~60sec 35secpostage ~15sec 4sec think 's reasonable say electron is perfectly fine regards install startup times we've implemented . i there are apps use electron start slowly, that is a problem inherent electron--postage proves . considering our goal has always been deliver fast app, have yet see electron prevents from doing as far install startup times are concerned.is electron problem, is code slow?'ve covered memory, install startup issues. postage doesn't really node electron i 't comment that. 's left is performance practical matters, displaying query results. let's right the stopwatch times.loading from 'run' display data grid. used query: \"select * wtkv2.rtime;\". returns 37k records. data is part our internal punch clock app was chosen because was . pgadmin3: 18sec pgadmin4: 7sec postage(3.2.12): 12sec postage(3.2.13): 2sec you it. 've been working a faster grid displaying table data some . it uses websockets get data a tab delimited transfer format.note 3.2.12 was quite slow, yet liberal application time talent caused 3.2.13 become extremely fast. isn't whole picture. 'm confident postage's grid has slowed down the last few months. haven't been fixing improving old grid code we knew was destined be replaced. many electron projects 're resource constrained performance suffered. you believe more choices for better ecosystem?postage fills gap the postgresql ecosystem. 's a criticism the pgadmin team. 'm sure are resource constrained we are making software is hard. 'm sure reason pgadmin team dropped pgadmin3 was probably the code base is sixteen years old! 's amazing accomplishment all us here the postage team are thankful their efforts the years. certainly not done they did in 2000ish they started. 've managed build postage the shoulders github, cloud9, laura doktorova's dot.js, others for we're very thankful.'m sure pgadmin4 has along nicely will become de-facto choice people want graphical client. is official client postgresql as such only need be ' enough' win nearly the users looking a free client. who wish pay of course overlook postage it's free. (wait, doesn't leave with many users...) you use postage, please file issues github. need users step a little more other projects of limited audience! you consider yourself open minded adventurous? i leave with thought would that electron is a reason disuade from trying project. may feel a native application do better postage the times posted. 'm willing accept but sceptical.however, think facts speak themselves asserting the difference between postage 3.2.12 postage 3.2.13 was swing performing poorly (due lack effort the programmer's part) performing very . as result, think facts support idea electron performance is to programmer. you appreciate freedom?using web technologies draw interface gives good deal more freedom using native elements. native elements are their nature limited set. many platforms are customizable cross platform solutions native apps are mostly . i believe with fair amount effort user interface be made perform better electron(chromium) a native interface. is features be pared down the case whereas native elements are difficult impossible optimize. yes get great perfomance of box native, you are limited resources. a given amount resources assert web tech often you more. more customization, more platforms, more performance, more what need. besides, freedom is advantageous many reasons, including performance, i am alone appreciating .do consider yourself helpful? course, someone wants sponser postage can test native implementation if performs better 'll release . you'll no argument me. until happens hope 'll projects postage try. they are unacceptable any reason, file issue move if have . join as part the solution. really appreciate everyone let's know their experiences postage. 'm sure other projects too.thank for reading. workflow products team"
}