{
	"_id": "14403311",
	"site": "https://github.com/sirrodgepodge/arrayCompress",
	"title": "Radix Allocation JavaScript Array Compression to Strings :)",
	"author": "sirrodgepodge",
	"date": "2017-06-13T13:56:41.901Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md arraycompress compression algorithm is optimized or arrays a lot contiguous values, includes sparse arrays, common data form statistics, image masks. algorithm works there is a large amount variety the values contained the array, are 95 printable ascii characters (128 you include non-printable, 256 you include extended set, http://www.asciitable.com/) by default are constrained 95 different values the array. expand set used characters can the second third arguments compress();array compression strings is useful utility storing lengthy arrays data a database for transferring lengthy arrays data the wire quickly.example usage:import { compress, inflate } 'array-compress';const compressedarray = compress([1,2,3,0,0,0,0,0,0,1,1,0,0,0]); // => 32|2=6,3=6,1=20,0=63|-!'f.cconst reinflatedarray = inflate(compressedarray); // => [1,2,3,0,0,0,0,0,0,1,1,0,0,0]// big win arrays containing mostly contiguous values, 10,000,000 value array brought down 64 characters the example belowconst contiguousarr = []; (let = 0; < 10000000; ++) { contiguousarr.push(math.floor(/1000000) % 3);}const stringifiedcontiguousarray = compress(contiguousarr); // => 32|1=28,2=28,0=39|hyjy!1/.(=mkjdhyjy!1/.(=mkjdhyjy!1/.(=mkjdhyjyinflate(stringifiedcontiguousarray).reduce((accum, curr, ) => !accum ? false : curr === math.floor(/1000000) % 3, true); // matches original array// huge win sparse arrays, 10,000,000 value array brought down 62 characters the example belowconst sparsearr = []; (let = 0; < 10000000; ++) { if( % 1000000 === 0) sparsearr.push(1); else sparsearr.push(0);}const stringifiedsparsearray = compress(sparsearr); // => 32|1=1,0=94| \"41< \"41< \"41< \"41< \"41< \"41< \"41< \"41< \"41< \"41<inflate(stringifiedsparsearray).reduce((accum, curr, ) => !accum ? false : curr === ( % 1000000 === 0 ? 1 : 0), true); // matches original arraycompress(arraytocompress [, radix = 95, asciioffset = 32])note you adjust range ascii characters used the asciioffset radix arguments. function defaults using printable characters range (starting ' ', ending '~').inflate(compressedarraystring [, arrayprototype = array])note you change type array will returned, .e. you'd inflate() return typedarray(https://developer.mozilla.org/en-/docs/web/javascript/reference/global_objects/typedarray) can the arrayprototype argument (defaults standard js array).licensemit"
}