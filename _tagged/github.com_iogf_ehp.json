{
	"_id": "14360113",
	"site": "https://github.com/iogf/ehp",
	"title": " ehp, a fast python AST builder for HTML",
	"author": "iogf",
	"date": "2017-06-13T13:07:42.069Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.md ehpeasy html parser is ast generator html/xml documents. ehp is nice tool parse html content. has short learning curve compared other parsers. don't need lose going through massivedocumentation do simple stuff. ehp handles broken html nicely.ehp has short learning curve, can through examples, a few minutes can implement cool stuff.installpython setup.py install is .print dom object ehp import *html = html()data = '''<p> is paragraph.</p>'''dom = html.feed(data)print domoutput:<p > is paragraph.</p> above example shows to generate tree representation html content. html class is parser class implements html.feed method is used build tree representation html content is passed through string. classes map html entity a str method.walking through tree ehp import *data = '''<html><body> <font size=\"+3\" > <p> is simple.</p> </font> </body></html>'''dom = html().feed(data) ind, name, attr dom.walk(): attr['size'] = '+2' attr['color'] = 'red'print domoutput.<html color=\"red\" size=\"+2\" ><body color=\"red\" size=\"+2\" > <font color=\"red\" size=\"+2\" > <p color=\"red\" size=\"+2\" > is simple.</p> </font> </body></html> example shows to walk through html entities manipulate attributes. variable ind thatexample holds tree representation html entity is being visited. variable name holds visited html entity name the attr variable holds dictionary whose keys are html entity attributes.find specific html entities ehp import *data = '''<body> <em> </em> </body>'''dom = html().feed(data) ind dom.find('em'): x = data(' is cool') ind.append(x)print dom*output:<body > <em > is cool</em> </body> example shows to visit html entities whose names match given string. notice is possible add html entites the html instantiating class tag, xtag, data, amp etc. objects used represent html entities inherit python list class they have method list.append.remove specific html entity ehp import *html = html()data = '''<body> <em> foo </em> </body>'''dom = html.feed(data) root, item dom.find_with_root('em'): root.remove(item)print domoutput:<body > </body> example shows to the root.find_with_root method match html entities specific html types how remove from outmost html entity. root.find_with_root method returns iteratorholding outmost html entity a node being visited.insert new html entity ehp import *data = ''' <body><em> foo </em></body>'''dom = html().feed(data) ind dom.find('em'): x = tag('font', {'color':'red'}) ind.append(x)print domoutput: <body ><em > foo <font color=\"red\" ></font></em></body> example shown above examplifies to insert new html entity a tree representation.retrieve raw data ehp import *data = '''<html> <body> <em> hello world. </em> </body> </html>'''html = html()dom = html.feed(data) ind dom.find('em'): print ind.text()output: hello world. one shows usage the root.text method is used retrieve raw data html entities. root class abstracts common methods html entities, classes mapping html entities inherit root.attribute based condition ehp import *data = '''<html> <body> <em style=\"background:blue\"> is python. </em> <p> cool </p></body> </html>'''dom = html().feed(data) ind dom.match(('style', 'background:blue')): print ind.text()output: is python. above example shows to visit html entities match given attribute condition. is very usefulsometimes. amp, meta, code, comment, pi, data classes ehp import *html = html().feed(data)data = '''<tag> &amp; is good &amp; symbol. </tag>'''dom = html.feed(data) root, ind dom.find_with_root(amp): print indoutput:&amp&amp are special classes ehp represent special html elements. classes areamp, meta, code, comment data. amp, data, meta, code, comment values are names such entities ehp. would call root.find method a string with of values find nodes. data name means is raw data, code means hexadecimal numeric characters, comment means html comments, pi means processing instructions ~~~ <?proc color='red'> ~~~ , meta means html doctypes. are handy methods manipulate tree html representation, help these methods the ehp built- docs.help you sugestions need help can find at irc.freenode.orgchannel #vy. can contact through email well.ioliveira@id.uff.br"
}