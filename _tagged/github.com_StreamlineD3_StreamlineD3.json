{
	"_id": "14419117",
	"site": "https://github.com/StreamlineD3/StreamlineD3",
	"title": "D3 and streaming data: Streamlined3",
	"author": "slhodges",
	"date": "2017-06-13T13:56:31.546Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md streamlined3providing developers a simple to create live updating visualizations their streaming data. our demo streamlined3.io!featurescustomize colors, fonts, heights, widths, more. diffing algorithm renders the data changes blazing fast performance.load balancing through node clusters lets app scale multiple streams visualizations.pre-built, ready use visualizations including: bar, line, scatter, pie, bubble, word-cloud, world map.getting startednpm install --save streamlined3create index.js filecreate index.html fileindex.jsnote: version our library does have node clusters implemented case want use another approach. you like use version uses load balancing through node clusters the end support scaling optimal performance, can find here. your index.js file require library:const streamline = require('streamlined3');create new instance, passing callback a port#:let mystream = streamline(sendfiles, port#);create array let mydata = [] hold data. call api get streaming data push results your mydata array. fyi, is good idea buffer data not overload system. at api data key/value pairs find data values you to visualize your graph. put inside config object. ( specific configuration settings ... below what type key/value pairs 'll need each visualization):let config = { width: 500, height: 500, xdomain: 10, ydomain: 10, xticks: 10, yticks: 10, xscale: post yscale: number--likes xlabel: ' name the post', ylabel: ' many likes someone got'};invoke streamlined3 connect method the instance created step 2. names methods can call, specific configuration settings ... below each type visualization. mystream.connect((socket) => { mystream.line(socket, mydata, config);});htmlchoose graph the graph folder this repo add to script tag.<script src=\"line.js\"></script>...you use cdn any graph than world map /or world-cloud <script src=\"http://cdn.jsdelivr.net/gh/streamlined3/sd3-demo@1.4/client/graphs/bundle.min.js\"></script>add necessary dependency libraries ( must version 4+ d3 otherwise will encounter errors):<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/4.8.0/d3.min.js\"></script><script src=\"graphs/d3-scale-chromatic.min.js\"></script><script src=\"/socket.io/socket.io.js\"></script>add <div> node an id (see specific configuration settings ... below what each visualization is called) where want visualization appear:<div id=\"name--visualization\"></div> voilÃ ! now a working, live-updating visualization.specific configuration settings the bar graphmethod mystream.connect((socket) => { mystream.bar(socket, bardata, barconfig);});config filelet barconfig = { setwidth: 800, setheight: 400, shiftyaxis: true, xdomainupper: 20, xdomainlower: 0, ydomainupper: 50, ydomainlower: 0, xticks: 10, yticks: 50, xscale: 'borough', volume: 'speed', ylabel_text: 'miles per hour', label_text_size: 20, transition_speed: 1000, color: ['#daf7a6', '#ffc300', '#ff5733', '#c70039', '#900c3f', '#581845'],};html <div id=\"bar-graph\"></div>specific configuration settings the line graphmethod mystream.connect((socket) => { mystream.line(socket, linedata, lineconfig); });config filelet lineconfig = { setwidth: 600, setheight: 400, shiftxaxis: true, xdomainupper: 50, xdomainlower: 0, ydomainupper: 40, ydomainlower: 0, xticks: 10, yticks: 10, xscale: 'counter', yscale: 'num_bikes_available', xlabel_text: ' the currently reporting station', ylabel_text: 'number available bikes'};html <div id=\"line-chart\"></div>specific configuration settings the bubble graphmethod mystream.connect((socket) => { mystream.bubblegraph(socket, bubbledata, bubbleconfig); });config filelet bubbleconfig = { setwidth: 600, setheight: 400, text: 'station_id', volume: 'num_bikes_available',};html <div id=\"bubble-graph\"></div>specific configuration settings the pie chartmethod mystream.connect((socket) => { mystream.pie(socket, piedata, pieconfig); });config file let pieconfig = { setwidth: 400, setheight: 400, category: 'genre',//category be show pie slices count: 'count' };html <div id=\"pie-chart\"></div>specific configuration settings the scattermethod mystream.connect((socket) => { mystream.scatter(socket, scatterdata, scatterconfig); });config file let scatterconfig = { setwidth: 600, setheight: 400, //axis xdomainupper: 1500, xdomainlower: 0, ydomainupper: 20000, ydomainlower: 0, xticks: 10, yticks: 10, xlabel_text: 'number followers', ylabel_text: 'number tweets', label_font_size: 20, xscale: 'followers_count', yscale: 'statuses_count', volume: 'favourites_count', circle_text: '', transition_speed: 5000, };html <div id=\"scatter-plot\"></div>specific configuration settings the world mapmethod mystream.connect((socket) => { mystream.map(socket, scatterdata, scatterconfig); });config filelet mapconfig = { setwidth: 1300, setheight: 800, latitude: 'latitude', longitude: 'longitude', mapitem: 'satellite', // thing being mapped proptwo: '', color:'#b0c4de'};html <div id=\"map\"></div>either download map-source.js this repo link it your html file add script tag: <script src=\"https://unpkg.com/topojson-client@3\"></script> color, add script tag: <script src=\"graphs/d3-scale-chromatic.min.js\"></script>"
}