{
	"_id": "14490059",
	"site": "http://github.com/iodcpp/metajson#",
	"title": "C++17 MetaJSON 0.1, up to 2x faster than rapidjson",
	"author": "matt42",
	"date": "2017-06-13T14:10:07.936Z",
	"tags": {
		"categories": [
			"opensource",
			"cpp",
			"cpp17",
			"json",
			"serialization-library"
		],
		"languages": [
			"c++",
			"python",
			"cmake",
			"shell"
		]
	},
	"content": "readme.md iod::metajsoniod::metajson is c++17 json serializer/deserializer designed ease use performances. handle subset other json serialization libraries: caseswhere structure the object is known compile are covered. these specific cases, metajson is faster produce smaller binaries.features:non intrusiveheader utf-8 supportexception freesmall codebase: 1200 locportable: architecture specific code.limitations:metajson handles json objects a static structure known compile .iod::metajson properly handle decoding encoding utf-8 not others utf-{32|16} {big|little} endian encodings. explicit errors ill-formatted json messsages.performances: to 9x faster nlohmann/json 2xfaster rapidjson*. did find usecases where metajson was the fastest. you find , please report.binary code size: to 8x smaller nlohmann/json 2x smaller rapidjson*.[1] https://github.com/miloyip/rapidjson[2] https://github.com/nlohmann/json[3] https://github.com/aldanial/cloc* theses numbers are given an comprehensive benchmark. just a rough idea metajson performances does take account fact other libraries providesmore features.authormatthieu garrigues https://github.com/matt-42installationwget https://raw.githubusercontent.com/iodcpp/metajson/master/metajson.hh#include \"metajson.hh\"compilersgcc 7.1.1: okclang 4: failing (https://stackoverflow.com/questions/44262236/clang-4-build-error--functional--c1z)overview#include \"metajson.hh\"#include <iostream>namespace s{ iod_symbol(name) iod_symbol(age) iod_symbol(entry) iod_symbol(id)}int main (){ using iod::json_encode; using iod::json_decode; using iod::json_object; using iod::json_vector; std::string json_str; // c-structs struct { int age; std::string name; }; obj{12, \"john\"}; json_str = json_object(s::_age, s::_name).encode(obj); json_object(s::_age, s::_name).decode(json_str, obj); std::cout << json_str << std::endl; // {\"age\":12,\"name\":\"john\"} // c++ vectors std::vector<int> v = {1,2,3,4}; json_str = json_encode(v); json_decode(json_str, v); std::cout << json_str << std::endl; // [1,2,3,4] // arrays structs std::vector<> array{ {12, \"john\"}, {2, \"alice\"}, {32, \"bob\"} }; json_str = json_vector(s::_age, s::_name).encode(array); std::cout << json_str << std::endl; // [{\"age\":12,\"name\":\"john\"},{\"age\":2,\"name\":\"alice\"},{\"age\":32,\"name\":\"bob\"}] // nested structs struct b { int id; entry; }; b obj2{ 1, { 12, \"john\"}}; json_str = json_object(s::_id = int(), s::_entry = json_object(s::_age, s::_name)).encode(obj2); std::cout << json_str << std::endl; // {\"id\":1,\"entry\":{\"age\":12,\"name\":\"john\"}} // metamap using iod::make_metamap; auto map = make_metamap(s::_age = 12, s::_name = std::string(\"john\")); json_str = json_encode(map); std::cout << json_str << std::endl; // {\"age\":12,\"name\":\"john\"} json_decode(json_str, map); std::cout << json_object(s::_age, s::_name(iod::json_key(\"last_name\"))).encode(obj) << std::endl; // {\"age\":12,\"last_name\":\"john\"}}"
}