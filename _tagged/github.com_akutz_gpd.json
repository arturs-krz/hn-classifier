{
	"_id": "14423167",
	"site": "https://github.com/akutz/gpd",
	"title": "Utility of Go plug-ins diminished by vendored dependencies",
	"author": "ahacker15",
	"date": "2017-06-13T13:56:32.211Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"go"
		]
	},
	"content": "readme.md plug-ins & vendored dependencies (#20481) the release go 1.8 came feature long-sought many developers --support modular plug-ins loadable runtime. while plug-ins have limitations today -- primarily being linux at time -- are still incredibly useful.unless project has vendored dependencies is. utility go plug-ins is almost completely erased fact many projects rely vendored dependencies order ensure consistentbuild results. problem problem is pretty straight-forward. an application (app)vendors library (lib), package path the library is path//app/vendor/path//lib. however, plug- is likelybuilt against either path//lib , if plug- vendorsdependencies well, path//plugin/vendor/path//lib. of course makes total sense behaves exactly one expect regards go packages. despite intent, threepackages are the same:path//libpath//app/vendor/path//libpath//plugin/vendor/path//libwhile behavior is consistent regards go packages, flies the face the utility provided a combination vendored dependencies the go plug- model.reproduction project makes easy reproduce above issue.requirements reproduce issue 1.8.x a linux host are required:$ version version go1.8.1 linux/amd64$ envgoarch=\"amd64\"gobin=\"\"goexe=\"\"gohostarch=\"amd64\"gohostos=\"linux\"goos=\"linux\"gopath=\"/home/akutz/\"gorace=\"\"goroot=\"/home/akutz/./1.8.1\"gotooldir=\"/home/akutz/./1.8.1/pkg/tool/linux_amd64\"gccgo=\"gccgo\"cc=\"gcc\"gogccflags=\"-fpic -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/-build699913681=/tmp/-build -gno-record-gcc-switches\"cxx=\"g++\"cgo_enabled=\"1\"pkg_config=\"pkg-config\"cgo_cflags=\"-g -o2\"cgo_cppflags=\"\"cgo_cxxflags=\"-g -o2\"cgo_fflags=\"-g -o2\"cgo_ldflags=\"-g -o2\"download a linux host go to fetch project:$ get github.com/akutz/gpdrun program root the project is go command-line program. running will emit message the console:$ run main.yes, have bananas, have bananas today.build plug-if program is run a single argument is treated thepath a plug-. that plug- is loaded will emit differentmessage the console. , build plug-:$ go build -buildmode plugin -o mod. ./mod verify the produced file is plug-, use file command:$ file mod.mod.: elf 64-bit lsb shared object, x86-64, version 1 (sysv), dynamically linked, buildid[sha1]=8c78f9a393bd083bde91b2b34b8117592387f40e, stripped file is reported a shared object, verifying it is indeed go plug-.run program the plug-run program using plug-:$ go run main. mod.yes were thirty, thousand, pounds......bananas. works!vendor shared dep packagehowever, happens the program vendors shared dep package?$ mkdir -p vendor/github.com/akutz/gpd && cp -r dep vendor/github.com/akutz/gpd$ run main. mod.error: failed load plugin: plugin.open: plugin was built a different version package github.com/akutz/gpd/libpanic: runtime error: invalid memory address nil pointer dereference[signal sigsegv: segmentation violation code=0x1 addr=0x0 pc=0x504c45]goroutine 1 [running]:github.com/akutz/gpd/lib.newmodule(0x535498, 0x6, 0x539cb5, 0x21)/home/akutz//src/github.com/akutz/gpd/lib/lib.:28 +0x55main.main()/home/akutz//src/github.com/akutz/gpd/main.:32 +0x13aexit status 2 program fails! is the dep package includes type is used both shared lib package the plug- package, mod. plug- linked against lib package github.com/akutz/gpd/lib itself linked against dep package github.com/akutz/gpd/dep.however, vendoring dep package the program causes libpackage compiled the program link againstgithub.com/akutz/gpd/vendor/github.com/akutz/gpd/dep, resulting the program the plug- having different versions the libpackage!vendor shared lib packagehowever, happens the program vendors shared lib package?$ rm -fr vendor$ mkdir -p vendor/github.com/akutz/gpd && cp -r lib vendor/github.com/akutz/gpd$ run main. mod.panic: runtime error: invalid memory address nil pointer dereference[signal sigsegv: segmentation violation code=0x1 addr=0x0 pc=0x504d65]goroutine 1 [running]:github.com/akutz/gpd/vendor/github.com/akutz/gpd/lib.newmodule(0x5355b8, 0x6, 0xc42000c2c0, 0x0)/home/akutz//src/github.com/akutz/gpd/vendor/github.com/akutz/gpd/lib/lib.:28 +0x55main.main()/home/akutz//src/github.com/akutz/gpd/main.:32 +0x13aexit status 2 program fails! is the lib package contains typeregistry can used both register types construct instances those types.however, the program's type registry is located the packagegithub.com/akutz/gpd/vendor/github.com/akutz/gpd/lib the plug-registered type github.com/akutz/gpd/lib, the programrequests new object the type mod_go, nil exception occurs the program plug- were accessing different typeregistries! hack the moment only solution available is create buildtoolchain using list transitive dependencies generated the application is responsible loading plug-ins. list dependencies be used create custom gopath against any projects participating the application must built,including application itself, shared libraries, theplug-ins. solutionis one? possible solutions are:allow src directory the root a vendor directory thatplug-ins be built directly against program's vendor directory.today would require bind mount.allow plug-ins link directly against go program binary will load programs.hopefully golang team solve issue it really does prevent plug-ins being useful a world where applications are oftenrequired vendor dependencies."
}