{
	"_id": "14450270",
	"site": "https://github.com/BurntSushi/ripgrep",
	"title": "Ripgrep combines the usability of the Silver Searcher with the raw speed of grep",
	"author": "da02",
	"date": "2017-06-13T13:55:20.750Z",
	"tags": {
		"categories": [
			"opensource",
			"ripgrep",
			"recursively-search",
			"search",
			"regex",
			"gitignore",
			"grep",
			"command-line-tool"
		],
		"languages": [
			"rust",
			"python",
			"shell",
			"ruby"
		]
	},
	"content": "readme.md ripgrep (rg)ripgrep is line oriented search tool combines usability thesilver searcher (similar ack) the raw speed gnu grep. ripgrepworks recursively searching current directory a regex pattern.ripgrep has class support windows, mac linux, binarydownloads available every release.dual-licensed under mit the unlicense.changelogplease the changelog a release history.screenshot search resultsquick examples comparing tools example searches entire linux kernel source tree ( running defconfig && -j8) [a-z]+_suspend, where matches must words. timings were collected a system an intel i7-6900k 3.2 ghz, ripgrep was compiled using compile script this repo.please remember a single benchmark is never enough! myblog post ripgrep a very detailed comparison more benchmarks analysis.toolcommandline countripgrep (unicode)rg -n -w '[-z]+_suspend'4500.134s silver searcherag -w '[-z]+_suspend'4500.753sgit greplc_all=c git grep -e -n -w '[-z]+_suspend'4500.823sgit grep (unicode)lc_all=en_us.utf-8 git grep -e -n -w '[-z]+_suspend'4502.880ssiftsift --git -n -w '[-z]+_suspend'4503.656s platinum searcherpt -w -e '[-z]+_suspend'45012.369sackack -w '[-z]+_suspend'187816.952s(yes, ack has bug.)here's another benchmark disregards gitignore files searches awhitelist instead. corpus is same in previous benchmark, theflags passed each command ensures they are doing equivalent :toolcommandline countripgreprg -l -u -tc -n -w '[-z]+_suspend'4040.108sucgucg --type=cc -w '[-z]+_suspend'3920.219sgnu grepegrep -r -n --include='*.c' --include='*.h' -w '[-z]+_suspend'4040.733s(ucg has slightly different behavior the presence symbolic links.) finally, straight comparison between ripgrep gnu grep a singlelarge file (~9.3gb,opensubtitles2016.raw.en.gz):toolcommandline countripgreprg -w 'sherlock [-z]\\w+'52682.520sgnu greplc_all=c egrep -w 'sherlock [-z]\\w+'52687.143s the above benchmark, passing -n flag ( showing line numbers)increases times 3.081s ripgrep 11.403s gnu grep.why should use ripgrep? can replace both silver searcher gnu grep it is faster both. (n.b. is , strictly speaking, \"drop-\" replacement both, the feature sets are far more similar different.) the silver searcher, ripgrep defaults recursive directory search won't search files ignored your .gitignore files. also ignoreshidden binary files default. ripgrep implements full support .gitignore, where there are many bugs related that functionality the silver searcher.ripgrep search specific types files. example, rg -tpy foolimits search python files rg -tjs foo excludes javascriptfiles your search. ripgrep be taught new file types custom matching rules.ripgrep supports many features found grep, such showing context search results, searching multiple patterns, highlighting matches color full unicode support. unlike gnu grep, ripgrep stays fast whilesupporting unicode ( is always ).ripgrep supports searching files text encodings than utf-8, such utf-16, latin-1, gbk, euc-jp, shift_jis more. ( support automatically detecting utf-16 is provided. text encodings must specifically specified the -e/--encoding flag.) other words, ripgrep you speed, filtering default, fewerbugs unicode support.why shouldn't use ripgrep?'d to try convince why shouldn't ripgrep. should you glimpse some important downsides missing features ripgrep.ripgrep uses regex engine based finite automata, if want fancyregex features such backreferences look around, ripgrep won't them you. ripgrep does support lots things though, including, notlimited : lazy quantification (e.g., +?), repetitions (e.g., {2,5}),begin/end assertions (e.g., ^\\w+$), word boundaries (e.g., \\bfoo\\b), support unicode categories (e.g., \\p{sc} match currency symbols \\p{lu} match uppercase letter). (fancier regexes never supported.)ripgrep doesn't yet support searching compressed files. (likely besupported the future.)ripgrep doesn't multiline search. (unlikely ever supported.) other words, you fancy regexes, searching compressed files multiline search, ripgrep may quite meet needs (yet).is really faster everything else?yes. large number benchmarks detailed analysis each isavailable my blog.summarizing, ripgrep is fast :it is built top rust's regex engine.rust's regex engine uses finite automata, simd aggressive literaloptimizations make searching very fast.rust's regex library maintains performance full unicode support building utf-8 decoding directly its deterministic finite automatonengine. supports searching either memory maps by searching incrementally an intermediate buffer. former is better single files thelatter is better large directories. ripgrep chooses best searchingstrategy you automatically.applies ignore patterns .gitignore files using regexset. means single file path be matched against multiple glob patternssimultaneously. uses lock-free parallel recursive directory iterator, courtesy crossbeam ignore.installation binary name ripgrep is rg.binaries ripgrep are available windows, mac linux. linux binaries arestatic executables. windows binaries are available either built mingw(gnu) with microsoft visual c++ (msvc). possible, prefer msvc gnu, you'll need have microsoft vc++ 2015 redistributableinstalled. you're mac os x homebrew user, you install ripgrep either homebrew-core, (compiled rust stable, simd):$ brew install ripgrep you install binary compiled rust nightly (including simd alloptimizations) utilizing custom tap:$ brew tap burntsushi/ripgrep https://github.com/burntsushi/ripgrep.git$ brew install burntsushi/ripgrep/ripgrep-bin you're windows chocolatey user, you install ripgrep the official repo:$ choco install ripgrep you're arch linux user, you install ripgrep the official repos:$ pacman -s ripgrep you're gentoo user, can install ripgrep the official repo:$ emerge ripgrep you're fedora 24+ user, can install ripgrep copr:$ dnf copr enable carlgeorge/ripgrep$ dnf install ripgrep you're rhel/centos 7 user, can install ripgrep copr:$ yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlgeorge/ripgrep/repo/epel-7/carlgeorge-ripgrep-epel-7.repo$ yum install ripgrep you're nix user, can install ripgrep nixpkgs:$ nix-env --install ripgrep$ # ( using attribute name, is `ripgrep`.) you're rust programmer, ripgrep be installed cargo. note this requires to rust 1.12 newer installed.$ cargo install ripgrepripgrep isn't currently any package repositories.'d to change .whirlwind tour command line usage ripgrep doesn't differ much other tools perform similar function, you probably already how use ripgrep. full details be found rg --help, let's on whirlwind tour.ripgrep detects its printing a terminal, will automaticallycolorize output show line numbers, like silver searcher.coloring works windows too! colors be controlled more granularly the --color flag. last thing before get started: generally speaking, ripgrep assumes input is reading is utf-8. however, ripgrep notices file is encoded utf-16, it know to search . for encodings, 'll need explicitly specify with -e/--encoding flag. recursively search current directory, while respecting .gitignorefiles, ignore hidden files directories skip binary files:$ rg foobar above command respects .ignore files, including parentdirectories. .ignore files be used .gitignore files areinsufficient. all cases, .ignore patterns precedence .gitignore. ignore ignore files, -u. additionally search hidden files directories, -uu. additionally search binary files, -uuu.( other words, \"search everything, dammit!\") particular, rg -uuu issimilar grep - -r.$ rg -uu foobar # similar `grep -r`$ rg -uuu foobar # similar `grep - -r`(tip: your ignore files aren't being adhered like expect, run search the --debug flag.) the search case insensitive -i, invert search -v show 2 lines before after every search result -c2.force matches be surrounded word boundaries -w.search replace (find and last names swap ):$ rg '([-z][-z]+)\\s+([-z][-z]+)' --replace '$2, $1'named groups are supported:$ rg '(?p<>[a-z][-z]+)\\s+(?p<last>[-z][-z]+)' --replace '$last, $'up ante full unicode support, matching uppercase unicode letterfollowed any sequence lowercase unicode letters ( luck doing with search tools!):$ rg '(\\p{lu}\\p{ll}+)\\s+(\\p{lu}\\p{ll}+)' --replace '$2, $1'search files matching particular glob:$ rg foo -g 'readme.*' exclude files matching particular glob:$ rg foo -g '!*.min.js'search return paths matching particular glob (.e., -g flag ag/ack):$ rg -g 'doc*' --filessearch html css files:$ rg -thtml -tcss foobarsearch everything except javascript files:$ rg -tjs foobar see list types supported, run rg --type-list. add new type, --type-add, must accompanied a pattern searching (rg won'tpersist type settings):$ rg --type-add 'foo:*.{foo,foobar}' -tfoo bar type foo now match file ending the .foo .foobarextensions.regex syntax syntax supported isdocumented part rust's regex library.shell completionsshell completion files are included the release tarball bash, fish, zsh powershell. bash, move complete/rg.bash-completion $xdg_config_home/bash_completion /etc/bash_completion.d/. fish, move complete/rg.fish $home/.config/fish/completions/. powershell, add . _rg.ps1 your powershellprofile(note leading period). the _rg.ps1 file is on path, . /path//_rg.ps1 instead. zsh, move complete/_rg one your $fpath directories.buildingripgrep is written rust, you'll need grab rust installation order compile .ripgrep compiles rust 1.12 (stable) newer. building is easy:$ git clone https://github.com/burntsushi/ripgrep$ cd ripgrep$ cargo build --release$ ./target/release/rg --version0.1.3 you a rust nightly compiler, you enable optional simdacceleration so:rustflags=\"-c target-cpu=native\" cargo build --release --features 'simd-accel avx-accel' your machine doesn't support avx instructions, simply removeavx-accel the features list. similarly simd.running testsripgrep is relatively tested, including both unit tests integrationtests. run full test suite, :$ cargo test the repository root.tipswindows powershellpowershell profile customize powershell start- there is special powershell script has be created. order find location run command -command $profile | select-object -expandproperty definition more profile details. powershell code this file gets evaluated the start console. way can own aliases be created start.setup function aliasoften can find need make alias the favourite utility. powershell function aliases not behave your typical linux shell alias. always need propagate arguments stdin input. it cannot done simply function grep() { $input | rg.exe --hidden $args } below example reference how setup alias powershell.function grep { $count = @($input).count $input.reset() ($count) { $input | rg.exe --hidden $args } else { rg.exe --hidden $args }}powershell special variables:input - is powershell stdin object allows to access content.args - is array arguments passed this function. alias checks whether is stdin input propagates if is lines.otherwise empty $input make powershell trigger rg search empty stdinpiping non-ascii content ripgrep piping input native executables powershell, encoding theinput is controlled the $outputencoding variable. default, is set us-ascii, any characters the pipeline don't encodings us-ascii are converted ? (question mark) characters. change setting, set $outputencoding a different encoding, represented a .net encoding object. common examples are below. value this variable is reset powershell restarts, to thischange effect every powershell is started add line setting variable your powershell profile.example $outputencoding settings:utf-8 without bom: $outputencoding = [system.text.utf8encoding]::()the console's output encoding:$outputencoding = [system.console]::outputencoding you continue have encoding problems, can force encoding the console use printing utf-8 [system.console]::outputencoding = [system.text.encoding]::utf8. will reset powershell is restarted, you add line your profile well you to the setting permanent.known issues just hit ctrl+c the middle ripgrep's output now terminal's foreground color is wrong!type color cmd.exe (command prompt) echo -ne \"\\033[0m\" unix restore original foreground color. powershell, can add following code your profile willrestore original foreground color reset-foregroundcolor is called.including set-alias line allow to call with simply color.$origfgcolor = $host.ui.rawui.foregroundcolorfunction reset-foregroundcolor {$host.ui.rawui.foregroundcolor = $origfgcolor}set-alias -name color -value reset-foregroundcolorpr #187 fixed , and was later deprecated #281. full explanation isavailable here."
}