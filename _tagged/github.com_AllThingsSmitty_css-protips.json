{
	"_id": "14351962",
	"site": "https://github.com/AllThingsSmitty/css-protips",
	"title": "A Collection of CSS Tips",
	"author": "AllThingsSmitty",
	"date": "2017-06-13T13:57:47.836Z",
	"tags": {
		"categories": [
			"opensource",
			"css",
			"protip",
			"css-skills",
			"flexbox",
			"tips",
			"tips-and-tricks",
			"awesome",
			"list",
			"awesome-list"
		],
		"languages": []
	},
	"content": "readme.md css protips collection tips help your css skills pro. other great lists check @sindresorhus's curated list awesome lists.table contentsprotipssupporttranslationscontribution guidelinesprotips a css resetinherit box-sizing :not() apply/unapply borders navigationadd line-height bodyvertically-center anythingcomma-separated listsselect items using negative nth-child svg icons the \"lobotomized owl\" selector max-height pure css slidersequal-width table cells rid margin hacks flexbox attribute selectors empty linksstyle \"default\" linksconsistent vertical rhythmintrinsic ratio boxesstyle broken images rem global sizing; em local sizinghide autoplay videos aren't muted :root flexible typeset font-size form elements a better mobile experience a css resetcss resets help enforce style consistency across different browsers a clean slate styling elements. can css reset library normalize, et al., you use more simplified reset approach:* { box-sizing: border-box; margin: 0; padding: 0;} elements be stripped margins padding, box-sizing lets manage layouts the css box model.demonote: you follow inherit box-sizing tip below might opt not include box-sizing property your css reset. to table contentsinherit box-sizinglet box-sizing inherited html:html { box-sizing: border-box;}*, *::before, *:: { box-sizing: inherit;} makes easier change box-sizing plugins other components leverage behavior. to table contents :not() apply/unapply borders navigationinstead putting the border.../* add border */.nav li { border-right: 1px solid #666;}... then taking off last element.../* remove border */.nav li:last-child { border-right: none;}... the :() pseudo-class only apply the elements want:.nav li:(:last-child) { border-right: 1px solid #666;}sure, can .nav li + li even .nav li:-child ~ li, with :() the intent is very clear the css selector defines border way human describe .demo to table contentsadd line-height body don't need add line-height each <p>, <h*>, et al. separately. instead, add to body:body { line-height: 1.5;} way textual elements inherit body easily.demo to table contentsvertically-center anything, it's black magic, really center elements vertically:html, body { height: 100%; margin: 0;}body { -webkit-align-items: center; -ms-flex-align: center; align-items: center; display: -webkit-flex; display: flex;} to center something else? vertically, horizontally...anything, anytime, anywhere? css-tricks has nice write- on doing of .note: watch some buggy behavior flexbox ie11.demo to table contentscomma-separated lists list items like real, comma-separated list:ul > li:(:last-child):: { content: \",\";} the :() pseudo-class no comma is added the last item.note: tip may be ideal accessibility, specifically screen readers. copy/paste the browser doesn't with css-generated content. proceed caution. to table contentsselect items using negative nth-child negative nth-child css select items 1 through n.li { display: none;}/* select items 1 through 3 display */li:nth-child(-n+3) { display: block;}, since 've already learned little using :(), try:/* select items 1 through 3 display */li:(:nth-child(-n+3)) { display: none;} that was pretty easy.demo to table contents svg icons's reason to svg icons:.logo { background: url(\"logo.svg\");}svg scales for resolution types is supported all browsers to ie9. ditch .png, .jpg, .gif-jif-whatev files.note: you svg icon- buttons sighted users the svg fails load, will help maintain accessibility:.-svg .icon-:after { content: attr(aria-label);} to table contents the \"lobotomized owl\" selector may a strange name using universal selector (*) the adjacent sibling selector (+) provide powerful css capability:* + * { margin-top: 1.5em;} this example, elements the flow the document follow elements receive margin-top: 1.5em. more the \"lobotomized owl\" selector, read heydon pickering's post a list apart.demo to table contents max-height pure css slidersimplement css- sliders using max-height overflow hidden:.slider { max-height: 200px; overflow-y: hidden; width: 300px;}.slider:hover { max-height: 600px; overflow-y: scroll;} element expands the max-height value hover the slider displays a result the overflow. to table contentsequal-width table cellstables be pain work so try using table-layout: fixed keep cells equal width:.calendar { table-layout: fixed;}pain-free table layouts.demo to table contents rid margin hacks flexbox working column gutters can rid nth-, -, and last-child hacks using flexbox's space-between property:.list { display: flex; justify-content: space-between;}.list .person { flex-basis: 23%;} column gutters always appear evenly-spaced. to table contents attribute selectors empty linksdisplay links the <> element has text value the href attribute has link:[href^=\"http\"]:empty::before { content: attr(href);}'s pretty convenient.demo to table contentsstyle \"default\" linksadd style \"default\" links:[href]:([class]) { color: #008000; text-decoration: underline;} links are inserted via cms, don't usually a class attribute, have distinction without generically affecting cascade. to table contentsconsistent vertical rhythm a universal selector (*) within element create consistent vertical rhythm:.intro > * { margin-bottom: 1.25rem;}consistent vertical rhythm provides visual aesthetic makes content far more readable. to table contentsintrinsic ratio boxes create box an intrinsic ratio, you need do is apply top bottom padding a div:.container { height: 0; padding-bottom: 20%; position: relative;}.container div { border: 2px dashed #ddd; height: 100%; left: 0; position: absolute; top: 0; width: 100%;}using 20% padding makes height the box equal 20% its width. matter width the viewport, child div keep aspect ratio (100% / 20% = 5:1).demo to table contentsstyle broken images broken images more aesthetically-pleasing a little bit css:img { display: block; font-family: helvetica, arial, sans-serif; font-weight: 300; height: auto; line-height: 2; position: relative; text-align: center; width: 100%;} add pseudo-elements rules display user message url reference the broken image:img:before { content: \"'re sorry, image below is broken :(\"; display: block; margin-bottom: 10px;}img: { content: \"(url: \" attr(src) \")\"; display: block; font-size: 12px;}learn more styling this pattern ire aderinokun's original post. to table contents rem global sizing; em local sizing setting base font size the root (html { font-size: 100%; }), set font size textual elements em:h2 { font-size: 2em;}p { font-size: 1em;} set font-size modules rem:article { font-size: 1.25rem;}aside .module { font-size: .9rem;} each module becomes compartmentalized easier style, more maintainable, flexible. to table contentshide autoplay videos aren't muted is great trick a custom user stylesheet. avoid overloading user sound a video autoplays the page is loaded. the sound isn't muted, don't show video:video[autoplay]:([muted]) { display: none;}once again, 're taking advantage using :not() pseudo-class. to table contents :root flexible type type font size a responsive layout should able adjust each viewport. can calculate font size based the viewport height width using :root::root { font-size: calc(1vw + 1vh + .5vmin);} you utilize root em unit based the value calculated :root:body { font: 1rem/1.6 sans-serif;}demo to table contentsset font-size form elements a better mobile experience avoid mobile browsers (ios safari, et al.) zooming on html form elements a <select> drop-down is tapped, add font-size the selector rule:input[type=\"text\"],input[type=\"number\"],select,textarea { font-size: 16px;} to table contentssupportcurrent versions chrome, firefox, safari, opera, edge, ie11.translationsespañolfrançaisitalianoportuguês brasil"
}