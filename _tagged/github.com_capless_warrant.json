{
	"_id": "14157939",
	"site": "https://github.com/capless/warrant",
	"title": " Warrant â€“ Use Python with AWS Cognito with SRP Support",
	"author": "bjinwright",
	"date": "2017-06-13T13:34:46.965Z",
	"tags": {
		"categories": [
			"opensource",
			"cognito",
			"aws-cognito",
			"user-pool",
			"srp"
		],
		"languages": [
			"python"
		]
	},
	"content": "readme.md warrantmakes working aws cognito easier python developers.getting startedpython versions supportedinstallenvironment variablescognito_jwks (optional)cognito utility class warrant.cognitocognito methodsregisterauthenticateadmin authenticateinitiate forgot passwordconfirm forgot passwordchange passwordconfirm sign update profilesend verification user object user userscheck tokenlogoutcognito srp utility warrant.aws_srp.awssrpusing awssrpprojects using warrantdjango warrantauthorsrelease notespython versions supported2.73.6installpip install warrantenvironment variablescognito_jwksoptional: environment variable is dictionary represent well known jwks assigned your user pool aws cognito. can find keys your user pool substituting your aws region pool id the following example.https://cognito-idp.{aws-region}.amazonaws.com/{user-pool-id}/.-known/jwks.jsonexample value ( real):cognito_jwks={\"keys\": [{\"alg\": \"rs256\",\"e\": \"aqab\",\"kid\": \"123456789abcdefghijklmnop\",\"kty\": \"rsa\",\"n\": \"123456789abcdefghijklmnop\",\"\": \"sig\"},{\"alg\": \"rs256\",\"e\": \"aqab\",\"kid\": \"123456789abcdefghijklmnop\",\"kty\": \"rsa\",\"n\": \"123456789abcdefghijklmnop\",\"\": \"sig\"}]}cognito utility classexample all arguments warrant import cognitou = cognito('-user-pool-id','-client-id', username='optional-username', id_token='optional-id-token', refresh_token='optional-refresh-token', access_token='optional-access-token', access_key='optional-access-key', secret_key='optional-secret-key')argumentsuser_pool_id: cognito user pool idclient_id: cognito user pool application client idusername: user pool usernameid_token: id token returned authenticationrefresh_token: refresh token returned authenticationaccess_token: access token returned authenticationaccess_key: aws iam access keysecret_key: aws iam secret keyexamples realistic argumentsuser pool id client id used you need information the user pool (ex. list users the user pool) warrant import cognitou = cognito('-user-pool-id','-client-id')usernameused the user has logged yet. start these arguments you plan authenticate either srp (authenticate) admin_authenticate (admin_initiate_auth). warrant import cognitou = cognito('-user-pool-id','-client-id', username='bob')tokensused the user has already authenticated you need build new cognito instance (ex. use a view). warrant import cognitou = cognito('-user-pool-id','-client-id', id_token='-id-token', refresh_token='-refresh-token', access_token='-access-token')cognito methodsregisterregister user the user poolimportant: keyword arguments used this method depend your user pool's configuration, make sure client id (app id) used has write permissions the attriubtes are trying create. example, you to create user a given_name equal johnson sure client_id 're using has permissions edit create given_name a user the pool. warrant import cognitou = cognito('-user-pool-id', '-client-id')u.register('username', 'password', email='@you.com', some_random_attr='random value') # **kwargs are other attributes should set ex. email, given_name, family_nameargumentsusername: user pool usernamepassword: user pool passwordattr_map: attribute map cognito's attributeskwargs: additional user pool attributes ex. **{'email':'@you.com'}authenticateauthenticates user this method call succeeds instance have following attributes id_token, refresh_token, access_token, expires_in, expires_datetime, token_type. warrant import cognitou = cognito('-user-pool-id','-client-id', username='bob')u.authenticate(password='bobs-password')argumentspassword: - user's passwordadmin authenticateauthenticate user using admin super privileges warrant import cognitou = cognito('-user-pool-id','-client-id', username='bob')u.admin_authenticate(password='bobs-password')password: user's passwordinitiate forgot passwordsends verification code the user use change password.u = cognito('-user-pool-id','-client-id', username='bob')u.initiate_forgot_password()arguments argumentsconfirm forgot passwordallows user enter code provided they reset password update password.u = cognito('-user-pool-id','-client-id', username='bob')u.confirm_forgot_password('-confirmation-code','-new-password')argumentsconfirmation_code: confirmation code sent a user's request retrieve forgotten passwordpassword: passwordchange passwordchanges user's password warrant import cognito# you don't your tokens you need #use username password call authenticate methodu = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.change_password('previous-password','proposed-password')argumentsprevious_password: - user's previous passwordproposed_password: - password the user wants change .confirm sign use confirmation code is sent via email text confirm user's account warrant import cognitou = cognito('-user-pool-id','-client-id')u.confirm_sign_up('users-conf-code',username='bob')argumentsconfirmation_code: confirmation code sent via text emailusername: user's usernameupdate profileupdate user's profile warrant import cognitou = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.update_profile({'given_name':'edward','family_name':'smith',},attr_map=dict())argumentsattrs: dictionary attribute name, valuesattr_map: dictionary map cognito attributes attribute names would to show our userssend verificationsend verification email text either email phone attributes. warrant import cognitou = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.send_verification(attribute='email')argumentsattribute: - attribute (email phone) needs be verified user objectreturns instance the specified user_class.u = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.get_user_obj(username='bjones', attribute_list=[{'name': 'string','value': 'string'},], metadata={}, attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"} )argumentsusername: username the userattribute_list: list tuples represent user's attributes returned the admin_get_user get_user boto3 methodsmetadata: (optional) metadata the userattr_map: (optional) dictionary maps cognito attribute names what 'd to display the users user all the user's attributes. gets user's attributes using boto3 uses info create instance the user_class warrant import cognitou = cognito('-user-pool-id','-client-id', username='bob')user = u.get_user(attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"})argumentsattr_map: dictionary map cognito attributes attribute names would to show our users users a list the user the user pool. warrant import cognitou = cognito('-user-pool-id','-client-id')user = u.get_users(attr_map={\"given_name\":\"first_name\",\"family_name\":\"last_name\"})argumentsattr_map: dictionary map cognito attributes attribute names would to show our userscheck tokenchecks exp attribute the access_token either refreshes tokens calling renew_access_tokens method does nothing. important: access token is requiredu = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.check_token()arguments arguments check_tokenlogoutlogs user of clients removes expires_in, expires_datetime, id_token, refresh_token, access_token, token_type attributes. warrant import cognito# you don't your tokens you need #use username password call authenticate methodu = cognito('-user-pool-id','-client-id', id_token='id-token',refresh_token='refresh-token', access_token='access-token')u.logout()arguments arguments check_tokencognito srp utility awssrp class is used perform srp(secure remote password protocol) authentication. is preferred method user authentication aws cognito. process involves series authentication challenges responses, if successful,results a final response contains id, access refresh tokens.using awssrp awssrp class takes username, password, cognito user pool id, cognito app id, an optionalboto3 client. afterwards, authenticate_user class method is used srp authentication.import boto3 warrant.aws_srp import awssrpclient = boto3('cognito-idp')aws = awssrp(username='username', password='password', pool_id='user_pool_id', client_id='client_id', client=client)tokens = aws.authenticate_user()projects using warrantdjango warrantauthorsbrian jinwrighttwitter: @brianjinwrightgithub: @bjinwrighteric petwaygithub: @ebpetwaysergey vishnikingithub: @armicronrelease notes"
}