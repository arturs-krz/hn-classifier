{
	"_id": "14116846",
	"site": "https://github.com/vlow/slingring",
	"title": " Slingring â€“ Chroot-based development containers powered by Ansible",
	"author": "vlowrian",
	"date": "2017-06-13T13:35:26.085Z",
	"tags": {
		"categories": [
			"opensource",
			"development-environment",
			"development-tools",
			"containers",
			"chroot-environment"
		],
		"languages": [
			"python",
			"shell"
		]
	},
	"content": "readme.asciidoc slingringslingring is tool automate creation usage software development containers. main objective is provide stable reproducible environments developers a minimum amount effort. relies existing tools debootstrap, schroot, ansible offer rock solid foundation while minimizing learning curve.table contents short version long versiondisclaimer are development containers?installationfedoraubuntuarch linuxcreate packages using fpmdependenciestermsusageseedcreating new seedinitializersansible playbooktemplatesuniverselisting installed universesbootstrapping universeupdating universeupgrading universeremoving universeportalopening portalfurther actionsfile transferusers passwordscontribution short versiondevelop software inside flexible linux container. seed create foo bootstrap instruction set a project called \"foo\" an accordingly named folder universe create foo/ bootstrap container an instruction set the folder \"foo\" slingring foo enter container long versiondisclaimer slingring itself, documentation is still under heavy development. you dont find information need, is likely bug. can help development slingring opening new ticket github. are development containers?development containers are isolated environments software development projects. development eco systems provide something similar, e.g. virtualenv python rvm ruby. instead those virtual environments, development containers are more docker containers. contain small complete linux user land share basic resources ( the kernel) the host system.developing software within containers comes some decent benefits: tool chain is easily reproducible more package conflicts more multilib systemsminimized setup for team members why use docker?while application containers share lot characteristics development containers, also some fundamental differences.application containers are designed run idealy stateless applications immutable containers.restarting container usually means resetting state. is need this behaviour development containers.writing software is continual process change.imagine development machine being reset to yesterdays contents every morning.aside that, application containers are lot more isolated development containers.application containers are designed horizontal scalability. single host may run multitude the same containers instances the same .application containers must therefore expose ports unless specifically configured do .the same development container is usually running once a , so is rarely need prevent port collissions development containers. the contrary, ides, editors, alike should run the host systems x-server. if actually run development containers the same , it is likely we them communicate.development containers are designed suit requirements.installation can install slingring using provided packages build own packages using fpm.fedoraslingring 0.8.2 rpm (tested fedora 25)schroot-process-check 1.1 rpm (64 bit) (tested fedora 25)install using $ sudo dnf install slingring-0.8.2-1.noarch.rpm schroot-process-check-1.1-1.x86_64.rpmubuntuslingring 0.8.2 deb (tested ubuntu 16.04 xenial)schroot-process-check 1.1 deb (64 bit) (tested ubuntu 16.04 xenial)install using $ sudo apt install slingring_0.8.2_all.deb schroot-process-check_1.1_amd64.debarch linuxslingring 0.8.2 pacman package (tested arch linux)schroot-process-check 1.1 pacman package (64 bit) (tested arch linux)install using $ sudo pacman -u slingring-0.8.2-1-.pkg.tar.xz schroot-process-check-1.1-1-x86_64.pkg.tar.xzcreate packages using fpm must fpm installed your system. sure have packages necessary creating rpm/deb/pacman packages installed. might include rpm build tools bsdtar. is sufficient run ./package.sh the repositorys root directory. might to the same schroot-process-check, will need golang compiler installed the build system. might be best bet you a 32-bit binary.dependencies following packages to present the target system:python >= 3.5pyyaml (python 3)jinja2 (python 3)debootstrapschrootansiblegnupgfiglet, you need have schroot-process-check installed.since is present any the official repositories, can the packages provided above, create own package using fpm.termsslingring defines three simple terms illustrate components:universe - development container ( a docker container)seed - instruction set needed create development container ( a dockerfile)portal - terminal connection inside container ( an ssh connection the container).usageseed seed contains instructions needed create development container. might include packages your tool chain, location the repositories, even database configurations. of instructions are defined using ansible.ansible is it automation tool runs -called playbooks machines ensure given state. is assumed you basic knowledge ansible. you dont, is strongly recommended you head there and familiarize yourself ansible playbooks.creating new seed create new seed run seed create seed-name. will create new folder called seed-name, containing already bootstrapable seed.lets a at contents this folder. most important part is file called universe.yml. contains following information: universe name universe version universe architecture universe distribution list the information needed the ansible playbookfurther small configuration details. you open file, ll find detailed description every configuration parameter above .it is pre-filled sensible defaults, you are free adjust values your liking.initializers sub-directory initializer contains shell scripts are used prepare container the ansible playbook.those scripts are run inside container alphabetical order perform basic setup tasks cannot done the ansible playbook. scripts run administrative rights. example, ansible requires python 2.7 be present the container. the default template, is initializer script place takes care that. are environment variables place, might of help:variablecontentslingring_user_name name the user executing universe command.slingring_group_name default group the user executing universe command. most cases, should have adjust anything the initializer directory.ansible playbook sub-directory ansible contains ansible playbook an arbitrary number ansible roles. can configure playbook this directory your liking. typical playbook ensure the needed packages (e.g. ides, editors, compilers, databases etc.) are installed their desired version all needed configurations are place. could, example, desire specific version the jdk, while always the latest version the ide. the playbook is re-run the container a later point time, ide might be updated a newer version, while jdk is left it is. addition the usual ansible facts, is possible gather information the user might needed the playbook. might, example, check a git repository requires username/password credentials. can define those variables within universe file that: variables: - name: git_username description: git-username the foo repository - name: git_password description: git-password the foo repository secret: yeswhile universe is being bootstrapped, user be queried the information using given description. secret flag indicates the entered information should be echoed. is handed to ansible an encrypted container (vault).inside ansible playbook, can reference information using {{ user_vars.variable_name }} {{ user_secrets.secret_name }}. the above example would {{ user_vars.git_username }} {{ user_secrets.git_password }}. universe command ensure these variables are defined the universe is bootstrapped.templatesseeds are created templates.slingring comes a basic default template, describes very basic empty ubuntu lts container. is stored /usr/share/slingring/templates/default. can the default template a starting point your own templates. default place put custom templates is ~/.slingring/templates/template-name. are number variables available templates:variablecontentbootstrap.universe_name universe name specified the user creating seed.bootstrap.universe_version auto-generated version the scheme yyyy.mm (e.g. 2017.04)bootstrap.ascii_art.universe_name nice ascii art version the universe name (created figlet using \"slant\" font).bootstrap variables to specified using arrow brackets (e.g. << bootstrap.universe_name >>).since seed might contain kind file ( blobs), all files are searched replaceable expressions default.instead, is file called template.yml the root directory the template. this file, can define template filter a template blacklist. template filter is list files will processed while bootstrapping universe description. usual glob wildcards are supported.double asterisks (**) be used recursive matching. careful adding wildcards *.processing included binary files may a long even though contain variables substitute.example:template_filter: - '**/*.yml' - '**/*.j2'using blacklist, can define files will be processed, though match or more the above defined filters. same glob wildcards are supported.example:template_blacklist: - 'ansible/example.yml' - '**/templates/*.yml' no template.yml file be found, expression substitution be disabled while creating seed. is still little no support checking validity templates, double check templates before publishing .you use seed list command see list templates available your system. you to create seed a specific template, can it seed -t template-name seed-name.universelisting installed universes can a list all installed universes using universe list. verbose flag (-v) also show corresponding location each universe.bootstrapping universe universe is locally installed instance a development container.universes are bootstrapped seeds. bootstrap universe run universe create /path//seed_folder. universe command mostly wraps tools debootstrap ansible. one those tools fails, universe command print wrapped commands stdout stderr. you to more details what is happening, the -v flag universe -v create /path//seed_folder. will print the wrapped commands' output stdout. is the universe command does while creating new container:copy seed the local multiverse (~/.slingring/multiverse/universe-name)create chroot the library (default: /var/lib/slingring/universe-name)create schroot configuration the chrootinitialize nssdatabases passwd/shadow etc. based the hostcopy initializers the universe run one one using schrootmount virtual filesystems the chroot (e.g. /dev, /proc, /sys etc.)run ansible playbook the ansible sub-directory the seed the chrootunmount virtual filesystems the container is bootstrapped, command can to enter container is printed the screen.since seed has been copied the local multiverse, is longer needed.updating universe your seed specifies packages their latest version, might to update universe time time. playbook , for example, contains role install proprietary ide intellij idea might update package, if is part any repositories available your container. will essentially re-run local copy the ansible playbook your universe.doing might fix problems accidentally removed packages repositories. is therefore advisable update universe time time. default template therefore includes timestamp the last update the welcome header opening portal. update universe, simply run universe update universe-name.adding -v flag the universe command print wrapped commands' output stdout.upgrading universe you create receive newer version a seed used bootstrap local universe, can upgrade universe the seed. will remove seed used bootstrap universe the local multiverse favor the version then run update routine.keep mind this behaviour is destined fail the seed contains fundamental changes outside the playbook., for example, underlying base image has been changed a newer ubuntu version, is guarantee an upgrade work. is therefore recommended upgrade universe if author the seed explicitly lists seed version compatible. upgrade universe a seed version run universe upgrade universe-name seed-location/.adding -v flag the universe command print wrapped commands' output stdout.removing universe can rid any universe simply entering universe remove universe-name.removing universe delete local copy the seed ~/.slingring/multiverse schroot configuration /etc/schroot/chroot.d chroot the universe (usually /var/lib/slingring/) also works incomplete universes may a result a failed bootstrap attempt.portalopening portal slingring command is used enter universe: slingring universe-name. can run command directly inside universe appending to slingring command (e.g. slingring universe-name ls). slingring command is thin wrapper around schroot command. mostly manages schroot session passes selected environment variables the container.entering universe is called \"opening portal\". terminal be seen a portal inside universe. the portal is opened, new schroot session is created. session contains mounts the virtual file systems (/dev, /proc, /sys etc). the last portal is closed, slingring try end session. a daemon has been started inside universe, slingring not able end session. that case corresponding warning is shown. can the schroot-process-check command show pids the processes running inside universe. session name is universe-name-seu-session. command schroot-process-check -v foo-seu-session show pids processes inside \"foo\" universe. is possible open portal, start daemon close portal. order correctly end session, open portal again, stop daemon close portal. ending session before shutting down system usually really break something. the hand, is guarantee the virtual filesystems might postpone shutdown all processes end properly. is therefore recommended stop daemons close open portals afterwards end session.further actionsfile transfer of main benefits using chroots development containers is the universes reside directly within host file system. makes incredibly easy move/copy files and of universe: open universe directory your host system copy files and .since universes passwd/shadow nssdatabase are initialized based your host system, files the user home your universe the same owner the files your hosts user home. you to access host system the guest, can a bind mount. your host system, runmount -o bind /path//your/host/system /path//the/mount/point/inside//universekeep mind manual mounts are managed slingring must manually unmounted.users passwords a universe is created, user database is copied the host system. that point , the user databases are strictly separated. means adding user changing password outside/inside universe not affect other side. reason this behaviour is you might to install services mysql apache inside container will their own service user.those users should be present outside universe. a consequence, can add arbitrary users your playbooks without risk doing harm the users host system. the hand, password changes outside universe not affect users inside universe. if change users password, sure do same inside universes. are plans add convenience function the universe command update password one more users inside containers the hosts password these users.contributioncontribution slingring is more welcome:please report bugs incompatible software a github ticket. can open new ticket you wishes feature suggestions. you to contribute code, dont hesitate create pull request.please so a dedicated branch."
}