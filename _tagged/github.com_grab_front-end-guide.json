{
	"_id": "14484724",
	"site": "https://github.com/grab/front-end-guide",
	"title": "Tackle JavaScript fatigue with this Front End study guide",
	"author": "yangshun",
	"date": "2017-06-13T14:10:06.126Z",
	"tags": {
		"categories": [
			"opensource",
			"front-end",
			"grab",
			"engineering",
			"study-plan",
			"javascript"
		],
		"languages": []
	},
	"content": "readme.md grab front end guidegrab is southeast asia (sea)'s leading transportation platform our mission is drive sea forward, leveraging the latest technology the talented we in company. of may 2017, handle 2.3 million rides daily we are growing hiring a rapid scale. keep with grab's phenomenal growth, web team web platforms to grow well. fortunately, unfortunately, grab, web team has been keeping with latest best practices has incorporated modern javascript ecosystem our web apps. result this is our hires back end engineers, are necessarily -acquainted the modern javascript ecosystem, may feel overwhelmed the barrage new things they to learn to complete feature bug fix a web app. front end development has never been complex exciting it is today. tools, libraries, frameworks plugins emerge every day there is much learn. is imperative newcomers the web team are guided embrace evolution the front end, learn navigate ecosystem ease, get productive shipping code our users fast possible. have up a study guide introduce why do we , and we handle front end scale. study guide is inspired \"a study plan cure javascript fatigue\" is mildly opinionated the sense we recommend certain libraries/frameworks learn each aspect front end development, based what is currently deemed suitable grab. explain why certain library/framework/tool is chosen provide links learning resources enable reader pick up their own. alternative choices may better other cases are provided well reference further self-exploration. your company is exploring modern javascript stack well, may find study plan useful your company too! feel free adapt to needs. will update study plan periodically, according our latest and choices.- grab web teampre-requisites understanding core programming concepts.comfortable basic command line actions familiarity source code version control systems such git.experience web development. built server-side rendered web apps using frameworks ruby rails, django, express, etc.understanding how web works. familiarity web protocols conventions http restful apis.table contentssingle-page apps (spas)-age javascriptuser interfacestate managementcoding stylemaintainabilitytestinglinting javascriptlinting csstypesbuild systempackage managementcertain topics be skipped you prior experience them.single-page apps (spas)web developers days refer the products build web apps, rather websites. while is strict difference between two terms, web apps tend be highly interactive dynamic, allowing user perform actions receive response their action. traditionally, browser receives html the server renders . when user navigates another url, full-page refresh is required the server sends fresh html the page. is called server-side rendering.however modern spas, client-side rendering is used instead. browser loads initial page the server, along the scripts (frameworks, libraries, app code) stylesheets required the whole app. the user navigates other pages, page refresh is triggered. url the page is updated via html5 history api. data required the page, usually json format, is retrieved the browser via ajax requests the server. spa dynamically updates page the data via javascript, it has already downloaded the initial page load. model is similar how native mobile apps .the benefits: app feels more responsive users not the flash between page navigations due full-page refreshes.fewer http requests are needed the server, the same assets not to downloaded again each page load.clear separation the concerns between client the server; can easily build clients different platforms (e.g. mobile, chatbots, smart watches) without having modify server code. can modify technology stack the client server independently, long the api contract is broken. downsides:heavier initial page load due loading framework, app code, assets required multiple pages [^1].'s additional step be done your server is configure to route requests a single entry point allow client-side routing take from .spas are reliant javascript render content, not search engines execute javascript during crawling, they may empty content your page. inadvertently hurts seo your app [^2].while traditional server-side rendered apps are still viable option, clear client-server separation scales better larger engineering teams, the client server code be developed released independently. is especially at grab we multiple client apps hitting same api server. web developers are building apps rather pages, organization client-side javascript has become increasingly important. server-side rendered pages, is common use snippets jquery add user interactivity each page. however, building large apps, jquery is sufficient. all, jquery is primarily library dom manipulation it's a framework, does define clear structure organization your app.javascript frameworks been created provide higher-level abstractions the dom, allowing to keep state memory, of dom. using frameworks brings benefits reusing recommended concepts best practices building apps. new engineer the team has experience a framework not app find easier understand code it is organized a structure he is familiar . popular frameworks a lot tutorials guides, tapping the knowledge experience colleagues the community help engineers up speed.study linkssingle page app: advantages disadvantages (r)evolution web developmenthere's why client side rendering won-age javascriptbefore dive the various aspects building javascript web app, is important get familiar the language the web - javascript, ecmascript. javascript is incredibly versatile language you also to build web servers, native mobile apps desktop apps.prior 2015, last major update was ecmascript 5.1, 2011. however, the recent years, javascript has suddenly seen huge burst improvements within short span time. 2015, ecmascript 2015 (previously called ecmascript 6) was released a ton syntactic constructs were introduced make writing code less unwieldy. auth0 has written nice history javascript. till day, all browsers fully implemented es2015 specification. tools such babel enable developers write es2015 their apps babel transpiles down es5 be compatible browsers.being familiar both es5 es2015 is crucial. es2015 is still relatively and lot open source code node.js apps are still written es5. you are doing debugging your browser console, might be able use es2015 syntax. the hand, documentation example code many modern libraries we introduce later below are written es2015. grab, use es2015 ( babel stage-0 preset) embrace syntactic improvements future javascript provides we been loving so far.spend day two revising es5 exploring es2015. more heavily used features es2015 include \"arrows lexical \", \"classes\", \"template strings\", \"destructuring\", \"default/rest/spread operators\", \"importing exporting modules\".estimated duration: 3-4 days. can learn/lookup syntax you learn other libraries try building own app.study linkslearn es5 codecademylearn es2015 babeles6 katas don't js (advanced content, optional beginners)user interface - react any javascript project has taken front end ecosystem storm recent years, would react. react is library built open-sourced the smart at facebook. react, developers write components their web interface compose together.react brings many radical ideas encourages developers rethink best practices. many years, web developers were taught it was good practice write html, javascript css separately. react does exact opposite, encourages you write html css your javascript instead. sounds a crazy idea first, after trying out, actually isn't weird it sounds initially. reason being front end development scene is shifting towards paradigm component-based development. features react:declarative - describe you to in view not to achieve . in jquery days, developers have come with series steps manipulate dom get one app state the next. react, simply change state within component the view update itself according the state. is easy determine the component look just looking the markup the render() method.functional - view is pure function props state. most cases, react component is defined props (external parameters) state (internal data). the same props state, same view is produced. pure functions are easy test, the same goes functional components. testing react is made easy a component's interfaces are -defined you test component supplying different props state it comparing rendered output.maintainable - writing view a component-based fashion encourages reusability. find defining component's proptypes react code self-documenting the reader know clearly is needed use component. lastly, view logic is self-contained within component, should be affected nor affect components. makes easy shift components around during large-scale refactoring, long the same props are supplied the component.high performance - might heard react uses virtual dom ( to confused shadow dom) it re-renders everything there is change state. why is a need a virtual dom? while modern javascript engines are fast, reading and writing the dom is slow. react keeps lightweight virtual representation the dom memory. re-rendering everything is misleading term. react actually refers re-rendering in-memory representation the dom, the actual dom itself. there's change the underlying data the component, new virtual representation is created, compared against previous representation. difference (minimal set changes required) is patched the real browser dom.ease learning - learning react is pretty simple. react api surface is relatively small compared this; are a few apis learn they not change often. react community is of largest, along that comes vibrant ecosystem tools, open-sourced ui components, a ton great resources online get started learning react.developer experience - are number tools improves development experience react. react developer tools is browser extension allows to inspect component, view manipulate props state. hot reloading webpack allows to view changes your code your browser, without having refresh browser. front end development involves lot tweaking code, saving then refreshing browser. hot reloading helps by eliminating last step. there are library updates, facebook provides codemod scripts help migrate code the apis. makes upgrading process relatively pain-free. kudos the facebook team their dedication making development experience react great. the years, view libraries are more performant react emerged. react may be fastest library there, in terms the ecosystem, overall usage experience benefits, is still of greatest. facebook is channeling efforts making react faster a rewrite the underlying reconciliation algorithm. concepts react introduced has taught how write better code, more maintainable web apps made better engineers. like .we recommend going through tutorial building tic-tac-toe game the react homepage get feel what react is what does. more -depth learning, check the highly-rated free course, react fundamentals the creators react router, are experts the react community. also covers more advanced concepts are covered the react documentation. create react app facebook is tool scaffold react project minimal configuration is highly recommended use starting react projects.react is library, a framework, does deal the layers below view - app state. more that later.estimated duration: 3-4 days. try building simple projects a -do list, hacker news clone pure react. will slowly gain appreciation it perhaps face problems along way isn't solved react, brings to next topic...study linksreact official tutorialreact fundamentalssimple react development 2017presentational container componentsalternativesangularembervuecyclestate management - flux/redux your app grows bigger, may find the app structure becomes little messy. components throughout app may to share display common data there is elegant to handle in react. all, react is the view layer, does dictate you structure other layers your app, such the model the controller, traditional mvc paradigms. an effort solve , facebook invented flux, app architecture complements react's composable view components utilizing unidirectional data flow. read more how flux works here. summary, flux pattern has following characteristics:unidirectional data flow - makes app more predictable updates be tracked easily.separation concerns - each part the flux architecture has clear responsibilities are highly decoupled.works with declarative programming - store send updates the view without specifying to transition views between states. flux is a framework per se, developers tried come with many implementations the flux pattern. eventually, clear winner emerged, was redux. redux combines ideas flux, command pattern elm architecture is de facto state management library developers with react days. core concepts are:app state is described a single plain old javascript object (pojo).dispatch action ( a pojo) modify state.reducer is pure function takes current state action produce new state. concepts sound simple, they are really powerful they enable apps :have state rendered the server, booted on client.trace, log backtrack changes the whole app.implement undo/redo functionality easily. creator redux, dan abramov, has taken great care writing detailed documentation redux, along creating comprehensive video tutorials learning basic advanced redux. are extremely helpful resources learning redux.combining view statewhile redux does necessarily to used react, is highly recommended they play very with each . react redux a lot ideas traits common:functional composition paradigm - react composes views (pure functions) while redux composes pure reducers ( pure functions). output is predictable given same set input.easy reason - you may heard term many times what does actually mean? through experience, react redux makes debugging simpler. the data flow is unidirectional, tracing flow data (server responses, user input events) is easier it is straightforward determine layer problem occurs.layered structure - each layer the app / flux architecture is pure function, has clear responsibilities. is pretty easy write tests them.development experience - lot effort has gone creating tools help debugging inspecting app while development, such redux devtools. app likely to deal async calls making remote api requests. redux-thunk redux-saga were created solve those problems. may some to understand they require understanding functional programming generators. advice is deal it when need .react-redux is official react binding redux is very simple learn.estimated duration: 4 days. egghead courses be little consuming they are worth spending on. learning redux, can try incorporating into react projects have built. does redux solve of state management issues were struggling in pure react?study linksflux homepageredux homepageegghead course - getting started reduxegghead course - build react apps idiomatic reduxreact redux links might need reduxalternativesmobxcoding style - css moduleswriting css is hard. takes many years experience frustration shooting yourself the foot before is able write maintainable scalable css. css, having global namespace, is fundamentally designed web documents, not really web apps favor components architecture. hence, experienced front end developers designed methodologies guide on to write organized css complex projects, such using smacss, bem, suit css, etc.however, encapsulation styles these methodologies bring are artificially enforced conventions guidelines. break moment developers not follow .fortunately, front end ecosystem is saturated tools, unsurprisingly, tools been invented partially solve of problems writing css scale. \" scale\" means many developers are working the same project touching same stylesheets. is community-agreed approach writing css js the moment, we are hoping one a winner emerge, like redux did, among the flux implementations. now, are banking css modules. css modules is improvement existing css aims fix problem global namespace css; enables to write styles are local default encapsulated your component. feature is achieved via tooling. css modules, large teams write modular reusable css without fear conflict overriding parts the app. however, the end the , css modules are still being compiled normal globally-namespaced css browsers recognize, it is still important learn raw css. you are total beginner css, codecademy's html & css course be good introduction you. next, read on sass preprocessor, extension the css language adds syntactic improvements encourages style reusability. study css methodologies mentioned above, lastly, css modules.estimated duration: 3-4 days. try styling your app using smacss/bem approach /or css modules.study linkslearn html & css course codecademyintro html/css khan academysmacssbemsuit csscss modules specificationsass homepage pattern writing css scalealternativesjssstyled componentsmaintainabilitycode is read more frequently it is written. is especially true grab, where team size is large we multiple engineers working across multiple projects. highly value readability, maintainability stability the code there are few ways achieve : \"extensive testing\", \"consistent coding style\" \"typechecking\".testing - jest + enzymejest is testing library facebook aims make process testing pain-free. with facebook projects, provides great development experience of box. tests be run parallel faster speed during watch mode, the tests the changed files are run. particular feature like is \"snapshot testing\". jest save generated output your react component redux state save as serialized files, you wouldn't to manually up the expected output yourself. jest comes built- mocking, assertion test coverage. library rule all!react comes some testing utilities, enzyme airbnb makes easier generate, assert, manipulate traverse react components' output a jquery- api. is recommended enzyme used test react components.jest enzyme makes writing front end tests fun easy. also helps react components redux actions/reducers are relatively easy test of clearly defined responsibilities interfaces. react components, can test given props, desired dom is rendered, that callbacks are fired upon certain simulated user interactions. redux reducers, can test given prior state an action, resulting state is produced. documentation jest enzyme are pretty concise, it should sufficient learn by reading .estimated duration: 2-3 days. try writing jest + enzyme tests your react + redux app!study linksjest homepagetesting react apps jestenzyme homepageenzyme: javascript testing utilities reactalternativesavakarmalinting javascript - eslint linter is tool statically analyze code finds problems them, potentially preventing bugs/runtime errors at same , enforcing coding style. is saved during pull request reviews reviewers not to leave nitpicky comments coding style. eslint is tool linting javascript code is highly extensible customizable. teams write own lint rules enforce custom styles. grab, use airbnb's eslint-config-airbnb preset, has already been configured the common coding style the airbnb javascript style guide. the part, using eslint is simple tweaking configuration file your project folder. 's nothing much learn eslint you're writing rules it. be aware the errors they surface google to find the recommended style.estimated duration: 1/2 . nothing much learn here. add eslint your project fix linting errors!study linkseslint homepageairbnb javascript style guidealternativesstandardjshintlinting css - stylelint mentioned earlier, css is notoriously hard write. usage static analysis tools css help maintain css code quality coding style. linting css, use stylelint. eslint, stylelint is designed a very modular fashion, allowing developers turn rules /off write custom plugins it. besides css, stylelint is able parse scss has experimental support less, lowers barrier most existing code bases adopt .once have learnt eslint, learning stylelint be effortless considering similarities. stylelint is currently being used big companies facebook, github wordpress. downside stylelint is the autofix feature is fully mature yet, is able fix a limited number rules. however, issue should improve time.estimated duration: 1/2 . nothing much learn here. add stylelint your project fix linting errors!study linksstylelint homepagelint css stylelintalternativessass lintcss linttypes - flowstatic typing brings many benefits writing apps. can catch common bugs errors your code early. types serve a form documentation your code improves readability your code. a code base grows larger, see importance types they gives greater confidence we refactoring. is easier onboard members the team the project it is clear kind values each object holds what each function expects.adding types your code comes the trade-off increased verbosity a learning curve the syntax. this learning cost is paid upfront amortized time. complex projects where maintainability the code matters the working it change time, adding types the code brings more benefits disadvantages. two biggest contenders adding static types javascript are flow ( facebook) typescript ( microsoft). of date, is clear winner the battle. now, have made choice using flow. find flow has lower learning curve compared typescript it requires relatively less effort migrate existing code base flow. being built facebook, flow has better integration the react ecosystem of box. james kyle, of authors flow, has written a comparison between adopting flow typescript.anyway, is extremely difficult move flow typescript the syntax semantics are quite similar, we re-evaluate situation time come. all, using is better not using at .flow recently revamped documentation site it's pretty neat !estimated duration: 1 . flow is pretty simple learn the type annotations feel a natural extension the javascript language. add flow annotations your project embrace power type systems.study linksflow homepagetypescript vs flowalternativestypescriptbuild system - webpack part be kept short setting webpack be tedious process might a turn-off developers are already overwhelmed the barrage new things have learn front end development. a nutshell, webpack is module bundler compiles front end project its dependencies a final bundle be served users. usually, projects already the webpack configuration set and developers rarely to change . having understanding webpack is still good have the long run. is due webpack features hot reloading css modules are made possible. have found webpack walkthrough survivejs be best resource learning webpack. is good complement the official documentation we recommend following walkthrough and referring the documentation later the need further customization arises.estimated duration: 2 days (optional).study linkswebpack homepagesurvivejs - webpack: apprentice masteralternativesrollupbrowserifypackage management - yarn you a peek your node_modules directory, will appalled the number directories are contained it. each babel plugin, lodash function, is package its own. you multiple projects, packages are duplicated across each project they are largely similar. each you run npm install a project, packages are downloaded and again though already exist some project your computer. was the problem non-determinism the installed packages via npm install. of ci builds fail at point time the ci server installs dependencies, pulled minor updates some packages contained breaking changes. would have happened library authors respected semver engineers assumed api contracts are respected the .yarn solves problems. issue non-determinism installed packages via yarn.lock file it ensures every install results the exact same file structure node_modules across machines. yarn utilizes global cache directory within machine, packages have been downloaded before not to downloaded again. also enables offline installation dependencies! most common yarn commands be found here. other yarn commands are similar the npm equivalents it is fine use npm versions instead. of favorite commands is yarn upgrade-interactive makes updating dependencies breeze especially the modern javascript project requires many dependencies days. check out!npm@5.0.0 was released may 2017 it seems address many the issues yarn aims solve. keep eye it!estimated duration: 2 hours.study linksyarn homepageyarn: new package manager javascriptalternatives old npm journey has beguncongratulations making this far! front end development today is hard, it is more interesting before. we covered far help new engineer grab's web team get to speed our technologies pretty quickly. are many more things be learnt, building a solid foundation the essentials aid learning rest the technologies. helpful front end web developer roadmap shows alternative technologies available each aspect. made technical decisions based what was important a rapidly growing grab engineering team - maintainability stability the front end code base. decisions may may apply smaller teams projects. evaluate works best you your company. the front end ecosystem grows, are actively exploring, experimenting evaluating new technologies make a more efficient team improve productivity. hope this post has given insights the front end technologies use grab. what are doing interests , we are hiring!many thanks joel low, li kai tan wei seng reviewed drafts this article.more readinggeneralstate the javascript landscape: map newcomers hitchhiker's guide the modern front end development workflow it feels learn javascript 2016roadmap becoming web developer 2017modern javascript ancient web developers study plans study plan cure javascript fatiguejs stack scratch beginners javascript study planfootnotes[^1]: can solved via webpack code splitting.[^2]: universal js the rescue!"
}