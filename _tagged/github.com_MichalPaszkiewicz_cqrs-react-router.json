{
	"_id": "14330873",
	"site": "https://github.com/MichalPaszkiewicz/cqrs-react-router",
	"title": " Cqrs-react-router â€“ A Redux alternative",
	"author": "michjedi",
	"date": "2017-06-13T13:08:16.702Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"typescript",
			"javascript"
		]
	},
	"content": "readme.md cqrs-react-routercqrs-react-router is library will help easily set a cqrs/event sourcing systemtypescript supportcqrs-react-router is written typescript therefore always support typescript to contributefeel free submit pull requests, please provide clear notes to your update change.pull requests cause tests fail not accepted. to install will need npm. install library npm install cqrs-react-routercqrs start writing own typescript cqrs application, will need application service, which register command handlers viewsimport {applicationservice, iamacommandhandler, domainservice, iamacommand, view, aggregateroot} \"cqrs-react-router\";class someview extends view{ name = \"someview\"; // subscribers get updates this view stuff = 0; handle(action: iamanaction){ var self = ; switch(action.name){ case \"someaction\": self.stuff++; return; } }}export class someaggregateroot extends aggregateroot{ dostuff(command){ // something } applyaction(action){ switch(action.name){ // action applied, something here default: return; } }}class somecommandhandler implements iamacommandhandler{ commandnames = [\"somecommand\"]; // handler handle commands these names handle(command, domainservice: domainservice, callback: () => void){ domainservice.getaggregateroot(someaggregateroot, (someaggregateroot: someaggregateroot) => { someaggregateroot.dostuff(command); }, \"someaggregateid\"); }}var appservice = applicationservice();appservice.registercommandhandler(somecommandhandler);appservice.registerview(someview); subscriber a viewappservice.subscribe(\"someview\", (view: someview) => { // something the view;}); handle commandappservice.handlecommand( somecommand()) validate command viewsclass testcommandvalidator extends commandvalidator{ commandnames = [command_name]; validate(command: iamacommand){ // getviewbyname fetches view application service .getviewbyname(viewname, (view: testview)=> { (view.hassomeunexpectedvalue){ throw domainerror(\"oh noes, didn't expect !\"); } }); }}applicationservice.instance.registercommandvalidator(testcommandvalidator);router just react-router, it inject application service you subscribe .import {router, route, applicationservice, page} \"cqrs-react-router\";class somepage extends page<, any>{ render(){ return ( <div> stuff </div> ) }}export class app extends react.component<appprops, appstate>{ render(){ return ( <router applicationservice={ applicationservice()}> <route path=\"/\" component={somepage} /> </router> ) }}replay actions!testapplicationservice.replayactions();apply actions external sourcestestapplicationservice.storeaction( testaction(\"123\"));latest changes1.1.0onactionstored now called an applicationservice instance.applicationservice.instance.onactionstored(callback: (action: iamanaction) => { // something this action})1.0.6hardreplayactions applicationservice will allow to reset aggregate roots (replayactions resets views).1.0.5introduction auditedaction abstract class will enforce of createdby string property.1.0.4small fix clockdate object - adding time returns new object doesn't mutate original clockdate.1.0.2datedaction comes part the package - is abstract class implements iamanaction. will automatically set \"created\" property creation therefore is more useful users want use actions auditing purposes.1.0.0breaking change: use 'id' iamanaction was bit ambiguous, iamanaction has property 'aggregateid' instead.commandvalidator abstract class available can registered your applicationservice. can also a report your state your application service :var report = applicationservice.instance.getstatereport();0.1.9 can handle domain errors neatly subscribe domain error event your application service:applicationservice.instance.ondomainerror((error: domainerror) => { alert(error.message);});please that will handle generic errors - errors specified domainerrors."
}