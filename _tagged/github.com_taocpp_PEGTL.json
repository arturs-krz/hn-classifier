{
	"_id": "14372126",
	"site": "https://github.com/taocpp/PEGTL",
	"title": "Taocpp/PEGTL: Parsing Expression Grammar Template Library",
	"author": "kristianp",
	"date": "2017-06-13T13:57:06.949Z",
	"tags": {
		"categories": [
			"opensource",
			"c-plus-plus",
			"peg",
			"header-only",
			"cpp11",
			"cpp-library",
			"cpp",
			"parsing"
		],
		"languages": [
			"c++",
			"cmake",
			"other"
		]
	},
	"content": "readme.md welcome the pegtl parsing expression grammar template library (pegtl) is zero-dependency c++11 header- library creating parsers according a parsing expression grammar (peg).documentationversion 2.0 documentationversion 1.3 documentationintroductiongrammars are written regular c++ code, created template programming ( template meta programming), .e. nested template instantiations naturally correspond the inductive definition pegs ( other parser-combinator approaches). comprehensive set parser rules can combined extended the user is included, are mechanisms debugging grammars, for attaching user-defined actions grammar rules.here is example how peg grammar rule is implemented c++ class the pegtl.// peg rule integers consisting a non-empty// sequence digits an optional sign:// integer ::= ( '+' / '-' )? digit+// same parsing rule implemented the pegtl:using namespace tao::pegtl;struct integer : seq< opt< < '+', '-' > >, plus< digit > > {};pegs are superficially similar context-free grammars (cfgs), however more deterministic nature pegs gives rise some very important differences. included grammar analysis finds several typical errors pegs, including left recursion.design pegtl is designed be \"lean mean\", core library consists approximately 5000 lines code.emphasis is simplicity efficiency, preferring well-tuned simple approach complicated optimisations. pegtl is mostly concerned parsing combinators grammar rules, with giving user the library ( possibility ) full control all aspects a parsing run. whether/ actions are taken, whether/ data structures are created during parsing run, is entirely to user.included are examples typical situation unescaping escape sequences strings, building generic json data structure, on--fly evaluation arithmetic expressions.through use template programming template specialisations is possible write grammar once, use in multiple ways different (semantic) actions different ( the same) parsing runs.unlike antlr yacc/bison, grammar is expressed c++ is part the c++ source code., with peg formalism separation lexer parser stages is usually dropped -- everything is done a single grammar.unlike spirit, grammar is implemented compile- template instantiations rather run- operator calls. leads slightly increased compile times the c++ compiler is given task optimising pegtl grammars.status master branch the pegtl is stable the sense all known bugs are fixed all unit tests run without errors.each commit is automatically tested multiple architectures, operating systems, compilers, versions thereof.windowsvisual studio 2015 (x86, x64)visual studio 2017 (x86, x64)mac os x / macos (using libc++)mac os x 10.10, xcode 6.4mac os x 10.11, xcode 7.3macos 10.12, xcode 8.3linux (using libstdc++)debian 8 (i386), gcc 4.9ubuntu 12.04 lts (amd64), gcc 4.8, 4.9, 5, 6ubuntu 12.04 lts (amd64), clang 3.4, 3.5, 3.6, 3.7, 3.8ubuntu 14.04 lts (amd64), gcc 7ubuntu 14.04 lts (amd64), clang 3.9, 4.0ubuntu 14.04 lts (i386, amd64), gcc 4.8ubuntu 16.04 lts (i386, amd64, armhf, arm64), gcc 5fedora 24 (x86_64), gcc 6fedora 24 (x86_64), clang 3.8androidandroid 5.1, ndk release 10eadditionally, each commit is checked gcc's clang's sanitizers well valgrind.code coverage is automatically measured the unit tests cover 100% the core library code ( releases).releases are done accordance semantic versioning.incompatible api changes are allowed occur between major versions. details the changelog.thank christopher diggins the yard parser the general idea.george makrydakis the inspiration taocpp_pegtl_string.johannes overmann his invaluable streplace command-line tool.kai wolf help cmake.kenneth geisshirt android compatibility android ci.kuzma shapran eol testing fixes.michael becker help cmake.paulo custodio windows-related fixes.sam hocevar contributing visual studio 2015 compatibility.stephan beal the bug reports, suggestions discussions.sven johannsen help cmake.zhihao yuan fixing several warnings compiling visual studio 2015.contact questions suggestions regarding pegtl, success failure stories, any kind feedback, please feel free contact authors taocpp()icemx.net.license pegtl is certified open source software. may used any purpose, including commercial purposes, absolutely cost. is distributed under terms the mit license reproduced here.copyright (c) 2007-2017 dr. colin hirsch daniel freypermission is hereby granted, free charge, any person obtaining copy this software associated documentation files ( \"software\"), deal the software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /or sell copies the software, to permit persons whom software is furnished do , subject the following conditions: above copyright notice this permission notice shall included all copies substantial portions the software. software is provided \" is\", without warranty any kind, express implied, including not limited the warranties merchantability, fitness a particular purpose noninfringement. no event shall authors copyright holders liable any claim, damages other liability, whether an action contract, tort otherwise, arising , out or connection the software the or dealings the software."
}