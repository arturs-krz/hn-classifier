{
	"_id": "14535410",
	"site": "https://github.com/dosaygo-coder-0/Uint1Array",
	"title": " Uint1Array â€“ JavaScript's Missing TypedArray",
	"author": "19eightyfour",
	"date": "2017-06-13T13:23:08.682Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md uint1arrayjavascript's missing typedarray // a length var uint1 = uint1array(2); uint1[0] = 42; console.log(uint1[0]); // 1 console.log(uint1.length); // 2 console.log(uint1array.bytes_per_element); // 0.125 // an array var arr = uint1array([21,31]); console.log(arr[1]); // 1 // another typedarray's buffer var x = uint8array([21, 31]); var y = uint1array(x.buffer); console.log(\"\"+y); // uint1array [ 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0 ] // an arraybuffer var buffer = arraybuffer(8); var z = uint1array(buffer, 1, 4); // an iterable var iterable = function*(){ yield* [1,0,1]; }(); var uint1 = uint1array(iterable); console.log( \"\"+uint1 ); // uint1array[1, 0, 1]javascript's missing typed array uint1array typed array represents array 1-bit unsigned integers. contents are initialized 0. once established, can reference elements the array using object's methods, using standard array index syntax ( is, using bracket notation).syntax uint1array(); // ** new es2017 uint1array(length); uint1array(typedarray); uint1array(object); uint1array(buffer [, byteoffset [, length]]); more information the constructor syntax the parameters, typedarraypropertiesuint1array.bytes_per_elementreturns number value the element size. 0.125 the case an uint1array.uint1array.lengthstatic length property whose value is 0. the actual length (number elements), uint1array.prototype.length.uint1array.namereturns string value the constructor name. the case the uint1array type: \"uint1array\".uint1array.prototypeprototype the typedarray objects.methodsuint1array.()creates new uint1array an array- or iterable object. also array.().uint1array.()creates new uint1array a variable number arguments. also array.().uint1array prototype uint1array objects inherit %typedarray%.prototype.propertiesuint1array.prototype.constructorreturns function created instance's prototype. is uint1array constructor default.uint1array.prototype.buffer read returns arraybuffer referenced the uint1array fixed construction and thus read .uint1array.prototype.bytelength read returns length ( bytes) the uint1array. fixed construction and thus read .uint1array.prototype.byteoffset read returns offset ( bytes) the uint1array the start its arraybuffer. fixed construction and thus read .uint1array.prototype.length read returns number elements held the uint1array. fixed construction and thus read .methodsuint1array.prototype.copywithin()copies sequence array elements within array. also array.prototype.copywithin().uint1array.prototype.entries()returns new array iterator object contains key/value pairs each index the array. also array.prototype.entries().uint1array.prototype.every()tests whether elements the array pass test provided a function. also array.prototype.every().uint1array.prototype.fill()fills the elements an array a start index an end index a static value. also array.prototype.fill().uint1array.prototype.filter()creates new array all the elements this array which provided filtering function returns true. also array.prototype.filter().uint1array.prototype.find()returns found value the array, an element the array satisfies provided testing function undefined not found. also array.prototype.find().uint1array.prototype.findindex()returns found index the array, an element the array satisfies provided testing function -1 not found. also array.prototype.findindex().uint1array.prototype.foreach()calls function each element the array. also array.prototype.foreach().uint1array.prototype.includes()determines whether typed array includes certain element, returning true false appropriate. also array.prototype.includes().uint1array.prototype.indexof()returns first (least) index an element within array equal the specified value, -1 none is found. also array.prototype.indexof().uint1array.prototype.join()joins elements an array a string. also array.prototype.join().uint1array.prototype.keys()returns new array iterator contains keys each index the array. also array.prototype.keys().uint1array.prototype.lastindexof()returns last (greatest) index an element within array equal the specified value, -1 none is found. also array.prototype.lastindexof().uint1array.prototype.map()creates new array the results calling provided function every element this array. also array.prototype.map().uint1array.prototype.reduce()apply function against accumulator each value the array ( left--right) to reduce to single value. also array.prototype.reduce().uint1array.prototype.reduceright()apply function against accumulator each value the array ( right--left) to reduce to single value. also array.prototype.reduceright().uint1array.prototype.reverse()reverses order the elements an array first becomes last, the last becomes first. also array.prototype.reverse().uint1array.prototype.set()stores multiple values the typed array, reading input values a specified array.uint1array.prototype.slice()extracts section an array returns new array. also array.prototype.slice().uint1array.prototype.()returns true at least element this array satisfies provided testing function. also array.prototype.().uint1array.prototype.sort()sorts elements an array place returns array. also array.prototype.sort().uint1array.prototype.subarray()returns new uint1array the given start end element index.uint1array.prototype.values()returns new array iterator object contains values each index the array. also array.prototype.values().uint1array.prototype.tolocalestring()returns localized string representing array its elements. also array.prototype.tolocalestring().uint1array.prototype.tostring()returns string representing array its elements. also array.prototype.tostring().uint1array.prototype[@@iterator]()returns new array iterator object contains values each index the array.examplesdifferent ways create uint1array: // a length var uint8 = uint1array(2); uint8[0] = 42; console.log(uint8[0]); // 1 console.log(uint8.length); // 2 console.log(uint1array.bytes_per_element); // 0.125 // an array var arr = uint1array([21,31]); console.log(arr[1]); // 1 // another typedarray's buffer var x = uint8array([21, 31]); var y = uint1array(x.buffer); console.log(\"\"+y); // uint1array [ 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0 ] // an arraybuffer var buffer = arraybuffer(8); var z = uint1array(buffer, 1, 4); // an iterable var iterable = function*(){ yield* [1,0,1]; }(); var uint8 = uint1array(iterable); console.log( \"\"+uint8 ); // uint1array[1, 0, 1]why ?bit fields are useful things. handling binary data javascript got big boost es2017's typed arrays, native constructs enable views binary data different bit widths using underlying arraybuffer bytes.conspicuous its absence was uint1array, bit field., for pleasure, has arrived.unfortunately doesn't all bells whistles a native implementation, particularly lacking is beautiful output format the console the original typed arrays. however, matter. 's still .the api is copied exactly the spec. submit pull request open issue you notice something is amiss, if see way improve .installingnpm install uint1arraybower install uint1arrayusing can like ordinary typed array: const coerced_bits = uint1array( [1,2,3,0] ); console.log( `${coerced_bits}` ); // uint1array [ 1, 1, 1, 0 ] by passing typedarray's .buffer property, any arraybuffer can it a bitfield view the underlying typedarray data. const message = \"javascript rocks\"; const byte_values = message.split('').map( c => c.charcodeat(0) ); const bytes = uint8array( byte_values ); const bit_field = uint1array( bytes.buffer ); console.log( `${bit_field}` ); // uint1array [ 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0 ]more informationtyped arrays mdnuint1array npm"
}