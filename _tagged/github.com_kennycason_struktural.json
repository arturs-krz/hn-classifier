{
	"_id": "14442510",
	"site": "https://github.com/kennycason/struktural",
	"title": "Struktural â€“ API Testing Made Easy in Kotlin",
	"author": "KennyCason",
	"date": "2017-06-13T13:55:20.390Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"kotlin"
		]
	},
	"content": "readme.md strukturalstruktural is suite tools written kotlin designed make testing apis easier java/kotlin.struktural is designed give flexible control the level desired testing.featuresdescriptionassert json structure lightweight test assert presence fieldsassert json types middleweight test assert presence fields their typesassert json values heavyweight test assert presence fields their valuesstruktural provides interfaces. native kotlin interface running tests. (interfaces natively java) yaml driven test format. place tests a yaml format don't type java/kotlin all! are plans build maven plugin this. initially will a helper class load run the yaml tests. are libraries influenced and desire build library.ruby's airborne library when combined rspec beautiful lightweight api testing.java's skyscreamer's jsonasert library made api testing pain bit easier.whytesting apis java/kotlin often involves verbose methodologies following of three patterns:assert each field individually a raw json map object.compare expected json a resource sample_expected.json a responsemapping responses pojos peforming equals checks checking field field. is attempt make writing integration tests more fun remove of pain often associated writing api integration tests java. think is especially important the world continues adopt service oriented architectures.wherestruktural is available maven central. ( will very soon)<dependency> <groupid>com.kennycason</groupid> <artifactid>struktural</artifactid> <version>1.0.2</version></dependency>kotlin apiassert field structureval json = \"\"\"{ \"name\": \"kenny\", \"age\": 64, \"job\": { \"id\": 123456, \"title\": \"software engineer\" }}\"\"\"struktural.assertstructure(json, listof(\"name\", \"age\", pair(\"job\", listof(\"id\", \"title\"))))// nested array objectsval json = \"\"\"{ \"languages\": [ { \"name\": \"kotlin\", \"coolness\": 100 }, { \"name\": \"java\", \"coolness\": 50 } ]}\"\"\"struktural.assertstructure(json, listof(pair(\"languages\", listof(\"name\", \"coolness\"))))assert field type structureval json = \"\"\"{ \"name\": \"kenny\", \"age\": 64, \"shoe_size\": 10.5, \"favorite_number\": 2.718281828459045235, \"long_number\": 1223235345342348, \"random\": [1,2,3,4,5,6], \"job\": { \"id\": 123456, \"title\": \"software engineer\" }}\"\"\"// strict number typesstruktural.asserttypes(json, listof(pair(\"name\", string::class), pair(\"age\", int::class), pair(\"shoe_size\", float::class), pair(\"favorite_number\", double::class), pair(\"long_number\", long::class), pair(\"random\", array<>::class), pair(\"job\", object::class), pair(\"job\", listof(pair(\"id\", int::class), pair(\"title\", string::class)))))// relaxed number typesstruktural.asserttypes(json, listof(pair(\"name\", string::class), pair(\"age\", number::class), pair(\"shoe_size\", number::class), pair(\"favorite_number\", number::class), pair(\"long_number\", number::class), pair(\"random\", array<>::class), pair(\"job\", object::class), pair(\"job\", listof(pair(\"id\", number::class), pair(\"title\", string::class)))))// nested array objectsval json = \"\"\"{ \"languages\": [ { \"name\": \"kotlin\", \"coolness\": 100 }, { \"name\": \"java\", \"coolness\": 50 } ]}\"\"\"struktural.asserttypes(json, listof(pair(\"languages\", listof(pair(\"name\", string::class), pair(\"coolness\", number::class)))))// nullable valuesval json = \"\"\"{ \"foo\": null}\"\"\"struktural.asserttypes(json, listof(pair(\"foo\", nullable(string::class))))assert field valuesval json = \"\"\"{ \"name\": \"kenny\", \"age\": 64, \"shoe_size\": 10.5, \"favorite_number\": 2.718281828459045235, \"long_number\": 1223235345342348, \"job\": { \"id\": 123456, \"title\": \"software engineer\" }}\"\"\"struktural.assertvalues(json, listof(pair(\"name\", \"kenny\"), pair(\"age\", 64), pair(\"shoe_size\", 10.5), pair(\"favorite_number\", 2.718281828459045235), pair(\"long_number\", 1223235345342348), pair(\"job\", listof(pair(\"id\", 123456), pair(\"title\", \"software engineer\")))))// match partialstruktural.assertvalues(json, listof(pair(\"name\", \"kenny\"), pair(\"favorite_number\", 2.718281828459045235)))// simple array exampleval json = \"\"\"{ \"numbers\": [1,2,3,4,5,6]}\"\"\"struktural.assertvalues(json, listof(pair(\"numbers\", arrayof(1, 2, 3, 4, 5, 6))))// nested array exampleval json = \"\"\"{ \"\": [ { \"name\": \"kenny\", \"favorite_language\": \"kotlin\", \"age\": 64 }, { \"name\": \"martin\", \"favorite_language\": \"kotlin\", \"age\": 92 } ]}\"\"\"struktural.assertvalues(json, listof(pair(\"\", listof(pair(\"favorite_language\", \"kotlin\")))))yaml api addition the native kotlin/java api unit tests also configured via yaml files.example api test #1---config: base_url: http://api.company.comtests: - mode: type data: request: uri: /language/detection method: post body: '{\"data\":[{\"id\":\"1\",\"text\":\" am english comment\"}]}' headers: - 'content-type: application/json' expects: - data: id: string language: name: string code: string score: int is_reliable: boolexample api test #2---tests: - mode: type data: request: uri: https://api.company.com/labels method: params: - 'include_inactive=true' headers: - 'authorization: bearer <auth_token>' - 'content-type: application/json' expects: - data: type: string id: string attributes: account_id: string name: string color: string created_at: string created_by: string updated_at: string updated_by: string active: bool yaml format provides options validating json files, resources, well a variety configurations. yaml format description properties be found below:---# config block provides section global configsconfig: # base_url is optional field remove verbosity testing apis. # is prepended data.request.uri set. base_url: https://api.foobar.com port: 8080tests: - # array tests # pick of three modes testing # structure = assert fields missing # type = assert fields missing field types # value = assert fields missing field values mode: structure | type | value # data block provides methods providing data data: # 1. configuration url requests request: uri: /v2/foo/bar method: post body: '{\"foo\":\"bar\"}' params: - 'field=value' - 'field2=value2' headers: - 'authorization: key' # 2. configuration loading json resource, great unit tests resource: /path//resource/food.json # 3. configuration loading file file system file: /path//file.json expects: # note you must choose of below formats # example mode: structure - name - age - job: - id - title # example mode: types - name: string - age: int - job: id: int title: string # example mode: values - name: kenny - age: 30 - job: id: 123456 title: software engineeryaml test examplesassert tests yaml file are validstruktural.assertyaml(javaclass.getresourceasstream(\"/path//resource/my_test.yml\"))test against raw yaml stringval yaml = \"\"\"---tests: - mode: type data: resource: /com/kennycason/struktural/json/person_sample_response.json expects: - name: string - age: int - job: id: int title: string\"\"\"struktural.assertyaml(yaml)kotlin + struktural + spek small example using jetbrain's spek frameworkclass langleytests : spek( { describe(\"language classification api tests\") { (\"response structure & types\") { val json = httpjsonloader( request = request(uri = \"http://api.service.com/language/detection\", method = httpmethod.post, body = \"\"\"{\"items\":[{\"id\":\"1\",\"text\":\" am happy person\"}]}\"\"\", headers = listof<header>(basicheader(\"content-type\", \"application/json\")))) .load() struktural.asserttypes(json, listof(pair(\"items\", listof( pair(\"id\", string::class), pair(\"language\", listof( pair(\"name\", string::class), pair(\"code\", string::class), pair(\"score\", int::class), pair(\"is_reliable\", boolean::class))))))) } }})notespass context test--test. allow response form test drive next test.better error handling/logging come.'m looking ideas more features. e.g.maven plugin automatically scan resource yaml test files, some similar concept further facility configuring testsextra validation functionscurrently project has hard dependency apache http client jackson json parsing. eventually may extracted so you choose library.much the inernal code be cleaned and better organized time. was few proof--concept project."
}