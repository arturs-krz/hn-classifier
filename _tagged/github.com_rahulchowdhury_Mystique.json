{
	"_id": "14445202",
	"site": "https://github.com/rahulchowdhury/Mystique",
	"title": "Mystique â€“ Heterogeneous RecyclerView Adapter in Kotlin",
	"author": "rahulchowdhury",
	"date": "2017-06-13T13:55:21.425Z",
	"tags": {
		"categories": [
			"opensource",
			"android",
			"kotlin",
			"kotlin-android",
			"kotlin-library",
			"android-library",
			"recyclerview-adapter",
			"recyclerview-multi-type",
			"list",
			"gradle"
		],
		"languages": [
			"kotlin",
			"java"
		]
	},
	"content": "readme.md mystique is kotlin library androids recyclerview allows to create homogeneous heterogeneous lists effortlessly using universal adapter. s recyclerview.adapter steroids, written purely kotlin (oh yeah, extension functions too).download can download library through jcenter one the following ways,gradleadd line your build.gradle file under dependencies section along any library you might .dependencies {compile 'co.upcurve.mystique:mystique:1.0'}maven you prefer use maven, add following lines,<dependency> <groupid>co.upcurve.mystique</groupid> <artifactid>mystique</artifactid> <version>1.0</version> <type>pom</type></dependency>usageusing library is fairly simple. need create data class will the model your row data, a presenter item extends mystiqueitempresentercreating model class model class is regular data class holds the data needs be displayed a single row inside list, however special addition. need annotate presenter will used this model class mystique correctly recognize presenter this model class bind both them without effort your side.newsmodel.kt//specify presenter here this format@presenter(newsitem::class)data class newsmodel(var heading: string = \"\", var desc: string = \"\", var content: string = \"\")please note, model class needs be data class functions removeitem() work.s , nothing more is required add your data class.creating presenter item class presenter the item class is place where specify layout should inflated the model how load data the inflated view your model according your business logic. can add custom click listeners here handle clicks the row individual items the row.consider following example class,newsitem.ktclass newsitem : mystiqueitempresenter() { //declare newsmodel object lateinit private var newsmodel: newsmodel //binding the views the row using butterknife @bindview(r.id.heading_news) lateinit var newsheading: textview /** * is where need populate data the model * each element the row according your business logic */ override fun displayview(itemview: view) { butterknife.bind(, itemview) newsheading.text = newsmodel.heading } /** * return model here mystic do proper mapping * while adding deleting items your list */ override fun getmodel() = newsmodel /** * return layout associated the model mystic * correctly inflate proper views each supplied * model */ override fun getlayout() = r.layout.view_item_news /** * is where initialize model supplied * mystique through method call */ override fun loadmodel(model: ) { newsmodel = model newsmodel } /** * you need handle clicks your items * items within item, is where do * by adding own custom listener ( sample) */ override fun handleclickevents(itemview: view) { } /** * initialize custom listener this function * call, will called mystique while loading * data */ override fun setlistener(listener: ?) { }}and, re set!loading models the adapter next step is load models the universal adapter, is breeze thanks mystiques auto-binding models their respective presenters.once have data initialized their appropriate model classes, declare reference your adapter load data this fashion,/** * initialize adapter */val adapter = mystiqueadapter<mystiqueitempresenter>()/** * set models the adapter loading */adapter.setitems(newslist.tomystifiedlist())here, extension function (since s kotlin) converts regular list<t> a mutablelist<mystiqueitempresenter> attaching the appropriate models their presenters behind scenes you.voila! s . did expect more? functionsmystique defines functions such ,add itemfun <t : mystiqueitempresenter> mystiqueadapter<t>.additem(item: t?, index: int = mystiqueitems.size)remove itemusing index,fun <t : mystiqueitempresenter> mystiqueadapter<t>.removeitem(index: int = mystiqueitems.size - 1)using model,fun <t : mystiqueitempresenter> mystiqueadapter<t>.removeitem(model: )add list itemsfun <t : mystiqueitempresenter> mystiqueadapter<t>.additems(items: list<t>, startposition: int = mystiqueitems.size)remove list itemsfun <t : mystiqueitempresenter> mystiqueadapter<t>.removeitems(items: list<>)convert object a mystified objectobject.tomystifieditem()sample apprefer this section this repo a sample app using library,mystiquesamplecontribution have made library easy possible use, i might missed some cool stuff. you something you like add, fork library, your changes please send pull request. would happy add contribution the library, it improves library. made mystique? the name the library might mystique, certainly author is a mystery.rahul chowdhuryblog | twitter | linkedin | facebook | mediumlicensecopyright 2017 rahul chowdhury licensed under apache license, version 2.0 ( \"license\"); may use file except compliance the license. may obtain copy the license http://www.apache.org/licenses/license-2.0 unless required applicable law agreed in writing, software distributed under license is distributed an \" is\" basis, without warranties conditions any kind, either express implied. the license the specific language governing permissions"
}