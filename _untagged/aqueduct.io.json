{
	"_id": "14537762",
	"site": "https://aqueduct.io",
	"title": " Aqueduct â€“ Dart on the Server",
	"author": "jcstk",
	"date": "2017-06-13T10:39:03.417Z",
	"tags": [],
	"content": "toggle navigation * stable | kernel * tutorial * documentation * contact 1. 2. 3. 4. 5. 6. build -architected, server-side applications.import 'package:aqueduct/aqueduct.dart';class apprequestsink extends requestsink { apprequestsink(applicationconfiguration config) : super(config); @override void setuprouter(router router) { router .route(\"/resource\") .listen((req) async => response.ok({\"key\": \"value\"})); router .route(\"/users/[:id]\") .pipe( authorizer.bearer(authserver)) .generate(() => usercontroller()); }}compose modular, maintainable code.import 'package:aqueduct/aqueduct.dart';class personcontroller extends httpcontroller { @httpget future<response> getall( {@httpquery(\"name\") string name}) async { var = await fetchpeople(byname: name); return response.ok(); } @httpget future<response> getone( @httppath(\"id\") int id) async { var person = await fetchperson(id); return response.ok(person); }}achieve productivity a cohesive framework.import 'package:aqueduct/aqueduct.dart';class personcontroller extends httpcontroller { @httpget future<response> getall() async { var query = query<person>(); var results = await query.fetch(); return response.ok(results); }}design elegant, type-informed queries.var query = query<employee>() ..where.name = wherebeginswith(\"sal\") ..where.salary = wheregreaterthan(50000);var employees = await query.fetch();query = query<employee>() ..where.name = whereequalto(\"sue gallagher\") ..join(object: (e) => e.manager) ..join(set: (e) => e.directreports);var employee = await query.fetchone();construct data model clearly code.class employee extends managedobject<_employee> implements _employee { bool wasrecentlyhired { var = new datetime.(); return hiredate.difference().indays < 30; }}class _employee { @managedprimarykey int index; @managedcolumnattributes(indexed: true) string name; datetime hiredate; int salary; @managedrelationship(#employees) company company;}ensure integrity minimal effort.test(\"/users/1 returns user\", () async { var response = await testclient .authenticatedrequest(\"/users/1\").(); expect(response, hasresponse(200, partial({ \"id\": 1, \"name\": isstring })));});previous next getting started 1. install dart 2. activate aqueduct pub global activate aqueduct 3. run time setup aqueduct setup 4. create new project aqueduct create my_project 5. open project directory intellij idea ce atom 6. run application documentation * guided tutorial * guides * api reference * * sign for newsletter * watch dart summit 2016 presentation * aqueduct news.dartlang.org"
}