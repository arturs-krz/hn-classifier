{
	"_id": "14445504",
	"site": "https://bauerd.github.io/wayfarer/",
	"title": " Versatile web crawling framework for Ruby",
	"author": "bauerd",
	"date": "2017-06-16T07:57:31.581Z",
	"tags": [],
	"content": "wayfarer 0.0.3 show navigation hide navigation * guides * tutorial * configuration * halting * locals * page objects * error handling * (redis) frontiers * peeking * selenium & capybara * callbacks * cli * job queues * logging * routing * routes * uri rules * host rules * path rules * query rules * protocol rules * filetypes rules * custom rules * recipes * starting multiple uris * authentication * taking screenshots * executing javascript * csv output * miscellaneous * code github * api documentation * testing * contributing * hide navigation versatile web crawling (j)rubywayfarer is swiss army knife web crawling.mri:% [sudo] gem install wayfarerjruby:% [sudo] gem install wayfarer-jruby you * need crawl page graphs breadth- * need extract whatever data * it multi-threaded * integrate rails seamlessly * to automate web browser * need execute arbitrary javascript * need uri normalization * need take screenshots * to a job queue make happen later * in-memory redis-backed frontiers, tries bloom filters you might wayfarer! it looks say want * automate google chrome * start off a random wikipedia article * follow links until find page the word foobar * a screenshot the page containing foobar * extract keywords every page encounter * 4 threads chrome processes do this amounts 16 lines code wayfarer:require \"wayfarer\"class findfoobaronwikipedia < wayfarer::job config.http_adapter = :selenium config.selenium_argv = [:chrome] config.connection_count = 4 let(:keywords) { [] } route.host \"en.wikipedia.org\", : :article def article page.body =~ /foobar/ driver.save_screenshot(\"/tmp/foobar.png\") return halt end keywords << page.keywords stage page.links endendfindfoobaronwikipedia.perform_now(\"https://en.wikipedia.org/wiki/special:random\")wayfarer integrates activejob supports favorite job queue of box. job is ready be enqueued:findfoobaronwikipedia.perform_later(\"https://en.wikipedia.org/wiki/special:random\")where go here * tutorial shows to collect open issues a github repository * read api documentationinstructions unclear not working? please edit page file bug"
}