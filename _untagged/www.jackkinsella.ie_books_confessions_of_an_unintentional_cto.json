{
	"_id": "14497422",
	"site": "https://www.jackkinsella.ie/books/confessions_of_an_unintentional_cto",
	"title": " Confessions of an Unintentional CTO â€“ Lessons in growing a web app",
	"author": "jackkinsella",
	"date": "2017-06-16T07:56:41.517Z",
	"tags": [],
	"content": "books articles * x * home * articles * books * * contactjack kinsellaconfessions an unintentional cto seven years brutally pragmatic lessons growing maintaining web appintroductionalthough html version the book is free forever, luxury paid version is available kindle. the summer preceding final of reading law oxford, interned an intellectual property law firm serviced clients the online poker industry. i sat my london chair listened on conference calls wunderkind ceos, thought myself, \"dash ! id rather the guy stirring trouble the cleaning afterward!\" spurred by thought, bought first-ever book. particular book was nothing special: a bog-standard tutorial creating static html/css website an aquarium, all things. you imagine, end result was saturated the monstrous shades blue green can imagine. my law internship ended, offered a job. after being inspired their clients misadventures, too wanted have shot becoming software entrepreneur, i turned down position. went to college completed final just the sake having degree. ( live europe all.) soon graduating saw timothy ferriss book, 4-hour workweek, a bookshop , without ever reading (waste time!), had eureka moment knew immediately this was exactly sort business wanted have.soon afterward released series tiny little static ( near-static) websites. kept simple i didnt any intention becoming professional programmer just wanted lifestyle the glory being software entrepreneur. luck have , i struck gold within few months: of primitive little sites place where sold study guides classmates wrotestarting making enough money support myself while still living my parents. seven years down road, evolved expanded version this same site (oxbridge notes) is still alive kicking. initial version oxbridge notes sold twelve different products as such, was relatively simple manage a static html css affair. s more, embryonic business was marked a near-complete lack programming automation: accepted payments via drop- paypal button, i personally email every digital download following each confirmed sale. all was for time. as weeks turned months, ambitions grew. wanted turn site something little more lucrative ( a little less tedious operate). seeing there wasnt enough cash spare hire programmer, realised d to the coding myself. thats without setting to one became cto my own software company. course, was a cto terms job responsibility; we were talking technical ability, couldnt been less deserving the title!having resolved grow business through code, bought stack books web programming. among were ruby language books, beginner/intermediate rails books, linux books, javascript books, even few computer science classics code complete. read texts cover cover, transforming contents a gargantuan volume flashcards along way ( idiosyncratic learning technique , incidentally, became such hit the blogosphere its been translated japanese).within year had progressed the point where was able transform static site a rickety rails app. despite headway, still felt hopelessly lost in dire need further guidance. since had, then, exhausted intermediate level books/videos/blog posts web development, proceeded the advanced resources, to bitterly disappointed. would seem my idea what \"advanced\" entailed diverged sharply what typical author had mind. was concerned issues ensuring data integrity, easing system maintenance, knowing not test, developing professional-grade accounting features taxation reporting, sharpening applications ability inform of errors, integrating seo/analytics/online marketing right the very foundations my software. contrast, advanced web development books encountered were focused issues value mostly engineers larger companies is, engineers were insulated their teams sheer size the sundry aspects tradeoffs implicit running software business. didnt a tour a languages arcana expositions little-known parts some frameworks apis. didnt cookbook ever-rarer technical problems. i wanted was generalised advice pertinent people real-live web applications had real-life users real-life problems. other words, wanted book the aspiring ctointentional unintentional he she may turn to .perhaps was too much me expect to exist. the grand scheme things, web applications are dazzlingly technology. surely must been part the very generation could start web business a -(wo)man band without capital speak . so instead learned through combination trial error conversations other indie software company ctos. since tend think working ideas textual form, wound producing book a side effect. for disclaimer: please bear mind the ensuing text cannot help be wildly personal. is a -size-fits- solution. much may already outdated of technical progress. would imagine this book be useful those you are close me terms time, business situation, overall philosophy. put more concretely, d this book appeal : * solopreneurs ( tiny teams entrepreneurs) ve coded web application now earn living it at least plan in near future. * web developers , due resource constraints, are content implement quick fixes work \" enough\". re probably this group you constantly feel guilty not doing everything \" the book\" (e.g. dont \"test everything\" demanded the ruby rails community). * programmers lack experience maintaining software use real over scale years. believe to a rather large niche having observed many newbie programmers (including myself i got started) have experience building greenfield projects themselves/small-scale clients never any traction their software. * hacker-y types ( opposed engineers). see book being more valuable garage mechanic-type programmers to super abstract theoretical physicist-styled programmers. wrapping now, s more mystery the title: where does \"confessions\" part into play? heres where: book is an academic exercise collating synthesising airy theories instead is bundle learnings precipitated sweat regret. throughout each chapter, interweave (often disgraceful) errors inspired thinking. is hope these real-world nuggets context render abstract parts easier understand the text a whole easier remember.table contents but of chapters this book are available read right here jackkinsella.ie. remaining pair (adminimisation css) are published externally. both chapters are still free read; only to advise in advance youll redirected another domain you click them.part : before start1.) 5 ways urls wrongalthough relied 100% google adwords traffic i started website, seo eventually succeeded as primary traffic source. overall, was ecstatic, adwords had been biggest monthly expense. when zoomed on details (via google analytics traffic reports), noticed hitch: few my urls had once boasted great seo power had suddenly stopped existing. first thought was the products question had been deleted my platform the users. as turned , these products still existedalbeit under slightly tweaked names. that had happened was content suppliers had modified product names live items, since system generated urls based these user-given names, urls change too if had already gathered enviable seo powers.2.) payments providers screw when was deliberating between payment solutions (merchant card accounts vs. payment gateways, etc.), encountered sales material paypals website suggested would pay 1.9% transaction fee each payment. sounded reasonable, on basis was swayed build platform atop service. unfortunately me, i started taking actual payments, paypals various hidden fees ( of are even itemised such) bumped per transaction cut to average 8.6%.3.) www vs. naked domain? considered, of following domain templates is better for hosting web business: \"www.mywebsite.com\" \"mywebsite.com\"? couldnt decide, i hedged bets programmed rails application respond both (.e. router responded directly each variant without using http redirects). eventual effect my indecision was split seo every page across parallel, near-identical entities that neither ever reach sufficient threshold rank the page google results (whereas their forces were combined would ranked ).4.) harmonise zones youre doing online advertising, s crucial know advertising platforms are generating conversions (, conversely, ones are needlessly burning through cash). google analytics has bunch features help this task, the setup is surprisingly fraught problems. remember instance where appeared the data recorded google analytics failed match in facebooks ad platform that my websites sales dashboard. ultimately, figured that issues were caused time zones being synced across various layers my stack ( i defined broadly here include plugin web services online advertising platforms). may it silly me belabour importance synchronising zones; my defence, estimate even a tiny application my own, are thirty places where zones have diverged. is lot \"t\"s crosspart b: architecture5.) tips programming accounting features web appsthroughout earlier stages my business, handled more esoteric financial transactions (such accepting echeques settling chargebacks) within paypal websites dashboard. motivation was spare myself hassle equipping website the capacity deal these entities. separately, eventually became necessary me generate financial reports accounting purposes. programmed software build at end every quarter, drawing directly the data my database. data was, course, slightly incorrect it didnt include trace the oddball transactions handled through paypals website. result was dodgy accounting records veritable nightmare.6.) replayability the aftermath certain bugs, serious cleanup operation is order. why? old data might corrupt, critically important web requests might need be reprocessed the patched code. nightmare situation here is having reconstruct old requests combing through logs gluing together various bits pieces. unfortunately is exactly i had do the case a bug striking author-application code. the , i desperately needed more authors, the labour was justified. i have avoided rot altogether an architecture emphasises property call replayability.7.) deliberately shopping a configuration strategyevery gem (library) included my burgeoning rails application was accompanied a readme prescribed own particular of supplying required configuration details (e.g. api keys/secrets mere preferences to many whatsits should appear each page). some libraries preferred configuration solution was yaml file. times was database entries. other times again was use env variables. ultimately ended succumbing these various vendors demands had three different configuration strategies running parallel my application. yes, was stupid, , predictably, became messy find edit specific configuration options.8.) adminimisation: tips building self-service admin areas [external] frontend most web applications be subdivided user-facing admin-. in case, majority functionality was admin-. i needed quite lot code managing suppliers, inventory, orders, taxonomies. seeing this admin area was manned my website administrators, was labour cost associated how my administrative code got job done. the years learned quite few lessons: (1) overly opaque functionality scare administrators cause to shy away certain actions ( always precede with confirmatory questions); (2) user-generated taxonomies ( well automatically generated ones) eventually lead the proliferation ever-thinner categories become ux nightmare; (3) certain administrator workflows are \"non-resumable\", that fail preserve information necessary other team members pick where non-present administrator left off.9.) silent failures must given voicemodern web applications rely a workforce background scripts do things clean large temporary files the hard drive, generate backups, send drip-feed email marketing campaigns. is well good what happens one these scripts simply stops working? since may no positive \"failure\" speak , there may correspondingly no exception get reported. can lead situations happened mewhere sub-system goes offline months without anyone suspecting thing.10.) happens the user clicks button twice? would wager unanticipated reclicks are most commonly occurring bug web applications every stripe. during proto-version oxbridge notes, suffered bug impatient users click \"place order\" twice a row, leading duplicate orders residing my system.11.) minimal viable backups ( web applications) awful, awful morning vps provider i wont name mass-emailed customers inform lucky souls a \"disgruntled former employee\" theirs had deleted vast tranches their serversincluding own. as that wasnt bad enough, bitter man went extra mile also deleted the server backups ( this vps provider had sold a bonus, peace--mind service). that, dear reader, is why redundancy matters the design backup solutions.part c: maintenance12.) taking data integrity srslyinternet platforms marketplaces are places transience: sometimes users , and sometimes go. today wish sell product your marketplace, tomorrow wish remove . in line these natural dynamics, empowered users delete own database records they saw fit. time though, discovered was terribly shortsighted decision: various slabs functionality (e.g. end--year financial reports, refunds) depend these records sticking around much longer i had anticipated. a result, data lost integrity.13.) why stay behind version rat race was once believer staying the bleeding edge software versions. moral is promoted heavily powerful software vendors ( library maintainers), since reduces maintenance load makes lives easier. of is true. throwing yourself the front line is without costs: many times, found a critical dependency stop working i upgraded rails/macos etc., id forced take hours ( even days) of schedule debug patch. sure, was in name \"progress\", as one-man team customers waiting, didnt the luxury be conscripted open source development. ( give an idea how fervently open source developers feel this, got banned a certain developer community expressing exact opinion.)14.) dworkinian integrity (sub-)symbol minimisation: prescriptions consistent software have poor memory, i feel cognitive load this limitation in projects containing a few thousand lines code. upon observation, noticed i felt worst there was low level \"intuitiveness\" ( consistency) the code. give one personal example what mean low intuitiveness, draw attention the various ways denoted concept permission my codebase: sometimes method names began can_, times ones starting authorised_to_, other times again may_. had used same sub-symbol every (e.g. can_), would relieved demands my memory. one instance isnt much, imagine codebase flush this sort grand design.15.) project-level attribute normalisationperhaps half dozen times far, encountered whitespace formatting issues my data. example, email field my users table is supposed be unique, due my initial lack a whitespace-stripping function, database consider \"jack@example.com\" \"jack@example.com \" separate entities it allow to coexist. led a crappy user experience those affected (e.g. users inadvertently added space the end their email registering found were unable log when typed normally thereafter). obviously was trivial me fix particular bug, i realised analogous problems occur anywhere accept data the user. then calls a more general far-reaching solution16.) css refactoring: append- to modular css [external] based early version my web application off open source ecommerce library selling t-shirts. part this package deal, inherited bunch css style rules. a while, could keep sites visuals looking spiffy making few surgical changes here there. eventually complexity caught with and became terrified my growing css edifice i even appended css rules (using ever-higher selector specificities). eventually became gridlocked was forced rewrite css scratchalbeit time a foundation solid principles.16.) surprising extent non-code dependencies software projects good grounds, programmers obsess minimising software dependenciesmodules, third-party libraries, etc. unfortunately, particular type care concern doesn't extend far enough... remember modifying body url a product page as correspond a more sophisticated seo strategy a certain geographic market. the aftermath the change, discovered the urls my training documentation admin staff were of sync, third-party web services (such google analytics) were directing traffic an abyss, visual design was broken due ever--slightly longer subtitle text, that may been infringing certain local laws ( cookies, presentation taxation information, etc.) and much too much more conspire form weary world non-code dependencies!part d: testing17.) dealing test leakagemorale is uniquely concern militaries; effects be felt in more mundane matters. its absence, self-sabotaging behaviour ensues. case point: lost faith my testing suite two separate points the lifetime my web application. tests sporadically fail no apparent reason, this unpredictability wore down. knew code worked why didnt tests pass? downtrodden response was completely up running test suites to stop writing tests. ( would later forced play long game catch .) ultimately turned that cause my frustrations was test leakage, prevention which now consider absolutely crucial programmer morale.18.) 4 ideas improving testability web apps the best part a , i was unable automatically test most crucial aspect my web application. component question was awkward flash-based multi-file upload system the intake new digital products business sells. uploader was flash ( was before javascript do multi-file stuff), i couldnt spare time learn dying language. way compromise, told myself would manually test component the browser whenever changed related code. it turned though, was far too optimistic my ability infer a piece code was indeed \"related\". a result, introduced breaking changes more occasions id to admitÂ­ because didnt to run manual tests catch issues, seeped merrily through production.19.) guide testing web applications developers care overall profitability life are always tradeoffs: anyone tells otherwise is either politician a rails developer. i was initiated the web development world was told \"test everything\". because wasnt bankrolled unicorn ventures, wasnt remotely realistic me. unable meet supposed non-negotiable community standards, felt constant pang guilt. i neednt suffered i should instead learned discriminate between s worth testing what isnt.part e: debugging20.) excelling exception notification i were religious man, d exception reports are godsend. though cannot deny overall benefits, must admit i failed configure properly two specific ways the past few years: firstly, reporting was always comprehensive, the sense the errors exceptions occurring within background jobs ( within helper servers) did get reported. secondly, reporting was sometimes far too vocal. were days i open inbox find flooded so many inconsequential reports i lose patience reading of individual reports the requisite care attention. became problem there happened be genuinely important urgent report submerged the pile unimportant ones.21.) 7 keys systematic debugging my naive early days a programmer, would respond a bug report diving straight the code, fixing , deploying fix, then getting with day planned. i failed realise is bugs are pack animals. , for example, reason the bug was i had misunderstood aspect the rails api, its possible likely similar bugs exist anywhere else interact that same slab the rails api. had been more systematic, would inspected of locales analogous problems before signing off the debugging session.22.) bug slip: bug-hunting ritual is extraordinary cognitive cost context switching we program computers. feel most acutely i am debugging, to more precise, i am resuming debugging session. owing the prodigious amount context care needed, before started ritual, typically lost hour finding feet again resuming sufficiently thorny bug hunt.23.) log_tokensonce upon time experienced sporadic credit card payment failures couldnt gather basic information what had gone wrong. see, whenever payment failed, paypal return error code. parsed error code of response logged . but wasnt sufficient me debug since log entry consisted solely a string numbers (e.g. \"50010\"), making near impossible me connect log entry the particular failed payment. i should done instead was included contextual information identifying each these log entries (e.g. \"paypal_error_code customer:3401 is 50010\").part f: documentation24.) key good documentation: broaden definition software have been consistently shocked the frequency which configuration tasks perceived be \"once-off\"s ended demanding repetition mere months down line. examples abound: configuring development machines, replicating servers staging, renewing ssl certsÂ¸ configuring dns a domain shamanic mystery, even integrating comprehensive skeleton google analytics conversion tracking. a result this unexpected repetition, found myself devoting unhealthily large lumps time what only described reinventing wheel. this waste confusion have been avoided had had sufficiently broad definition software documented accordingly.25.) application-level documentation beats code-level documentation still remember excited felt day hired first collaborating programmer. imagined would slot right , start coding, smoothly propel to singularity multiplied productivity. actually happened was decidedly underwhelming. programmer (through fault his own!) stored service objects the \"wrong\" folders ( least according organisational tastes). didnt git way did. kept asking distracting questions, what ip address xyz server resides . he suggested replacing idiosyncratic dependencies \"standard\" solutions, though had darned reasons going against grain most cases. ultimately of friction stemmed a single source: not having app-level documentation.although html version the book is free forever, luxury paid version is available kindle.key content * books * articles * contactfollow * @jackkinsella * facebook * rsslegal * terms * impressum * privacy policyÂ© jack kinsellastay touch?"
}