{
	"_id": "14518904",
	"site": "https://www.npmjs.com/package/tifuhash",
	"title": " Tifuhash - Tiny Fast Universal Hash, using 64-bit continued fractions",
	"author": "19eightyfour",
	"date": "2017-06-14T12:56:08.860Z",
	"tags": [],
	"content": "search * sign or log * log node package manager toggle navigation * npm enterprise * features * pricing * documentation * support tifuhash tifuhashtiny fast universal hash - 's aim anywayoverviewtifuhash benefits: * is novel construction based continued fractions egyptian fractions * passes two demanding bias tests existence: practrand rngs smhasher hash functionstesting resultstifuhash passes key tests bias: pracrand rngs smhasher non-cryptogrpahic hash functions test results smhasher are tifuhash.smhasher.results.txt the results practrand are tifuhash.practrand.results.txtinstallingnpm install tifuhash# usingconst tifu = require('tifuhash'); const message = ' medium is  message.';const number = 333333333;const float = math.pi; tifu.hash( message ); // ok tifu.hash( number ); // ok tifu.hash( float ); // ok tifu.hash( ); // empty message - ok construction * novel: based continued fractions egyptian fractions * small: uses 64 bit floating point numbers calculation * versatile: hash arbitrary length string messages, integers floats * fast: apart using 64 bit fpa, has a few operations per message byte ( can probably efficiently implemented hardware) * amazing properties: somehow, tiny, maths-operation- hash passess practrand ( wtf! ), iterated its own output when entire resulting hash stream is concatenated together make binary output. * novel: searching google \"continued fraction hash algorithm\" \"egyptian fraction hash algorithm\" produces other efforts * novel: using division, using floating point division, discarding high-order-bits ( we here ) is used nor studied much, at , in hash construction * universality: can parameterized : * setting initial state the 64 bit floats * including additional constant summand each step ( perhaps different for each 64 bit state ) * including different additional summands each step ( maybe ouput a lfsr ) * it has properties ( independence bits demonstrated passing practrand ), can parameterized, hypothesize it is universal, possibly strongly universal. * tiny: yep, 's memorizable only few lines code## tifuhash limitations opportunities improvement * current implementations, while still fast, are very slow compared existing top hash functions, tho code tifuhash is simple * can probably improved optimized implementations, floating point sets hard limit how fast tifuhash be * uses floating point extensively, hashes differ depending implementation architecture * may able be improved using techniques developed allow floating point dependent calculations be reproducible across languages architectures # parameterization universalityuniversal hash algorithms define family hash algorithms. tifuhash is designed be universal, while api parameterizing algorithm is available yet, will . i we probably the \"seed\" construction, used smhasher, setup intial state, one to explore parameterization. accepting seeds the initial state is already implemented the c++ reference code. no built method generating real entropy order form parameters universal hash parameterization, that probably , or code developed dosycrypt# links * tifuhash npm this within firewallcombine open-source packages your private code publish a private registry behind firewall. npm enterprise developers? learn more * dosy published 2017-06-11t11:15:58.042z * 1.0.5is latest 6 releases * github.com/dosaygo-coder-0/tifuhash * mit ® collaborators list * stats * 2downloads the last * 214downloads the last week * 214downloads the last month * an issue? file . on github * github try out * test tifuhash your browser.keywords tifuhash, hash, universal, smhasher, string, integer, avalanche dependencies none need help * documentation * support / contact * registry status * website issues * cli issues * security npm * npm, inc * jobs * npm weekly * blog * twitter * githublegal stuff * terms use * code conduct * package name disputes * privacy policy * reporting abuse * policiesnpm loves you"
}