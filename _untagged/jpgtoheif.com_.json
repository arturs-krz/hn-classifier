{
	"_id": "14509714",
	"site": "http://jpgtoheif.com/",
	"title": " Converting a JPEG to the new HEIF format",
	"author": "bengotow",
	"date": "2017-06-16T07:56:21.314Z",
	"tags": [],
	"content": "converting jpeg the heif formatheifis new container format developed the mpeg group. heif files contain images image sequences (e.g: iphone \"live\" photos, \"burst\" photos, multi-exposure shots), encode data using same hevc (high efficiency video coding) standard used h265 video.why heif? * hevc produces objective picture quality equivalent jpeg 2.39x smaller file sizes. * heif supports metadata, non-destructive editing, thumbnails, image sequences, more. * apple has announced the iphone save images heif files default, least internally.why (maybe) use heif? * heif hevc are extensively covered patents, means could legal implications implementing heif support, particularly paid software a hardware product.step stepnote: tutorial assumes have macos, homebrew, git, cmake, about 5 minutes spare. want heif image? download sample.step 1: install x265brew install x265step 2: download ffmpeg build with --enable-x265 extensionbrew uninstall ffmpegbrew install ffmpeg ---x265step 3: download build heif sample implementationgit clone https://github.com/nokiatech/heif.gitcd heifcmake . installstep 4: ffmpeg convert jpeg a hvec bytestreamimportant: must an image even width height values (eg: 2042 2041) the moment. reference implementation not display images odd sizes. * `crf` is quality level. lower is higher quality. * `pix_fmt` must yuv420p - sample heif implementation doesn't seem like pixel formats, though format officially supports .ffmpeg - ./your-image.jpg -crf 12 -preset slower -pix_fmt yuv420p \\ -f hevc bitstream.265ffmpeg - ./your-image.jpg -vf scale=320:240 -crf 28 -preset slower \\ -pix_fmt yuv420p -f hevc bitstream.thumb.265step 5: create config.json file file is required the reference implementation heif build heif file. 's necessary heif supports many types images + thumbnail combinations, sequences, images transforms applied, etc. don't much the available options. is documentation i derived options reading source code parses json.{\"general\": {\"output\": {\"file_path\": \"output.heic\"},\"brands\": {\"major\": \"mif1\",\"\": [\"mif1\", \"heic\", \"hevc\"]}},\"content\": [{\"master\": {\"file_path\": \"./path-/bitstream.265\",\"hdlr_type\": \"pict\",\"code_type\": \"hvc1\",\"encp_type\": \"meta\"},\"thumbs\": [{\"file_path\": \"./path-/bitstream.thumb.265\",\"hdlr_type\": \"pict\",\"code_type\": \"hvc1\",\"encp_type\": \"meta\",\"sync_rate\": 1}]}]}step 6: build heif file!./bins/writerapp ./path//config.json's it takes! pretty cool huh? except... do do it ? right , it's possible view heif files using javascript viewer built to reference implementation github. it's totally bananas 1.4mb javascript compiled c++ emscripten. make testing heif easier, 've adapted reference implementation run file blobs.view heif image below selecting in file picker.happy hacking!- ben gotow (github, twitter)"
}