{
	"_id": "14499974",
	"site": "http://shivankaul.com/blog/cstheory/compilers/2017/03/01/nfa-dfa-and-regexes.html",
	"title": " Brief intro to NFA, DFA and how they relate to regexes",
	"author": "skaul",
	"date": "2017-06-16T07:56:21.904Z",
	"tags": [],
	"content": "pistachio musings? brief intro nfa, dfa regexesmar 1, 2017finite state automatafinite state automata are abstract models computation. other words, are sytems take input ( form symbols) spit a result (, perform computation). do , they read symbols move internally between states. can described 3 things: * starting state * list states * transitions between statestransitions between states also thought as function takes arguments current state current symbol returns the next state should .function transition(current_state, symbol) { ... return next_state;}easy. are types automata: fsa / \\ / \\ dfa nfalets at !deterministic finite automatadfa stands deterministic finite automaton. job is read a string symbols (input) move (transition) between states based the input ultimately accept reject string symbols. transitions are deterministic: a given symbol string a given dfa, dfa go through same states every the same symbol string is fed it. other words, path between states is guaranteed be unique a given symbol string. way is enforced is specifying for every state, a given input symbol, s one transition. this is allowed:figure 1 : dfa example. this is :figure 2 : nfa example. ashutosh y0078 - own , cc -sa 3.0, wikimedia link from starting state p can move both q back p receiving 1 an input, cannot (by definition) deterministic automata. , in fact, is nfa.non-deterministic finite automatonnfa is non-deterministic finite automaton. an nfa: * a state, one input, automaton transition more one states * automaton transition using empty inputlets at another nfa.figure 3 : another nfa. example taken : http://er.yuvayana.org/nfas are smaller dfa, terms number states. remember rule a string symbols follow unique path between states a dfa? does apply an nfa. example, the nfa figure 3 is state q2, if reads symbol 1, could to either q0 q1. s deterministic ( the name implies). however, nfa always converted a dfa - are algorithms it - will have more states. should intuitive - i am restricted only transition per symbol per state, to encode same behaviour an nfa ( multiple transitions allowed per symbol per state), will need more states. lets what happens we convert figure 3 nfa dfa ( proof is left an exercise the reader. listing steps the algorithm used does make a brief introduction, is application the algorithm - very interesting. important thing note is a) is possible, b) nfa is smaller its equivalent dfa.)figure 4 : figure 3 nfa converted dfa. example taken : http://er.yuvayana.org/dfas nfas ( more generally, fsas) recognize regular languages. fact, exactly recognize regular languages - every regular language has finite state automaton accepts . which brings to regular expressions.regular expressionsregular expressions are way expressing regular languages. fact, basic operation a regex engine is convert regex pattern either nfa dfa internally. , faced a string, n/dfa reads symbols by and transitions between states finally spits if string symbols matches pattern/language not., the interesting part. remember: purpose an fsa is check a string symbols be accepted. given regular language is described an nfa a dfa ( we always convert nfa -> dfa), dfa take ( principle) less than nfa check a string symbols is accepted the language. is at every state a dfa, a given input symbol, s clear next step take. however, an nfa, depth- search is required check every possible combination. we trade space time we a dfa instead an nfa!interesting stack overflow question how check a regex engine uses nfa dfa internally.please enable javascript view comments powered disqus. * shivankaulsahib@gmail.com * shivankaul thoughts topics the power set {software, engineering, privacy, writing}."
}