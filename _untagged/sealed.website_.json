{
	"_id": "14538136",
	"site": "https://sealed.website/",
	"title": " Verifying integrity of a website using the Blockchain and JavaScript",
	"author": "jjperezaguinaga",
	"date": "2017-06-16T07:56:04.360Z",
	"tags": [],
	"content": "sealed-website sealed.website / blockchain based website signed verification view github sealed website sealed website is site has been verified a unique identifier works a seal. seal is bitcoin wallet public address tied a webpage, can verified whois, then used retrieved latest checksum the website. * whois query: https://.is/whois/sealed.website * sealed.website seal: 18rrxeevy9fnmbzhjjzpzmubxwyybu7adx it works?generate new bitcoin wallet. any wallet generator shows the private key wallet import format (wif). simple use is warp wallet keybase.ionote: sure use own passphrase.additionallty, can generate with javascript bitcoinjs-lib library:const bitcoin = require(\"bitcoinjs-lib\")// generate random keypairconst keypair = bitcoin.ecpair.makerandom()const address = keypair.getaddress()const wif = keypair.towif()keep wif a secure place, will need to sign transactions later.proceed register domain w/sealregister domain the bitcoin public key address the field address2. careful which domain provider use, some (godaddy) truncate field 30 characters, 99% bitcoin wallets are 34 (33 without 1).sealed.website was registered namecheap.com.note: although fields be used register seal, address2 is almost never used probably most suitable.add money your wallet data want validate is going be stored transactions, we need have money the wallet order perform transactions pay bitcoin miners fee. any provider add money your newly generated bitcoin wallet.store website checksum a transactionretrieve sha-512 checksum your website. can easily this the command line openssl:$ curl https://jjperezaguinaga.com | openssl dgst -sha512 % total % received % xferd average speed time current dload upload total spent left speed100 4786 0 4786 0 0 9416 0 --:--:-- --:--:-- --:--:-- 9439d257206f08808bd0bc2a2e6320e47de3d5eb26f673e55c6a6bdc875de121c8e1257f5d518c3ce89f6bf56dd7e98fc41c261551a977d41b83d40327147f586826note: will the domain https://jjperezaguinaga.com this example. the checksum hexadecimal data, proceed perform transaction including data. are many ways write data the blockchain, of using javascript package blockchain-anchor tierionand blockchain nodes blockcypher.var blockchainanchor = require('blockchain-anchor');var privatekeywif = '<your_wif>';var anchoroptions = { blockchainservicename: 'blockcypher', // optional, defaults 'any' blockcyphertoken: '<your_blockcyphertoken>', // required using 'blockcypher' service feesatoshi: 10000 // optional, defaults 10000};var anchor = blockchainanchor(privatekeywif, anchoroptions);var hexdata = \"d257206f08808bd0bc2a2e6320e47de3d5eb26f673e55c6a6bdc875de121c8e1257f5d518c3ce89f6bf56dd7e98fc41c261551a977d41b83d40327147f586826\"anchor.embed(hexdata, function (err, transactionid, rawtransaction) { (err) { console.log('err', err) } else { console.log(' transaction id = ' + transactionid); console.log('raw tx = ' + rawtransaction); }}); success, can explore transaction using blockchain explorer. this case, can verify transaction here can verify contents a website based the last transaction using command line jq.$ curl https://api.blockcypher.com/v1/btc/main/addrs/18rrxeevy9fnmbzhjjzpzmubxwyybu7adx/full\\?limit\\=50 | jq .txs[0].outputs[0].data_hex % total % received % xferd average speed time current dload upload total spent left speed100 4520 0 4520 0 0 3872 0 --:--:-- 0:00:01 --:--:-- 3876\"d257206f08808bd0bc2a2e6320e47de3d5eb26f673e55c6a6bdc875de121c8e1257f5d518c3ce89f6bf56dd7e98fc41c261551a977d41b83d40327147f586826\" data should match equivalent base64 value the webpage. can check through javascript the following code:fetch('https://jjperezaguinaga.com') .((response) => response.text()) .((text) => crypto.subtle.digest('sha-512', textencoder().encode(text)) .((digestbuffer) => console.log(btoa(array.prototype.map.call( ( uint8array(digestbuffer)), ch => string.fromcharcode(ch)).join('')))))note: we verify in javascript, can create browser extensions perform check everytime browse website.anexus : identifying incongruencies the command line sha-512 your website doesnt match javascript sha-512 version it, sure website is actually returning same content. the example, stored sha-512 hex data was following:d257206f08808bd0bc2a2e6320e47de3d5eb26f673e55c6a6bdc875de121c8e1257f5d518c3ce89f6bf56dd7e98fc41c261551a977d41b83d40327147f586826 translates the following value base640lcgbwiai9c8ki5jior949xrjvzz5vxqa9yhxeehyoelf11rjdzon2v1bdfpj8qcjhvrqxfug4puaycuf1hojg==however, running javascript equivalent function, got following sha-512 the website:ekkcibdosn0gqnunax6cq4zmyzlv6f5gdj5mvblv7qwdpaibhwbqvu9sryhibd35d2ohywqauytqukgiaztuyq== is some cdn providers cloudflare have email address obfuscation. each request webpage return different value, rendering entire validation process useless. verify , you compare downloads the same website compare against with diff colordiff. ideally, store in hexadecimal value hexdump you compare and find issue.$ curl https://jjperezaguinaga.com > curl.web$ vim fetch.web # value stored manually javascript fetch query$ hexdump curl.web > curl.hex$ hexdump fetch.web > fetch.hex$ diff curl.hex fetch.hex | colordiff244,250c244,250< 0000f30 72 6f 74 65 63 74 69 6f 6e 23 64 31 62 63 62 34< 0000f40 39 31 62 62 62 62 61 31 62 34 61 33 62 34 61 62< 0000f50 62 30 62 36 61 34 62 38 62 66 62 30 62 36 62 30< 0000f60 66 66 62 32 62 65 62 63 65 65 61 32 61 34 62 33< 0000f70 62 62 62 34 62 32 61 35 65 63 39 32 62 65 62 66< 0000f80 61 35 62 30 62 32 61 35 66 34 65 33 65 31 38 33< 0000f90 62 34 61 30 61 34 62 34 61 32 61 35 22 3e 45 6d---> 0000f30 72 6f 74 65 63 74 69 6f 6e 23 66 64 39 30 39 38> 0000f40 62 64 39 37 39 37 38 64 39 38 38 66 39 38 38 37> 0000f50 39 63 39 61 38 38 39 34 39 33 39 63 39 61 39 63> 0000f60 64 33 39 65 39 32 39 30 63 32 38 65 38 38 39 66> 0000f70 39 37 39 38 39 65 38 39 63 30 62 65 39 32 39 33> 0000f80 38 39 39 63 39 65 38 39 64 38 63 66 63 64 61 66> 0000f90 39 38 38 63 38 38 39 38 38 65 38 39 22 3e 45 6danexus b: inspiration concept seal comes the symbolus used the romans seal letters; probably used before , the idea came inspecting orbis pictus latinususing todays cryptography techniques blockchain technologies, can create unique seals use to ensure websites are ours, that content hasnt been tampered .sealed-website is maintained jjperezaguinaga page was generated github pages."
}