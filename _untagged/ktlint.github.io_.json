{
	"_id": "14429067",
	"site": "https://ktlint.github.io/",
	"title": " An anti-bikeshedding Kotlin linter with built-in formatter",
	"author": "shyiko",
	"date": "2017-06-16T07:57:32.457Z",
	"tags": [],
	"content": "ktlint getting started rules faq github getting started rules faq github ktlint anti-bikeshedding kotlin linter built- formatter. getting started command line maven gradle installationcurl -sslo https://github.com/shyiko/ktlint/releases/download/0.8.1/ktlint && chmod +x ktlint# can download ktlint manually https://github.com/shyiko/ktlint/releases# another option is \"brew install shyiko/ktlint/ktlint\"# verify pgp signature (optional recommended)curl -ss https://keybase.io/shyiko/pgp_keys.asc | gpg --importcurl -sslo https://github.com/shyiko/ktlint/releases/download/0.8.1/ktlint.ascgpg --verify ktlint.ascusage# check style all kotlin files inside current dir (recursively)# (hidden folders be skipped)$ ktlint src/main/kotlin/main.kt:10:10: unused import # check certain locations (prepend ! negate pattern) $ ktlint \"src/**/*.kt\" \"!src/**/*test.kt\"# auto-correct style violations# ( some errors cannot fixed automatically will printed stderr) $ ktlint -f \"src/**/*.kt\"integrationadd following snippet pom.xml (inside <build><plugins>...</plugins></build>) <plugin> <groupid>org.apache.maven.plugins</groupid> <artifactid>maven-antrun-plugin</artifactid> <version>1.7</version> <executions> <execution> <id>ktlint</id> <phase>verify</phase> <configuration> <target name=\"ktlint\"> <java taskname=\"ktlint\" dir=\"${basedir}\" fork=\"true\" failonerror=\"true\" classname=\"com.github.shyiko.ktlint.main\" classpathref=\"maven.plugin.classpath\"> <arg value=\"src/**/*.kt\"/> </java> </target> </configuration> <goals><goal>run</goal></goals> </execution> <execution> <id>ktlint-format</id> <configuration> <target name=\"ktlint\"> <java taskname=\"ktlint\" dir=\"${basedir}\" fork=\"true\" failonerror=\"true\" classname=\"com.github.shyiko.ktlint.main\" classpathref=\"maven.plugin.classpath\"> <arg value=\"-f\"/> <arg value=\"src/**/*.kt\"/> </java> </target> </configuration> <goals><goal>run</goal></goals> </execution> </executions> <dependencies> <dependency> <groupid>com.github.shyiko</groupid> <artifactid>ktlint</artifactid> <version>0.8.1</version> </dependency> <!-- additional 3rd party ruleset(s) be specified here --> </dependencies></plugin>usage# check code style ('s bound \"mvn verify\")$ mvn antrun:run@ktlint src/main/kotlin/main.kt:10:10: unused import # fix code style deviations (runs built- formatter)$ mvn antrun:run@ktlint-formatintegrationadd following snippet build.gradle apply plugin: 'java'repositories { mavencentral()}configurations { ktlint}dependencies { ktlint 'com.github.shyiko:ktlint:0.8.1' // additional 3rd party ruleset(s) be specified here // add to classpath (ktlint 'groupid:artifactid:version') // ktlint pick up}task ktlint(type: javaexec) { main = \"com.github.shyiko.ktlint.main\" classpath = configurations.ktlint args \"src/**/*.kt\"}check.dependson ktlinttask ktlintformat(type: javaexec) { main = \"com.github.shyiko.ktlint.main\" classpath = configurations.ktlint args \"-f\", \"src/**/*.kt\"}usage# check code style ('s bound \"gradle check\")$ gradle ktlint src/main/kotlin/main.kt:10:10: unused import # fix code style deviations (runs built- formatter)$ gradle ktlintformatalternatives are few community-driven plugins you might find interesting: * jlleitschuh/ktlint-gradle very ktlint gradle plugin. * jeremymailen/kotlinter-gradle gradle plugin featuring incremental build support, file reports, .kt & .kts source support, etc. * diffplug/spotless spotless is really plugin, 's standalone project happens have built- ktlint support. addition linting/formatting kotlin code allows to keep license headers, markdown documentation, etc. check. rules 4 spaces indentation*.. // recommended// https://github.com/shyiko/ktlint/issues/26#issuecomment-275810153 data class c( val : any, val b: = 0, val c: ) {}// even though are 13 spaces the left \"val b\" \"val c\", // is still okdata class c(val : any, val b: = 0, val c: ) {}don't. fun f(val : any, val b: = 0, val c: ) {}* starting 0.8.0 value indent_size specified under [*{kt,kts}] section .editorconfig takes precedence ( any). official recommendation is use 4 spaces, though. ( #43 details) semicolons.. val v = \"\"println(v)// semicolons used separate multiple statements the same line are ok// try avoid thoughfn({ v -> println(v); v * 10 })don't. val v = \"\";println(v); wildcard / unused imports.. import io.vertx.core.vertximport com.google.guiceimport com.google.injectordon't. import io.vertx.core.*import com.google.inject.*import pkg.unusedclass consecutive blank lines.. class {}class b {}don't. // in a python you are in pep 8 realmclass {}class b {} trailing whitespaces.. class {}class b {}don't. class {}class b {}* you don't editorconfig 's good to start. unit returns.. fun f() {}don't. fun f(): unit {}consistent order modifiers.. internal abstract class { protected open val v = \"\" internal open suspend fun f(v: ): any = \"\" public lateinit var lv: string abstract tailrec fun findfixpoint(x: double = 1.0): double}class b : () { public override val v = \"\" suspend override fun f(v: ): any = \"\" tailrec override fun findfixpoint(x: double): double = (x == math.cos(x)) x else findfixpoint(math.cos(x))}don't. abstract internal class { open protected val v = \"\" open suspend internal fun f(v: ): any = \"\" lateinit public var lv: string tailrec abstract fun findfixpoint(x: double = 1.0): double}class b : () { override public val v = \"\" override suspend fun f(v: ): any = \"\" override tailrec fun findfixpoint(x: double): double = (x == math.cos(x)) x else findfixpoint(math.cos(x))}consistent spacing.. val short = \"\"val long = \"\"val v = - b * cclass : b, c {} (true) {}@file:jvmname(\"main\")class : bcall(object : c() {})fun fn(@field:f : any, b: , c: ): anyval v: string = str() (ok) { /* .. */ }fn({ v -> f(v) * g(v) })emptylist().find { true }!!.hashcode()find { .default ?: false }?.phonedon't. // multiple spaces \"val long\" vertical alignmentval short = \"\"val long = \"\"// spacing around operatorsval v=-b*c// comma \",\"class : b,c {}// spacing keyword (\"\" in case)(true) {}// incorrect spacing around \":\"\"@file: jvmname(\"main\")class :bcall(object: c() {})fun fn(@field: f :any, b:, c:):anyval v:string = str()// missing spacing around \"{\" before \"}\" (true){/* .. */}// missing spacing \"{\" and before \"}\"fn({v -> f(v) * g(v)}!!)// unnecessary space \"}\"emptylist().find { true } !!.hashcode()find { .default ?: false } ?.phonefaq fiber_manual_recordwhy should use ktlint?simplicity.spending on configuration (& maintenance down road) hundred-line long style config file(s) is counter-productive. instead wasting energy something has business value - focus what really matters ( debating whether use tabs spaces). using ktlint put importance code clarity community conventions personal preferences. makes things easier people reading code well frees from having document & explain style potential contributor(s) to follow.ktlint is single binary both linter & formatter included. you need is drop in ( need get overwhelmed while choosing among dozens code style options). fiber_manual_recordcan have own rules top ktlint?absolutely, \" configuration\" doesn't mean \" extensibility\". can add own ruleset(s) discover potential bugs, check anti-patterns, etc. creating ruleset github. once packaged a jar can load with # enable additional 3rd party ruleset pointing ktlint its location the file system$ ktlint -r /path//custom/rulseset.jar \"src/test/**/*.kt\"# can use :: triple which case artifact is# downloaded maven central, jcenter jitpack (depending where 's located # whether not 's already present local maven cache)$ ktlint -r com.github.username:rulseset:master-snapshotfiber_manual_recordhow i suppress error? is meant primarily an escape latch the rare cases ktlint is able produce correct result (please report such instances using github issues). disable specific rule 'll need turn the verbose mode (ktlint --verbose ...). the end each line 'll an error code. it an argument ktlint-disable directive (shown below). import package.* // ktlint-disable -wildcard-imports/* ktlint-disable -wildcard-imports */import package..*import package.b.*/* ktlint-enable -wildcard-imports */ disable checks: import package.* // ktlint-disablefavorite"
}