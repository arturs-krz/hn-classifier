{
	"_id": "14538351",
	"site": "https://keygen.sh",
	"title": " Keygen â€“ A dead-simple software licensing API built for developers",
	"author": "ezekg",
	"date": "2017-06-16T07:56:05.003Z",
	"tags": [],
	"content": "keygenmenu * pricing * documentation * log * sign a dead-simple software licensing api built developers licensing desktop apps, -premise software, other digital products. started freequit wasting fighting other licensing solutions * checksell independently outside the app store pocket extra 30% * checksupport wider range platforms using same licensing system * checkship faster stop wasting writing custom licensing servers last not least * closeno gimmicky third-party installers you to package your product ( that have control !)# create new license a user the ecorp accountcurl https://api.keygen.sh/v1/accounts/ecorp/licenses -x post \\ -h 'authorization: bearer \"a9f93c31b41642248db99fc04f4e8482.ebbe297ffbed4ccc837733e335bd8181.9a3b6c8eec01db86015e2236ddc71f60edfa65ad4358b583bde95d4d68275624ec271ec06992d25739e425e862bad41729acdbfda5098c4544db1451277009a3\"' \\ -h 'content-type: application/vnd.api+json' \\ -h 'accept: application/vnd.api+json' \\ -d '{ \"data\": { \"type\": \"licenses\", \"relationships\": { \"policy\": { \"data: { \"type\": \"policies\", \"id\": \"fbc29532-f2ec-4e34-8af0-99debed700cb\" } }, \"user\": { \"data: { \"type\": \"users\", \"id\": \"592032dd-25f3-4d1d-ad72-3f5eba2503c0\" } } } } }'securitycontrolcontrol types licenses product offers using powerful license policies feature licenses timed trials, got covered.peoplegrowreduce licensing-related support costs allowing users manage own licenses machines that can focus your product.verified_usermonitorquit guessing many machines users using machine tracking endpoints can exactly where product is being used. what's working what isn't. keygen's dashboard, can always on top what's happening your products. * trending_upview recent trends new users, licenses, much more * listwatch up--date activity feed what's happening * timelinegain insight how users are licensing products * star_halfknow types licenses users prefer your favorite languagequickly implement keygen the programming language your choice.nodepythonrubyphpc#toggle codeconst fetch = require(\"node-fetch\")// replace with token belongs a userconst token = \"9fc6d1e049a8414a905524dfa8c24a6b.d2b7366c85974bb09ef00b1b1ec22fd0.5a5dc7\"// set request headersconst headers = { \"content-type\": \"application/vnd.api+json\", \"accept\": \"application/vnd.api+json\", \"authorization\": `bearer ${token}`}// request current user's licenses our productconst url = url(\"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses\")url.searchparams.append(\"product\", \"14c80537-66c7-4753-a5e7-e8269a2ea616\")const licenses = await fetch(url, { headers })const { data, errors } = await licenses.json() (!data) { process.exit() // user does have licenses}// validate first license get const license = data[0]const validation = await fetch( `https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses/${license.id}/actions/validate`, { headers })const { meta } = await validation.json() (meta.valid) { // something} else { // something else}import requestsimport os# replace with token belongs a usertoken = \"9fc6d1e049a8414a905524dfa8c24a6b.d2b7366c85974bb09ef00b1b1ec22fd0.5a5dc7\"# set request headersheaders = { \"content-type\": \"application/vnd.api+json\", \"accept\": \"application/vnd.api+json\", \"authorization\": \"bearer {0}\".format(token)}# request current user's licenses our productlicenses = requests.( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses\", params={ \"product\": \"14c80537-66c7-4753-a5e7-e8269a2ea616\" }, headers=headers).json() not licenses[\"data\"]: quit() # user does have licenses# validate first license get license = licenses[\"data\"][0]validation = requests.( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses/{1}/actions/validate\".format(license[\"id\"]), headers=headers).json() validation[\"meta\"][\"valid\"]: # somethingelse: # something elserequire \"httparty\"# replace with token belongs a usertoken = \"9fc6d1e049a8414a905524dfa8c24a6b.d2b7366c85974bb09ef00b1b1ec22fd0.5a5dc7\"# set request headersheaders = { \"content-type\" => \"application/vnd.api+json\", \"accept\" => \"application/vnd.api+json\", \"authorization\" => \"bearer #{token}\"}# request current user's licenses our productlicenses = httparty.( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses\", query: { product: \"14c80537-66c7-4753-a5e7-e8269a2ea616\" }, headers: headers) licenses[\"data\"].empty? exit # user does have licensesend# validate first license get license = licenses[\"data\"].validation = httparty.( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses/#{license['id']}/actions/validate\", headers: headers) validation[\"meta\"][\"valid\"] # somethingelse # something elseendrequire __dir__ . \"/vendor/autoload.php\";// replace with token belongs a user$token = \"9fc6d1e049a8414a905524dfa8c24a6b.d2b7366c85974bb09ef00b1b1ec22fd0.5a5dc7\";// set request headers$headers = [ \"content-type\" => \"application/vnd.api+json\", \"accept\" => \"application/vnd.api+json\", \"authorization\" => \"bearer {$token}\"];// request current user's licenses our product$licenses = json_decode( requests::request( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses\", $headers, [\"product\" => \"14c80537-66c7-4753-a5e7-e8269a2ea616\"] )->body); (!$licenses[\"data\"]) { exit; // user does have licenses}// validate first license get $license = $licenses[\"data\"][0];$validation = json_decode( requests::request( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses/{$license['id']}/actions/validate\", $headers )->body); ($validation[\"meta\"][\"valid\"]) { // something} else { // something else}using easyhttp.http;using system;// replace with token belongs a uservar token = \"9fc6d1e049a8414a905524dfa8c24a6b.d2b7366c85974bb09ef00b1b1ec22fd0.5a5dc7\";// set http client request headersvar http = httpclient();http.request.contenttype = \"application/vnd.api+json\";http.request.accept = \"application/vnd.api+json\";http.request.authorization = $\"bearer {token}\";// request current user's licenses our productvar licenses = http.( \"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses\", {product = \"14c80537-66c7-4753-a5e7-e8269a2ea616\"});var body = licenses.dynamicbody; (body.data == null || body.data.length == 0){ environment.exit(0); // user does have licenses}// validate first license get var license = body.data.();var validation = http.($\"https://api.keygen.sh/v1/accounts/9fc6d1e0-49a8-414a-9055-24dfa8c24a6b/licenses/{license.id}/actions/validate\");body = validation.dynamicbody; (body.meta.valid){ // something}else{ // something else}learn to * codeeasily implement keygen handle licensing your product * done_allquickly set user registration license validation * synchandle webhooks integrate your payment system of course * playlist_add_checka full api reference examples popular languages * mail_outlineawesome email support ready join? stay updated.subscribeintegrate keygen software built electronwordpresswordpress plugin licensing example coming soonswiftmac app licensing example coming soonand more!faqs * is keygen? keygen is hosted saas (software--a-service) licensing managing users desktop apps other types software. keygen's primary product is api enables developers quickly set licensing user management. * is keygen ? keygen is primarily built small- medium-sized businesses build desktop applications, -premise software, other digital products e.g. wordpress plugins, etc. also offer -premise optionsfor larger companies are interested using keygen. * why was keygen created? terrible enterprisey documentation ridiculous pricing all that current state product licensing sucks. keygen aims make licensing software small businesses easy, letting ship product earlier not waste building custom licensing server. * keygen help lower support costs? yes! of things makes keygen unique is we encourage to allow users manage own resources .e. licenses machines, while respond the appropriate webhook eventsto handle billing using payment provider. not gives users freedom purchase additional licenses directly within product without help (offering great user-experience potential more sales!) can lower licensing-related support costs. * licensing models are supported? keygen supports almost licensing model: single machine-locked licenses, floating licenses and without machine limits, feature-based licenses, product add-ons, limited pre-determined pool-based licenses, encrypted unencrypted licenses, licenses require periodic check-, and a combination most those. * does keygen prevent sharing licenses? yes! keygen offers api endpoints help track user machine usage, license policies be configured strict, invalidating licenses go any configured machine limit. can set license policies floating allow licenses be valid across multiple machines. * does keygen prevent cracking? . keygen does nothing prevent user removing licensing logic altogether they access your application's code. the end, will to the choice how deal cracking e.g. requiring valid license updates, requiring licensed user-account support requests, etc. * where i monitor keygen's uptime? strive provide highest uptime possible. can monitor uptime average response on status page. * is data within keygen secure? yes. strive ensure the data stored within keygen is secure possible. never store passwords plain text are always hashed salted securely using bcrypt. also the same all access tokens, offer ability hash license keys well. network traffic is encrypted tls at least 128-bit aes encryption. additional questions concerns? in touch. * does keygen offline? yes, it requires manual . using keygen's admin dashboard, can manually create, check- and verify licenses, allowing to offer phone activation a similar service. automatic license validation to track machine usage, keygen require active ( periodic) internet connection. * does keygen handle payments? only licensing. since products handle payments a variety ways ( we don't to become payment platform), have created webhook system that can easily integrate payment system our api. implementation is similar how would implement stripe's webhook system. learn more webhooks. * you offer -premise api plans? yes. 're very interested talking companies would rather host software licensing server -house. in touch. * you offer open source plans? definitely. you to keygen an open source project, send a link your project we review to determine it's eligible a free open source plan. * i keygen an ios app? yes no. unfortunately, isn't possible this to keygen paid app-related licenses. apples developer termsrequire purchases related an app, such premium content add-ons are managed via native -app purchase api. * i keygen an android app? yes no. unfortunately, isn't possible this to keygen paid app-related licenses. google's developer policyrequires purchases related an app, such premium features add-ons are managed via native -app billing api. ready get started? in touch, sign today. started freeÂ© 2017 keygen rights reserved [email protected] * status * privacy * terms"
}