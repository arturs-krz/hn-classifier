{
	"_id": "14439420",
	"site": "http://getlibs.com",
	"title": " getlibs - modern javascript without server/build",
	"author": "xkam",
	"date": "2017-06-16T07:57:32.530Z",
	"tags": [],
	"content": "unpkg.com/getlibsmodern javascript. front-end libraries. server/build.view github in-browser module loader configured get external dependencies directly cdn. includes babel/typescript. quick prototyping, code sharing, teaching/learning - super simple web dev environment without node/webpack/etc. front-end librariesangular, react, vue, bootstrap, handlebars, jquery are included. plus packages cdnjs.com all npm (via unpkg.com). front-end libraries should out the box - use import/require(). a popular library does load, tell and ll try solve with library-specific config.write modern javascript ( typescript) latest language features jsx the code be transpiled -browser via babel typescript ( required). make fast transpiler start a worker thread only process modified code. unless change many files once open project the time, transpiling should barely noticeable it runs parallel loading initializing ui framework. server/build required need a build process even web server. use static files, open a browser hit refresh :-). run browsersync watch mode auto-reload.attention! is good dev environment . before going production, still need setup webpack/rollup/eslint/karma/whatever run proper build. is a idea transpile code -browser production (unless is required a small number older browsers - we are there yet :-).installation is nothing install, include link getlibs script cdn -<script src=\"https://unpkg.com/getlibs\"></script>usageorganize code separate modules call system.import() load app.<script> system.import('./main.js');</script> use <script type=\"x-module\">...</script> put everything index.htmles5/require()var compile = require('lodash/template'), template = require('./hello.tpl'), data = require('./hello.json'), render = compile(template);document.getelementbyid('app').innerhtml = render(data);[full source][open browser]es6/importimport react 'react';import reactdom 'react-dom';const msg = 'hello world!';reactdom.render(<h1>{msg}</h1>, document.getelementbyid('app'));[full source][open browser]typescriptimport {component} '@angular/core';@component({ selector: '#app', templateurl: './app.component.html'})export class appcomponent { msg = 'hello world!';}[full source][open browser]running filesystem will cross origin errors you open examples chrome directly the filesystem. allow file access chrome lauch with --allow-file-access--files flag (more info). it worksgetlibs is based systemjs module loader. instead typical setup where looks external packages node_modules directory, getlibs is configured load libraries directly npm (via unpkg.com) cdnjs.com, available.systemjs is module loader developed guy bedford.getlibs is bundle systemjs a custom config - maintained activewidgets.getlibs is maintained activewidgets. page was generated github pages."
}