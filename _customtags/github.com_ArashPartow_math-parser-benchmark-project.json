{
	"_id": "14381293",
	"site": "https://github.com/ArashPartow/math-parser-benchmark-project",
	"title": "High Performance Mathematical Expression Parser Benchmarks",
	"author": "ArashPartow",
	"date": "2017-06-13T13:57:07.262Z",
	"tags": {
		"categories": [
			"development", "data-science"
		],
		"languages": [
			"c++",
			"c",
			"html",
			"shell",
			"makefile",
			"c#",
			"other"
		]
	},
	"content": "readme.md great c++ mathematical expression parser benchmark is benchmark suite different implementations open source mathexpression parsers evaluators written c++. currently followingexpression parsers are part this benchmark:#libraryauthorlicensenumeric type00atmspheinz van saanengpl v3double, mpfr01exprtkarash partowmitdouble, float, mpfr02fparserjuha nieminen & joel yliluomalgpldouble03leptonpeter eastmanmitdouble04mathexpryann olliviercopyright notice 1997-2000double05mtparsermathieu jacquescpoldouble06muparseringo bergmitdouble, float07muparserxingo bergmitdouble, float08tinyexprlewis van winklezlibdoublenote: terms double, float etc found the table above are defined follows:double : ieee-754 double-precision binary floating-point (64-bit)float : ieee-754 single-precision floating-point format (32-bit)mpfr : gnu multiple precision floating-point reliablynote: archive is meant a primary source any the librarieslisted above it may contain outdated versions said libraries.objectives the parsers this benchmark suite are one or another poem(parse once evaluate many times) nature. such primaryobjectives this benchmark are ascertain followingproperties each the denoted parsers following order priority:correctness precision results relative the floating point type usedrobustness the parser given various mathematical expressionsevaluation efficiency 'compiled/parsed' expressions setup benchmark takes parameters:number iterations (n)benchmark test file mathematical expression benchmark files are follows:bench_expr.txtbench_expr_all.txtbench_expr_all_permutations.txtbench_expr_complete.txtbench_expr_extensive.txtbench_expr_precedence.txtbench_expr_random_with_functions.txtbench_expr_random_without_functions.txtbench_expr_weird.txt following is short sampling expressions taken the bench_expr.txtexpression suite:+1.1*2.22.2*+1.1(2.2*+1.1)*3.3sin(2.2 * ) + cos(pi / b)1 - sin(2.2 * ) + cos(pi / b)sqrt(1 - sin(2.2 * ) + cos(pi / b) / 3.3)(^2 / sin(2 * pi / b)) - / 2.21-(/b*0.5)e^log(7*)10^log(3+b)(cos(2.41)/b)-(sin(pi+)+1)-(e^(log(7+b))) an example, following execution use \"bench_expr_all.txt\"set expressions, executing each expression 100000 times:parserbench.exe 100000 bench_expr_all.txt rounds every expression the benchmark file, every parser evaluates givenexpression n times, is known a round. total each parser takes evaluate expression n times is recorded. ranking the parsers the round is done the fastest the slowest. following is examplesummary the expression '(^2/sin(2*pi/b))-/2':expression 64 70: \"(^2/sin(2*pi/b))-/2\"; progress: ############[01] exprtk ( 35.863 ns, 3.744853294789905362, -15768714.840563148260116577)[02] exprtkfloat ( 37.413 ns, 3.744852304458618164, -15768714.994192123413085938)[03] muparsersse ( 44.672 ns, 3.744852304458618164, -15768715.739250183105468750)[04] muparser 2.2.4 (omp)( 50.093 ns, 3.744853294789905362, -15768714.840563148260116577)[05] mtparser ( 54.681 ns, 3.744853294789905362, -15768714.840563148260116577)[06] muparser 2.2.4 ( 55.816 ns, 3.744853294789905362, -15768714.840563148260116577)[07] fparser 4.5 ( 65.141 ns, 3.744853294789905362, -15768714.840563148260116577)[08] atmsp 1.0.4 ( 78.809 ns, 3.744853294789905362, -15768714.840563148260116577)[09] mathexpr (131.242 ns, 3.744853294789905362, -15768714.840563148260116577)[10] tinyexpr (168.341 ns, 3.744853294789905362, -15768714.840563148260116577)[11] lepton (402.011 ns, 3.744853294789905362, -15768714.840563148260116577)[12] muparserx (572.611 ns, 3.744853294789905362, -15768714.840563148260116577)parsers can't parse given expression produce result different the expected result (based a normalized epsilon approach) are disqualified the round do participate point accumulation. following is example where few the parsers failed either parse evaluate givenexpression '+1.1+^b' correctly:expression 63 96: \"+^+b+1.1\"; progress: ############[01] exprtk ( 40.631 ns, 2.333286300554663129, 14534421.395495440810918808)[02] exprtkfloat ( 44.212 ns, 2.333286285400390625, 14534422.159194946289062500)[03] muparsersse ( 44.556 ns, 2.333286285400390625, 14534422.159194946289062500)[04] atmsp 1.0.4 ( 47.906 ns, 2.333286300554663129, 14534421.395495440810918808)[05] tinyexpr ( 52.831 ns, 2.333286300554663129, 14534421.395495440810918808)[06] mtparser ( 56.045 ns, 2.333286300554663129, 14534421.395495440810918808)[07] muparser 2.2.4 ( 67.061 ns, 2.333286300554663129, 14534421.395495440810918808)[08] muparser 2.2.4 (omp)( 67.231 ns, 2.333286300554663129, 14534421.395495440810918808)[09] muparserx (251.338 ns, 2.333286300554663129, 14534421.395495440810918808)dnq list[01] fparser 4.5 (syntax error)[02] mathexpr (parsing error)[03] lepton (parse error expression \"+^+b+1.1 \": unexpected token: +)**** error **** excessive number evaluation failures! [3] meanings each the columns are follows:rankparseraverage (in nano-seconds) evaluate expression once, taken n-timesresult evaluating expressionsum n-evaluations the given expression final summaryonce the expressions been completed, summary is provided, includes information relating the build parameters thebenchmark binary, architecture the benchmark was run upon, final ranking the parsers, a listing expressions per parser were deemed having been disqualified during benchmark. following is example summary generated the completion the benchmark:benchmark settings: - expressions file is \"bench_expr.txt\" - reference parser is exprtk - iterations per expression: 5000000 - number expressions: 70 - number excessive failures: 5 - release build - compiled msvc version 1900 - ieee 754 (iec 559) is available - 32-bit build - cpu name : intel(r) xeon(r) cpu e5-2687w 0 @ 3.10ghz - num. cores : 16 - num. logical : 32 - total logical : 16 - l1 d cache : 32 kb - l1 cache : 32 kb - l2 cache : 256 kb - l3 cache : 20480 kb - l1d assoc. : 8- - l2 assoc. : 8- - l3 assoc. : 20- - l1d line size : 64 bytes - l2 line size : 64 bytes - l3 line size : 64 bytes - cpu clock : 3092 mhz - features : acpi aes apic avx clflush cmov cx16 cx8 dca de ds_cpl dts dts64 est fpu fxsr ht lahf_lm lm mca mce mmx monitor msr mtrr osxsave pae pat pbe pclmul pdcm pge pni popcnt pse pse36 sep smx ss sse sse2 sse4_1 sse4_2 ssse3 tm tm2 tsc vme vmx xd xsave xtprscores:# parser type points score failures-------------------------------------------------------------00 exprtk double 781 100 001 exprtkfloat float 643 82 902 muparsersse float 639 93 903 fparser 4.5 double 536 45 004 atmsp 1.0.4 double 482 40 205 muparser 2.2.4 double 445 37 006 mtparser double 402 38 1007 muparser 2.2.4 (omp) double 374 35 008 mathexpr double 345 30 209 tinyexpr double 296 30 210 lepton double 111 6 211 muparserx double 97 5 0 results summaries runs the benchmark suite upon various architectures be found here: resultsexample results following is chart depicting results executions persecond obtained running 'bench_expr_random_without_functions.txt'benchmark, using double type, 5000000 iterations per expression an intel xeon e5-2687w 3ghz. horizontal measure the chart is length the expression bytes.note: parsers muparsersse exprtkfloat were excludeddue their of float type, the lepton muparserxparsers were excluded due the fact their results wereconsistently 2-3 orders magnitude slower all others.note: command executed generate above results is follows:parserbenchmark.exe 5000000 bench_expr_random_without_functions.txt write_tablenative mode benchmark has special mode called \"native\". this mode predefined set expressions are employed, benchmarked againstboth native equivalent implementations the standardparsers/evaluators. command execute benchmark native mode is follows:parserbenchmark.exe 1000000 nativecustomised testscreating customised test is very simple. that is required is create utf-8 encoded text file, pass as 2nd parameter the benchmark executable.each line only one expression, comprised the following:operators: +, -, *, /, ^variables: , b, c, x, y, z, wconstants: e pifunctions: sin, cos, tan, abs, exp, sqrt, log, powparentheses: round '(' ')'furthermore blank lines lines beginning a #-symbol be ignored (aka comments white-space). following is simple example a custom test:---- snip ----# first expression:(x + 1) / 2 * b# pythagoras^2 + b^2# constant expression1 + (2 * 3) / 7# definition tan terms sine cosinesin(x) / cos(x)---- snip ---- parsers addition new unlisted c++ mathematical expression parsers is always welcome. you of parser would it included the suite feel free make request. additionally the associated benchmark implementation (eg: src/benchxyzw.cpp) be made available part the request would very helpful."
}