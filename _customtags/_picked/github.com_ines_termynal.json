{
	"_id": "14515462",
	"site": "https://github.com/ines/termynal",
	"title": "Lightweight and modern terminal animations using async/await",
	"author": "dendisuhubdy",
	"date": "2017-06-13T14:09:56.671Z",
	"tags": {
		"categories": [
			"opensource",
			"javascript",
			"javascript-library",
			"animation",
			"css",
			"html-api",
			"terminal"
		],
		"languages": [
			"javascript",
			"html",
			"css"
		]
	},
	"content": "readme.md termynal.js: lightweight modern animated terminal windowtyping animations are nothing and termynal isn't particularly revolutionary. wrote because needed modern lightweight version minimal javascript without messy, nested settimeout calls. of existing libraries rely javascript both rendering, styling animation, even require jquery. is inconvenient, especially you're using animation part your software's documentation. a user has javascript disabled, will see blank window.termynal uses async await, is supported pretty much across major browsers. termynal lets write input output plain html, all styling plain css. non-js users still the complete code, no animation. width height the terminal window is read off original container. means won't to worry sizing layout reflows. termynal comes a flexible html api, you use without having write single line javascript yourself.examplessimple example: codepen demo, example.htmlcustom example: codepen demo, example2.htmlusage, you need create container. each container should a unique class id tells termynal where find lines animate. terminal find lines via data-ty attribute will animate text content. apart that, won't mess your markup you're free add additional styling attributes.<div id=\"termynal\" data-termynal> <span data-ty=\"input\">pip install spacy</span> <span data-ty=\"progress\"></span> <span data-ty>successfully installed spacy</span></div> you include termynal.js, can specify container(s) the data-termynal-container attribute. initialise termynal more one container, simply add selectors separated a |, example #termynal1|#termynal2.<script src=\"termynal.js\" data-termynal-container=\"#termynal\"></script> also need include stylesheet, termynal.css your site's <head>:<lin rel=\"stylesheet\" href=\"termynal.css\">'s !customising termynal each container, can specify number settings data attributes, overwrite animation delay a line each individual element.<div id=\"termynal\" data-ty-startdelay=\"600\" data-ty-cursor=\"\"> <span data-ty=\"input\"> pip install spacy</span> <span data-ty data-ty-delay=\"250\">installing spacy...</span></div> you don't to the html api, can initialise termynal javascript. constructor takes arguments: query selector the container, an optional object settings.var termynal = termynal('#termynal', { startdelay: 600 }) following settings are available:nametypedefaultdescriptionprefixstringtyprefix use data attributes.startdelaynumber600delay before animation, ms.typedelaynumber90delay between each typed character, ms.linedelaynumber1500delay between each line, ms.progresslengthnumber40number characters displayed progress bar.progresscharstring''character use progress bar.cursorstring''character use cursor.noinitbooleanfalsedon't initialise animation load. means can call termynal.init() yourself whenever however want.prompts animationseach <span> within container represents line code. can customise way 's rendered animated via data attributes. be rendered termynal, each line needs least empty data-ty attribute.data-ty: display animation stylevaluedescriptionexample-simple output, typing.<span data-ty>successfuly installed spacy</span>inputsimple prompt user input cursor<span data-ty=\"input\">pip install spacy</span>progressanimated progress bar<span data-ty=\"progress\"></span>data-ty-prompt: prompt style prompt style specifies characters are displayed before each line, example, indicate command line inputs interpreters ( >>> for python). default, termynal displays $ before each user input line.attributesoutputdata-ty=\"input\"$ hello worlddata-ty=\"input\" data-ty-prompt=\"~\"~ hello worlddata-ty=\"input\" data-ty-prompt=\">>>\">>> hello worlddata-ty=\"input\" data-ty-prompt=\">\"> hello worlddata-ty=\"input\" data-ty-prompt=\"\" hello worlddata-ty=\"input\" data-ty-prompt=\"(.env)\"(.env) hello worlddata-ty=\"input\" data-ty-prompt=\"~/user >\"~/user > hello world can use custom prompts non-animated output. make prompts easy customise style, are defined :before pseudo-elements. pseudo-elements are selectable, the user copy-paste commands won't to worry stray $ >>> characters. can change style customising elements termynal.css, add own rules specific elements ./* default style prompts */[data-ty=\"input\"]:before,[data-ty-prompt]:before { margin-right: 0.75em; color: var(--color-text-subtle);}/* only >>> prompt red */[data-ty-prompt=\">>>\"]:before { color: red;}data-ty-cursor: display cursoreach line set data-ty=\"input\" be rendered an animated cursor. termynal does by adding data-ty-cursor attribute, removing when line animation has completed ( the delay specified linedelay). value the data-ty-cursor sets cursor style default, small unicode block is used: . can set custom cursor character the global settings, overwrite on particular line:<div id=\"#termynal\" data-termynal data-ty-cursor=\"|\"> <span data-ty=\"input\">animated cursor |</span> <span data-ty=\"input\" data-ty-cursor=\"\">animated cursor </span></div> can change cursor style animation termynal.css:[data-ty-cursor]: { content: attr(data-ty-cursor); font-family: monospace; margin-left: 0.5em; -webkit-animation: blink 1s infinite; animation: blink 1s infinite;}"
}