{
	"_id": "14409255",
	"site": "https://github.com/Jack000/fontjoy",
	"title": " Choosing font combinations with deep learning",
	"author": "Jack000",
	"date": "2017-06-13T13:06:45.010Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": []
	},
	"content": "readme.md font vectorssummary: font vectors are form transfer learning can used create novel font combinations.try font pairing tool http://fontjoy.com play the tensorboard projector http://fontjoy.com/projector/ - (try t-sne a perplexity value 30)extracting feature vectors images isn't entirely idea. take image, put through fixed feature extractor get representative vector the side. basic idea behind is covered http://cs231n.github.io/transfer-learning/ we images fonts, get vector encodes visual information the font. font vector is abstract representation what font looks . because 's a vector can vector arithmetic compare different fonts. can create feature vectors a couple lines keras:img_path = 'elephant.jpg'img = image.load_img(img_path, target_size=(224, 224))x = image.img_to_array(img)x = np.expand_dims(x, axis=0)x = preprocess_input(x)features = model.predict(x)# use pca reduce dimensionality font comparison, designers often words \"handgloves\" contain typographically distinguishing letters e, and n. since mnemonic word isn't necessary a machine learning algo, used grid important letters: treated each variant a separate font, the weights be included the font vector. are 1883 different fonts the dataset ( google webfonts) can use font vectors ? the simplest case is visual similarity search: you've heard word vectors, 've probably seen something this: turns you do something similar font vectors:through vector arithmetic can isolate features represent visual concepts serifs, obliqueness, weight - even more abstract concepts legibility, kerning color. of more interesting things can with font vectors is font pairing, the problem selecting fonts work together a design.contrasting fonts be used emphasize message to guide eye create visual interest. core process behind font pairing is somewhat paradoxical - want fonts contrast each , yet share certain similarities. fonts resemble each create uncomfortable discord, wildly contrasting fonts haphazard unintentional.striking right balance comes down intuition, we try narrow down field font vectors.here reach small issue - metrics are commonly used vector comparison don't convey concept balance very :cosine distance ( the vectors point the same direction?)euclidean distance (are vectors similar direction magnitude?)hamming distance (are vectors roughly similar?) these are great finding similar contrasting fonts, our ideal match has similarities contrasts equal measure. we to up own similarity metric: is the cosine distance split two halves - positive bits the negative bits. doing our similarity measure reward both similarities dissimilarities - ie. 'll fonts are very similar some respects very different other respects. contrasting pairings are produced this fashion don't always together (clearly all axis contrast are visually pleasing), the hit rate is surprisingly high.another consideration body text is legibility - many fonts are suitable titles aren't very readable small sizes. get best balance between 3 fonts can try optimize best overall contrast, while weighing legibility the body font a secondary factor. http://fontjoy.com a demo this system. raw data be viewed through tensorflow embedding projector http://fontjoy.com/projector/"
}