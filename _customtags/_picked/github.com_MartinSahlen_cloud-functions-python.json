{
	"_id": "14446807",
	"site": "https://github.com/MartinSahlen/cloud-functions-python",
	"title": "Write Google cloud functions in python with native pip support",
	"author": "martinsahlen",
	"date": "2017-06-13T13:55:21.439Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"javascript",
			"shell"
		]
	},
	"content": "readme.md cloud-functions-pythonpy-cloud-fn is cli tool allows to write deploy google cloud functions pure python, supporting python 2.7 3.5(thanks @mitalashok helping the code compatibility). javascript allowed! goal this library is be able let developers write light weight functions idiomatic python without needing worry node.js. works ootb pip, include file named requirements.txt is structured this:pycloudfn==0.1.115jsonpickle==0.9.4 you normally when building python application. building ( production), library pick this file make sure install dependencies. will so while caching dependencies a virtual environment, speed subsequent builds.tldr, at examplesrun pip install pycloudfn get .you need have google cloud sdk installed, well the cloud functions emulator npm you totest function locally. also need docker installed running well the gcloud cli. docker is needed build the production environment, regardless you local development environment.currently, http, pubsub bucket events are supported ( firebase).usagecliusage: py-cloud-fn [-h] [-p] [-f file_name] [--python_version {2.7,3.5,3.6}] function_name {http,pubsub,bucket}build gcp cloud function python.positional arguments: function_name name your cloud function {http,pubsub,bucket} trigger type your cloud functionoptional arguments: -h, --help show help message exit -p, --production build function production environment -f file_name, --file_name file_name file name the file wish build --python_version {2.7,3.5} python version are targeting, applies building productionusage is meant be pretty idiomatic:run py-cloud-fn <function_name> <trigger_type> build finished function.run -h get guidance options. library assume you a file named main.py not specified. library create cloudfn folder wherever is used, can safely put .gitignore. contains build files cache python packages.$django_settings_module=mysite.settings py-cloud-fn -function http -f function.py --python_version 3.5 _____ _ _ __ | __ \\ | | | | / _| | |__) | _ ______ ___| | ___ _ _ __| |______| |_ _ __ | ___/ | | |______/ __| |/ _ \\| | | |/ _` |______| _| '_ \\ | | | |_| | | (__| | (_) | |_| | (_| | | | | | | | |_| \\__, | \\___|_|\\___/ \\__,_|\\__,_| |_| |_| |_| __/ | |___/function: -functionfile: function.pytrigger: httppython version: 3.5production: false building, grab coffee... generating javascript... cleaning ...elapsed : 37.6soutput: ./cloudfn/target/index.jsdependencies library works pip ootb. add requirements.txt file the root the repo you are golden. obviously needs pycloudfn be present.autenticationsince is really supported google, is thing needs be done make work smoothly: can't the default clients directly. 's solvable though, do cloudfn.google_account import get_credentialsbiquery_client = bigquery.client(credentials=get_credentials()) everything is taken care for !! no more actions need done.handling http request at requestobject the structure cloudfn.http import handle_http_event, responsedef handle_http(req): return response( status_code=200, body={'key': 2}, headers={'content-type': 'application/json'}, )handle_http_event(handle_http) you don't return anything, return something different a cloudfn.http.response object, function return 200 ok an empty body. body be either string, list dictionary, values be forced a string.handling http flaskflask is great framework building microservices. library supports flask ootb. you need have routing / parsing verification logic place, flask might a fit! a at example see easy is! cloudfn.flask_handler import handle_http_event cloudfn.google_account import get_credentials flask import flask, request flask.json import jsonify google.cloud import bigqueryapp = flask('-function')biquery_client = bigquery.client(credentials=get_credentials())@app.route('/', methods=['post', ''])def hello(): print request.headers return jsonify(message='hello world!', json=request.get_json()), 201@app.route('/lol')def hellolol(): return 'hello lol!'@app.route('/bigquery-datasets', methods=['post', ''])def bigquery(): datasets = [] dataset biquery_client.list_datasets(): datasets.append(dataset.name) return jsonify(message='hello world!', datasets={ 'datasets': datasets }), 201handle_http_event(app)handling http djangodjango is great framework building microservices. library supports django ootb. assuming have setup django application anormal fashion, should what need. need setup pretty minimal djangoapplication ( database etc) get working. might a little overkill squeezedjango a cloud function, there are pretty nice features doing requestverification routing django using intancedjango rest framework. the example how can handle http request using django. cloudfn.django_handler import handle_http_event mysite.wsgi import applicationhandle_http_event(application)handling bucket event at object the structure, follows convention the storage api cloudfn.storage import handle_bucket_eventimport jsonpickledef bucket_handler(obj): print jsonpickle.encode(obj)handle_bucket_event(bucket_handler)handling pubsub message at message the structure, follows convention the pubsub api cloudfn.pubsub import handle_pubsub_eventimport jsonpickledef pubsub_handler(message): print jsonpickle.encode(message)handle_pubsub_event(pubsub_handler)deploying function have previously built -cloud-fn, which is complete cli available you deploy function. did want go now, rather concerned building function be super light weight. deploying function be done this:( you the emulator installed, swap gcloud beta functions npm install && functions you are golden!).httppy-cloud-fn -function http --production && \\cd cloudfn/target && gcloud beta functions deploy -function \\--trigger-http --stage-bucket <bucket> && cd ../..storagepy-cloud-fn -bucket-function bucket -p && cd cloudfn/target && \\gcloud beta functions deploy -bucket-function --trigger-bucket \\<trigger-bucket> --stage-bucket <stage-bucket> && cd ../..pubsubpy-cloud-fn -topic-function bucket -p && cd cloudfn/target && \\gcloud beta functions deploy -topic-function --trigger-topic <topic> \\--stage-bucket <bucket> && cd ../..adding support packages doesnt look the build output what might wrong. for modules might missing.add line-delimited file hidden imports a folder called cloudfn-hooks the root your repo, more pyinstaller how works. check this how add hooks.troubleshooting things blow , the thing try is delete cloudfn cachefolder. things might a bit haywire builds are interrupted othercircumstances. just might save day! please in touch twitter you bump anything: @martinsahlenlicensecopyright Â© 2017 martin sahlendistributed under mit license"
}