{
	"_id": "14372985",
	"site": "https://github.com/iogf/untwisted",
	"title": "Show HN; a twisted-like framework for asynchronous programming in python",
	"author": "iogf",
	"date": "2017-06-13T13:07:41.896Z",
	"tags": {
		"categories": [
			"opensource"
		],
		"languages": [
			"python",
			"html"
		]
	},
	"content": "readme.md untwisted is untwisted? library asynchronous programming python.despite the above statement being true doesn't answer question entirely.untwisted is different approach solve problem implementing networking applications.untwisted architecture makes simpler handle internet protocols, consequently is easier implement applications run top such protocols.untwisted supports asynchronously dealing sockets, file descriptors while spawning threads perform jobs. is possible talk a process using thread based approach a unix filedescriptor while waiting socket's events. untwisted basically solves problem some pythonlibraries pexpect twisted proposes solve a neat powerful .untwisted is extremely modular, applications are implemented top untwisted tend besuccint elegant. untwisted has impressive performance compared other python frameworks. may wondering right why would endevour learn new python asynchronous framework once have spent many hours trying learn asynchronous programming python other frameworks. of reasons learn untwisted framework is fact you'll spend pleasant hoursunderstanding untwisted some minutes implementing complex applications top it. another reason is if like clean, consistent high performance code untwisted is you.web server basic rapidserv web application. untwisted.plugins.rapidserv import rapidserv, coreapp = rapidserv(__file__)@app.request(' /')def send_base(con, request): con.add_data('<html> <body> <p> rapidserv </p> </body> </html>') con.done() __name__ == '__main__': app.bind('0.0.0.0', 80, 50) core.gear.mainloop()echo server neat piece code implements basic echo server. untwisted.network import spin, xmap, core untwisted.iostd import create_server, accept, loadclass echoserver(object): def __init__(self, server): xmap(server, accept, lambda server, con: xmap(con, load, lambda con, data: con.dump(data))) __name__ == '__main__': echoserver(create_server('0.0.0.0', 1234, 5)) core.gear.mainloop()chat server simple chat server permits clients connect through telnet protocol,pick a nick start chatting. untwisted.network import core, spin, xmap untwisted.iostd import create_server, accept, close, lose untwisted.splits import terminator untwisted.tools import coroutineclass chatserver(object): def __init__(self, server): xmap(server, accept, self.handle_accept) self.pool = [] @coroutine def handle_accept(self, server, client): terminator(client, delim='') xmap(client, close, lambda client, err: self.pool.remove(client)) client.dump('type nick.nick:') client.nick, = yield client, terminator.found xmap(client, terminator.found, self.echo_msg) self.pool.append(client) def echo_msg(self, client, data): ind self.pool: not ind is client: ind.dump('%s:%s' % (client.nick, data)) __name__ == '__main__': server = create_server('', 1234, 5) chatserver(server) core.gear.mainloop()spawn processes example below spawns python process sends line code. untwisted.expect import expect, load, close untwisted.network import core, xmap, diedef handle(expect, data): print dataexpect = expect('python', '-', '-u')xmap(expect, load, handle)xmap(expect, close, lambda expect: die())expect.send('print \"hello world\"quit()')core.gear.mainloop()installuntwisted depends python2.pip install jinja2pip install untwisted untwisted bookbook.mdapplications using untwistedvy vim- in python made scratch.ameliabot flexible ircbot written top untwisted framework.steinitz chess interface fics support stockfish analyze moves.supportfreenodeaddress: irc.freenode.orgchannel: #untwisted"
}