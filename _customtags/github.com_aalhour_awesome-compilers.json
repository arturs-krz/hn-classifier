{
	"_id": "14330948",
	"site": "https://github.com/aalhour/awesome-compilers",
	"title": " Awesome-Compilers List",
	"author": "aalhour",
	"date": "2017-06-13T13:08:17.047Z",
	"tags": {
		"categories": [
			"list", "development"
		],
		"languages": []
	},
	"content": "readme.md curated list awesome resources, learning materials, tools, frameworks, platforms, technologies source code projects the field compilers, interpreters runtimes. list has bias towards education.contentslearningbooksgeneral overviewintroductoryadvancedpapersresearchers institutesspecificationscoursestalks conferenceschannelsvideosarticlestutorialscommunity discussionstools frameworkslanguage agnosticc / c++clrdgraalhaskelljavascriptjvmkotlinpythonlists python parsing toolsrustcompilers interpretersserious projectseducational toy projectsruntimes vmsblogscommunitiesverticalslearningbooksgeneral overviewcomputer systems: programmers perspective, r. bryant, d. o'hallaron - comprehensive treatement computer systems including compilers, interpreters runtimes.elements computing systems, n. nisan, s. schocken - to build computer starting nand logic gates then move machine code, assemblers, compilers operating systems.sicp, h. abelson, g. sussman - structure interpretation computer programs. editions: html5/epub version.introductorybasics compiler design, t. mogensen - short concise book the basic concepts behind compiler design.beautiful racket, m. ­t­er­ick - to your own programming language racket.build own lisp, d. holden - learn c build own lisp programming language 1000 lines code.compilers: principles, techniques, tools, . aho, m. lam, r. sethi, j. ullman - infamous dragons book, classic textbook compiler construction.crafting interpreters, b. nystrom - everything need learn build interpreted, full-featured, efficient scripting language.github repo.discussions: hn.create own programming language - very short book building own programming language video tutorials source code projects 3 example programming languages.discussions: hn.engineering compiler, k. cooper, l. torczon - modern comprehensive textbook compilers construction. covers ssa form recent research machine code generation.essentials programming languages, d. friedman & m. wand - fundamental concepts programming languages a focus semantics, interpretation cps (continuation passing style).language implementation patterns, t. parr - learn patterns behind building programming languages build interpreter yourself, using antlr.modern compiler implementation ml, . appel. editions: mci c, mci java.programming language pragmatics, m. scott.programming languages: application interpretation, s. krishnamurthi.pdf.programming languages: theory practice.project oberon, n. wirth & j. gutknecht. editions: 2013 edition. beam book - description the erts (erlang runtime system) the beam virtual machine.virtual machines, smith nait.virtual machines, iain craig.writing interpreter go, t. ball.writing compilers interpreters: software engineering approach. editions: writing compilers interpreters: applied approach using c++, writing compilers interpreters: applied approach using c.advancedadvanced compiler design implementation, s. muchnick.advanced topics types programming languages, b. pierce. retargetable c compiler: design implementation, d. hanson.building optimizing compiler, b. morgan.compiling continuations, . appel.design concepts programming languages, f. turbak, d. gifford, m. sheldon - contains introductory level material.instruction level parallelism, . aiken, u. banerjee, . kejariwal, . nicolau.linkers loaders.optimizing compilers modern architectures, r. allen & k. kennedy.parsing techniques: practical guide.1st edition, pdf. garbage collection handbook: art automatic memory management, r. jones, . hosking, e. moss. implemetation functional programming langauges, s. p. jones. ssa book, springer, zadeck.types programming languages, b. pierce.warren's abstract machine - prolog haskell, h. ït-kaci.papers brief history jit compilation, j. aycock. flexible prolog interpreter python, c. bolz & m. leuschel. graph higher-order ir, r. leiß, m. koster & s. hack. micro-manual lisp - the whole truth, j. mccarthy. editions: neat nice typeset. prolog interpreter python, c. bolz. simple multi-processor computer based subleq, o. mazonka, . kolodin. incremental approach compiler construction.compiler construction using scheme, e. hilsdale, j. ashley, r. dybvig & d. friedman.compiling continuations: continued, . kennedy.definitional interpreters higher-order programming languages, j. reynolds.draining swamp: micro virtual machines solid foundation languauage development, k. wang, y. lin, s. blackburn, m. norrish & . hosking.engineering definitional interpreters, j. midtgaard, n. ramsey, b. larsen.garbage collection an uncooperative environment, h. boehm, m. weiser.machine code obfuscation via instruction set reduction cfg linearization, c. jonischkeit.mov is turing-complete, s. dolan.discussions: hn, reddit.nanopass framework commercial compiler development, . keep & r. dybvig.nanopass framework compiler education, d. sarkar, o. waddell & r. dybvig.notes graph algorithms used optimizing compilers, c. offner.packrat parsing thesis peg, b. ford.peg-based transformer provides front-end, middle-end back-end stages a simple compiler, . piumarta.pycket: tracing jit a functional language.pypys approach vm construction, . rigo & s. pedroni.rabbit: compiler scheme, g. steele.simple efficient construction ssa form.ssa-based register allocation, s. hack & g. goos. essence compiling continuations, c. flanagan, . sabry, b. duba & m. felleisen. page-faults weird machine: lessons instruction-less computation, j. bangert, s. bratus, r. shapiro, s. smith.trace-based jit compilation lazy functional languages, t. schilling.using datalog binary decision diagrams program analysis, j. whaley, d. avots, m. carbin & m. lam.researchers institutesc. bolzs research publications.compilers lab saarland university.kenichi asai.packrat parsing (peg) papers resources.specificationscli (ecma-335) specification.mu specification.jvm se8 specification.coursescompilers construction, cambridge - introduction compiler construction course the university cambridge.compiler construction undergrads, rice university - introduction compiler construction language translators course the rice university.compilers theory, stanford - youtube, stanford.edu, class notes -introduction compilers theory construction course stanford.design construction compilers, university texas - design construction compilers including lexical analysis, parsing, code generation techniques, error analysis simple code optimizations.lecture notes: pdf, html.dsl design implementation summer school - summer school program the topics dsl design implementation hosted the epfl university.foundations programming languages - concepts underlie design, definition, implementation use modern programming languages a formal standpoint.nand2tetris: to build computer first principles, part 2 - 2nd part the nand2tetris course covers basic language design elementary compiler construction concepts addition many topics a basic level.nptel's principles compiler design course - introductory course nptel compiler design.nptel's compiler design course - slightly more advanced course their principles compiler design course, covers ssa form a degree.youtube video playlist.programming languages: part , by grossman - part 1 a 3-part course series the basic concepts programming languages, a strong emphasis functional programming.programming languages: part b, grossman - part 2 a 3-part course series the basic concepts programming languages, a strong emphasis functional programming.programming languages: part c, grossman - part 3 a 3-part course series the basic concepts programming languages, a strong emphasis functional programming.types, logic, semantics, verification oregon university's summer school - summer school program consists 80 minute lectures presented internationally recognized leaders programming languages formal reasoning research.virtual machines managed runtimes, ucb cs294 - introductory course virtual machines managed runtimes the university berkeley.virtual machines summer school 2016 (vmss 2016) - vmss is summer school program aims give overview the field, targeted early career researchers.youtube videos playlist.talks conferenceschannelscurry ! conference - programming languages conference.youtube channel.lang.next conference 2012.lang.next conference 2014.llvm developers meeting youtube channel.videosanders hejlsberg modern compiler construction. introduction combinator compilers graph reduction machines.building interpreter rpython.cpython - ten-hour codewalk.exploring pythons bytecode.java aot (ahead time) compilation.metascala: tiny diy jvm - metascala is tiny metacircular java virtual machine (jvm) written the scala programming language.meta-tracing, rpython pypy. vm rule all, vm bind - tutorial the truffel technology.programming should eat itself - strangeloop talk reflective programming kenichi asai's black programming language.python, linkers virtual memory - pycon .reverse engineering mos 6502 cpu.single static assignment form seminar - introductory seminar ssa form, compiler optimizations under and applications other areas such program analysis verification. jvm (java virtual machine) architecture. most beautiful program ever written - william byrd a lisp interpreter written 15 lines lisp. movfuscator: turning mov a soul crushing re nightmare.discussions: hn, reddit. ssa form - video lectures nptel's compilers course (: courses more info):part 1.part 2.part 3.type-driven development idris.understanding compiler optimization.articles tourists guide the llvm source code.accidentally turing complete.adventures jit compilation eli bendersky:part 1 - interpreter.part 2 - x64 jit.part 3 - llvm.part 4 - python.alive: automatic llvm instcombine verifier.graal truffel - obscure research project radically accelerate innovation programming language design.discussions: reddit. to compile continuations.interpreter, compiler jit.introducing b3 jit compiler.llvm architecture - chapter the book architecture open source applications.llvm graduate students - introduction doing research the llvm compiler infrastructure.pratt parsers: expression parsing made easy.rust compiler walk-through.rust's incremental compilation.rusts upcoming mir. memory models underlie programming languages.tutorials tutorial implementation a dependently typed lambda calculus.algorithm w step step.compiler optmization tutorial. i wrote programming language, how can too.discussions: reddit.implementing jit compiled language haskell llvm.kaleidoscope: implementing language llvm objective caml.lets build simple interpreter.lisperator - to implement programming language javascript.little lisp interpreter - interpreter supports function invocation, lambdas, lets, ifs, numbers, strings, few library functions, lists under 120 lines javascript.github repository.lis.py, v1: ( to write (lisp) interpreter ( python)) - tutorial peter norvig writing simple lisp interpreter.lis.py, v2: ((even better) lisp) interpreter ( python) - follow- tutorial peter norvig making lis.py slightly better.llvm tutorial: implementing kaleidoscope.python version llvmpy.metacompiler tutorial, part 1.project: programming language - chapter 11 the book eloquent javascript, 2nd edition.write a haskell.writing language truffel - interpreter development tutorial using truffel, cristian esquivias.community discussions we stop recommending dragon book, please? - stackexchange thread criticising dragons book favor alternatives. is difference between ll recursive descent parser?.does compiler all x86 instructions? - @hn, @reddit - article discussions hn reddit. to write compiler - article discussion reddit. to write very basic compiler. to write prolog interpreter a purely functional language.discussions: reddit.implementing type inference. want build vm, good references?.resources amatuer compilers writers. are good open source implementations java virtual machine?. are latest research trends compilers pls.tools frameworkslanguage agnosticb3: bare bones backend - webkit's optimizing jit compiler procedures containing c- code.capstone - lightweight multi-platform, multi-architecture disassembly framework bindings various famous programming languages.keystone - lightweight multi-platform, multi-architecture assembler framework bindings various famous programming languages.llilcl - llvm-based compiler backend .net core.llvm - llvm compiler-backend framework.microvm - \"mu\" framewrok programming languages development based the muvm specification.movfuscator compiler - m/o/vfuscator compiles programs \"mov\" instructions, only \"mov\" instructions.qbe: quick backend - pure c embeddable ssa-based compiler backend.rubinius - programming languages development platform.summus - basic, reusable, compiler-frontend implementation using llvm a backend.c / c++asmjit - complete x86/x64 jit remote assembler c++.gcc - gnu compiler collection (c a backend).lcc - lcc retargetable ansi c compiler (c a backend).libfirm - c-library provides graph-based intermediate representation, optimizations, assembly code generation suitable use compilers.libjit - library generic -in- compiler functionality independent any particular bytecode, language, runtime.myjit - library machine-code generation execution run-.pcc - portable c compiler (c a backend).tcc - tiny c compiler (c a backend).clrcecil - library generate inspect programs libraries the ecma cil format.ilspy - .net decompiler.reflector - .net decompiler.reflexil - assembly code editor can used a plugin other .net/clr tools.ddunnart - lalr(1) parser generator.fancypars-lite - fast parser generator.libdparse - library allowing build lexers parsers. contains lexer a parser the d language itself.llvm-d - d bindings llvm.pegged - design, test generate parsers peg grammars.goyacc - yacc implementation go. standard lalr(1) parser generator.llvm binding - official llvm binding.graalgraal - high-performance polyglot runtime.graal core - compiler truffel partial evaluator.graal vm - graal's multi-language vm distribution.haskellbound / unbound / unbound-generics - libraries manipulating bound variables.hoopl - higher-order optimization library.llvm-general - haskell bindings llvm.parsec / attoparsec / megaparsec / trifecta / alex + happy - parsers every case.wl-pprint-text / ansi-wl-pprint - walder-style pretty-printing libraries.javascriptirhudra - tool displaying intermediate representations used v8 dart vm optimizing compilers.github repo.jison - context-free grammar parser generator javascript.peg.js - simple parser generator javascript.jvmantlr - parser generator reading, processing, executing, translating structured text binary files.byaac/j - byacc/java is extension the berkeley v 1.8 yacc-compatible parser generator java.cglib - high level api library generating transforming java byte code.fcp jvm - jvm backend generating java byte code conforms the jdk v1.5+ specification the dalvik vm.javacc - java compiler construction parser generator toolkit.jflex - jflex is lexical analyzer generator java full unicode support.jlex - jlex is lexical analyzer generator, can used combination cup.kotlin whimsy compiler framework - compiler framework research project kotlin.pythonast - python's builtin abstract syntax tree package.dis - python's builtin disassembler package.parsing - pure-python module implements lr(1) parser generator, well cfsm glr parser drivers.ply - implementation lex yacc parsing tools python.pyparsing - alternative approach creating executing simple grammars, vs. traditional lex/yacc approach, the of regular expressions.rply - port the ply project rpython.rpython - rpython is framework the implementatation dynamic languages.lists python parsing toolslist language parsing tools the python wiki.survey python parsers, ned batchelder.rustcombine - parser combinator library rust.ironllvm - safe llvm bindings rust.lalrpop - lr(1) parser generator rust.nom - parser combinator framework.peg - peg parser generator.pest - peg parser generator.rls - rust language server implementation (aka rls).compilers interpreters section aims listing code projects compilers, interpreters, translators, runtimes, virtual machines the .serious projectsbabel.js - next-generation javascript compiler.chezscheme's compiler - chezscheme language compiler.eta' compiler - jvm-based compiler the eta programming language.frege's compiler - jvm-based compiler the frege programming language.gluon's compiler - embedded language compiler written rust.lily's interpreter.lua's interpreter - official lua language interperter.lua's annotated source code - annotated source code the lua programming language interpreter v5.1.4.mirah's compiler - jvm-based compiler the mirah programming language.nim's compiler.p lang - p programming language runtime.red's compiler.roslyn - .net \"roslyn\" compiler platform.typescript's compiler.wren's compiler.zig's compiler - zig language compiler.educational toy projectsblack - scheme interpreter the reflective programming language \"black\", kenichi asai's. sources: github mirror.c4 - c lang 4 functions.discussions: hn.carpvm - experimental vm implementation c.dale - lisp-flavoured c: system programming language.eschelle - open source cross platform multi-paradigm language vm & jitgecho - simple-stack language implementation c.gocaml - minimal functional programming language implementation go llvm.hython - haskell-powered python 3 interpreter.discussions: reddit.llgo - frontend llvm written go.mal's interpreter - clojure-inspired lisp interpreter implemented 64 languages.metascala - metacircular jvm implementation scala.mini-js - experimental self-hosted javascript compiler 1k loc.munvm - lua vm & compiler c.poprc - compiler the popr language.pycoolc - compiler the cool programming language written python 3.rabbitvm - risc-based vm implementation c.stack_cpu - stack-machine simulator. super tiny compiler - tiny educational compiler project javascript.discussions: hn.tinyc.c - tiny-c language compiler c.tisp - \" is space\" programming language interpreter.runtimes vmscakeml.coreclr - .net's common language runtime.erlang beam.hhvm - facebook's open source vm running hack php programs.hlvm.jvm implementations:openjdk.kaffe.jamvm - github project mirror.apache harmony. jvm runtimes.blogseli bendersky.john regehr.krister walfridsson.lambda ultimate.llvm developers' meetings.llvm weekly - weekly newsletter llvm.communities/r/compilers - subreddit community the theory development compilers./r/programminglanguages - subreddit community is dedicated discussion programming languages, programming language theory, design, syntax compilers.verticalsawesome static analysis.compiler conferences, workshops journals.languages compilers network graph.minikanren.org - papers, talks implementations minikanren microkanren.plt enlightenment.resources amateur compiler writers.ssa form bibliography.summer schools. witchcraft compiler collection.typefunc.license the extent possible under law, ahmad alhour has waived copyright related neighboring rights this .the logo was designed using textcraft."
}