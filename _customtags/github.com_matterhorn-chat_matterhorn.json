{
	"_id": "14412186",
	"site": "https://github.com/matterhorn-chat/matterhorn",
	"title": " Matterhorn, a terminal-based chat client for Mattermost",
	"author": "andolanra",
	"date": "2017-06-13T13:06:44.593Z",
	"tags": {
		"categories": [
			"chat", "system"
		],
		"languages": [
			"haskell",
			"shell"
		]
	},
	"content": "readme.md matterhorn is terminal client the mattermost chat system.quick start provide pre-built binary releases some platforms. please therelease list download binary release your platform matches server version:https://github.com/matterhorn-chat/matterhorn/releases fetch release run matterhorn, might run followingcommands (where version platform match setup):wget https://github.com/matterhorn-chat/matterhorn/releases/download/<version>/matterhorn-<version>-<platform>.tar.gztar xf matterhorn-<version>-<platform>.tar.gzcd matterhorn-<version>-<platform>./matterhorn you run matterhorn 'll prompted your server information. present matterhorn supports username/password authentication.note: version abbcc.x.y matches mattermost server version .bb.cc. example, your mattermost server version is 3.6.0 you download matterhorn version 30600.2.4. our versioningscheme details.configuring configuration options have choices:interactive configuration entered each program runconfiguration via stored settings a config file first option is useful trying the program you get and running without worrying making configuration. once're ready make settings persistent, can added a configuration file. example configuration file be found sample-config.ini. settings omitted the configuration beobtained interactively startup. looking configuration files, matterhorn preferconfig.ini the current working directory, will in typical xdg configuration directories ('ll probably to $home/.config/matterhorn/config.ini) as last resort for globally-accessible /etc/matterhorn/config.ini.using client user interface has three main areas:left: list channels 're , and list users your team their statuses (+ means online, - means away, an absent sigilmeans offline)right: messages the current channelbottom: editing area writing, editing, replying messages can built- keybindings /cmd-style commands operate client. see available keybindings commands, the defaultbinding f1 run /help command. join channel, the /join command choose a list available channels. create channel, /create-channel. leave channel, /leave-channel. see members the current channel, the /members command. send message, type into editor press enter send. send multi-line message, toggle multi-line mode the defaultbinding m-e. markdown syntax is accepted. edit current message an external editor ($editor), thedefault binding m-k. preview message 're to send (e.g. check how markdown syntax be rendered), toggle preview mode the defaultbinding m-p. change channels, /focus one the default bindings c-n(next channel), c-p (previous channel), c-g (fast channel switch). directly message another user, /focus c-g.c-g channel switching mode does substring match the input text the channel usernames; metacharacters ^ $ at beginning end input, respectively, anchor match case multiplematches. switch the channel were prior the current channel, the default binding m-s (swap). most recent channel is marked the channel list a \"<\" indicator. switch the next channel unread messages, the defaultbinding m-.to quickly show list urls mentioned the current channel thenopen in local browser, the default binding c-o configure urlopencommand configuration setting. edit, delete, reply a message, select message thedefault binding c-s. the default binding c-c cancel operations.featureschannel creation, deletion, membership management commandsoptimized channel-switching modes: m-, m-s, c-gmessage posting, editing, replying, deletionmarkdown renderingconvenient url-opening local browsersecure password entry via external command (e.g. osx keychain)yank verbatim content messages the system clipboardpreview message rendering before sendingoptional smart quoting efficient markdown entryedit messages $editormessage editor kill/yank buffer readline-style keybindingstab-completion usernames, channel names, commandsbuilding easiest to build matterhorn is use providedinstall.sh script, requires git an appropriateghc/cabal installation. will pull appropriate repos build sandbox the appropriate .if want , you also run install process manually:$ cd matterhorn$ cabal sandbox init$ cabal install$ cabal build versioning schemematterhorn version strings be the form abbcc.x.y where abbcccorresponds the mattermost server version supported the release. example, a release supports mattermost server version 1.2.3, abbcc portion the matterhorn version be 10203. x.yportion the version corresponds our own version namespace thepackage. the server version changes, x.y should 0.0. otherwise first component should increment the package undergoes major codechanges functionality changes. second component alone shouldchange if package undergoes security fixes other bug fixes.contributing you decide contribute, 's great! here are guidelines should consider make submitting patches easier all concerned: you to on big things, let's a design/visiondiscussion before start coding. create github issue we use as place hash things . we'll interested discuss usability / ui, performance, compatibility issues.please changes consistent the conventions already used the codebase.frequently asked questionsq: does matterhorn support gitlab authentication?: no. we be happy work contributors areinterested investigating this take /or implementing. see contributing section details."
}