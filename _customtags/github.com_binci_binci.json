{
	"_id": "14506141",
	"site": "https://github.com/binci/binci",
	"title": " Binci containerized development workflows with Docker",
	"author": "ksafranski",
	"date": "2017-06-13T13:04:19.968Z",
	"tags": {
		"categories": [
			"devops",
			"tools"
		],
		"languages": [
			"javascript"
		]
	},
	"content": "readme.md bincibinci is utility allows to easily containerize developmentworkflow using docker. simply put, 's having cleanroom all yourdevelopment processes contain services ( databases) without needing setup maintain environments manually.faq: why binci docker-compose?installationyarn/npmyarn global add binci npm install binci -gnote: binci requires node v.6+ run.binarieslinux (download)curl -o /usr/local/bin/binci http://binci.technologyadvice.com/linux/binci && \\chmod +x /usr/local/bin/bincimac osx (download)sudo mkdir -p /usr/local/bin && \\sudo curl -o /usr/local/bin/binci http://binci.technologyadvice.com/mac/binci && \\sudo chmod +x /usr/local/bin/binciwindows (download)download above file run the path where is saved add a directory your path.obvious note: need have docker installed well.important note: order run tasks, binci creates temp file (binci.sh). tool do best determine best location (usually /tmp), this be explicitly set specifying environment variable binci_tmp.quick start you binci installed can initialize project moving the project directory running following:binci init above prompt to enter base image; should a valid docker image.once configuration is generated can run tasks. default template includes several, example:binci env above load project via binci & docker, echo environment variables available.usagebinci is controlled a binci.yml file the root your project. basic example is shown below:: node:6services: - mongo: : mongo:3.0 env: - db_root_password=foo expose: - 27017:27017env: - tmp=${tmp}expose: - 8080:8080volumes: - ${home}/.ssh:/root/.sshhosts: - google.com:127.0.0.1before: npm install: echo \"done\"tasks: env: env | sort start: node index.js lint: npm run lint test: npm test run: node index.js above then executed via binci <task> command within same directory your project binci.yml. example, binci run perform following:pull start mongo db_root_password environment variable port 27017 exposedsets following the container:set primary container environment variable tmp the same the host machineexpose port 8080 the host systemmount host machine's .ssh directory the containerset host entry google.com 127.0.0.1run npm install inside container before running taskrun node index.js task inside containerecho done the task has completedcustom executionbinci allows executing tasks predefined the configuration file using -e flag. example:binci -e \"/bin/sh\" above start container using configuration, call before task, start sh shell. container then remain the shell until exit command is sent the user.container image ( <string>) from configuration property instructs image be used the primary instance services. testing different images easily, -f <alternate-image> argument be called during execution.servicesservices add links the primary container, exposing services utilization. the part, services utilize same format definition the primary container.container namingduring execution, service containers are named 2 ways:ephemeral (non-persisted): bc_<name>_<instance-id>persisted: <name> above naming convention allows persisted services be shared other binci instances, manually run docker containers, via --link argument. startup binci ensure persisted already running containers are started again. completion, binci run detached process will execute docker stop docker rm any non-persisted, ephemeral services.persisting servicesservices need persist between runs be set providing persist: true their configurations.persisted services not stop the primary container finishes task can used the same project, projects, independently.disabling services default, services the configuration be linked any run. disable services specific tasks, can define like :tasks: lint: disable: - mongo cmd: npm run lint start: npm startalternatively, can disable services a task '*':tasks: lint: disable: '*' cmd: npm run lint start: npm start one-off cases, individual services also disabled via command line:binci lint -d mongo all services:binci lint -d '*'binci lint --disable-container managementbinci automatically stop services any run (success fail). however, this fails some fringe-case causes process stop responding system leave orphaned containers running. order mitigate issue binci run check any bc_ prefixed containers each run. orphaned services are identified warning message appear the beginning the process indicate orphaned service(s) commands remedy/exit containers. following commands be run cleanup running containers:stop remove binci containers:binci --cleanupstop remove containers:binci --cleanup-environment variables (env <array>)setting env array items expose environment variables the primary instance services. entries be raw strings use ${var} notation, where var is environment variable the host machine use. entries should the format <env_var>=<value>expose (expose <array>)setting expose array items expose ports the host machine the primary service containers. entries should the format <container_port>:<host_port>volumes (volumes <array>)setting volumes mount volumes the host machine designated paths the primary service containers. entries should the format <host_path>:<container_path>hosts (hosts <array>)setting hosts update hosts configuration the container. entries should the format <host_name>:<address>service stop (stoptimesecs <integer>) standard procedure stopping docker container is stop command sends sigterm allows grace period (default: 10) the container exit its own. containers may exit via sigterm ( may hang). this case, service container utilize stoptimesecs property:services: - mongo: : mongo:3.0 stoptimesecs: 3 stoptimesecs above forcibly stop container 3 seconds using docker's stop command's -t option.global setting: addition setting stoptimesecs per service, property be set the root the binci.yml configuration will applied any services don't an explicit stoptimesecs property.developmenttestsbinci be run via yarn/npm scripts, is setup run development tasks using binci.ensure have latest version installed run:binci install test yarn install && yarn test.end--end tests run end--end tests run yarn run e2e. works fully emulating run inside /test/project directory executing /test/system/run.js the /test/system/tests.json definitions file.testing builds test binary builds:1. build binary:yarn run build:linux2. run (ubuntu) docker docker:docker run - --rm -v /var/run/docker.sock:/var/run/docker.sock -v $pwd:/app -w /app ubuntu sh -c \"apt- update && apt- install docker.io -y && bash\"3. create binci alias:alias binci=$pwd/bin/linux/bincionce above steps are completed binci executable be available.why binci docker compose? off, like docker compose, definitely it's powerful tool. however, binci was built compose is more long-running, containerized environment what set to build was way run ephemeral, limited-lifespan tasks without having manage cleanup between each run.compose takes approach spinning containers run, almost a virtual machine, while need . binci looks things a point view abstracting docker run command chains create single-run instance for task, shutting down doing cleanup each run is clean running off consistent base. more comparisons: binci don't need dockerfile local development, thus can it whether not project be deployed docker to bare metal.binci doesn't build docker images, ever. uses images specify both primary container any services. you install local dependencies your project folder, run build, execute coverage tool, write local files, just happens your hard disk, locked away some container. 'll available every task run. binci don't need run tasks a containerized shell, simply define tasks run . you kick tasks off any local script, build tool, ide run configuration without building container .tasks don't need be defined runtime via arguments flags, just tell binci predefined task run.licensebinci is licensed under mit license. please license.txt full details.creditsbinci was created is maintained technologyadvice."
}