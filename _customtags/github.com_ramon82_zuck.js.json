{
	"_id": "14135045",
	"site": "https://github.com/ramon82/zuck.js",
	"title": " Zuck.js, a JavaScript library that lets you add Stories everywhere",
	"author": "vegbrasil",
	"date": "2017-06-13T13:35:12.398Z",
	"tags": {
		"categories": [
			"library", "social"
		],
		"languages": [
			"javascript",
			"css",
			"html"
		]
	},
	"content": "readme.md zuck.jsadd stories everywheremwhahahaha. seriously. script is copy facebook stories a copy facebook messenger of copy whatsapp status a copy instagram stories a copy snapchat stories. can read stories any endpoint (json, firebase, etc.) the script do rest.live demo: https://.ramon82.com/2ojlr5c featureslibrary agnosticcustom themes: snapgram, facesnap, snapssenger vemdezapdesktop support (why ?)a simple media viewer, gestures events simple api manage \"stories timeline\"lightweight (5kb gzipped - 15kb minified) with 3d cube effect! to initialize:var stories = zuck({ id: '', // timeline container id reference skin: 'snapgram', // container class avatars: true, // shows user photo instead last story item preview list: false, // displays timeline instead carousel openeffect: true, // enables effect opening story - may decrease performance cubeeffect: false, // enables 3d cube effect sliding story - may decrease performance autofullscreen: false, // enables fullscreen mobile browsers backbutton: true, // adds back button close story viewer backnative: false, // uses window history enable button browsers/android stories: [ // array stories // stories structure example ], callbacks: { 'onopen': function(storyid, callback) { // open story viewer callback(); }, 'onview': function(storyid) { // view story }, 'onend': function(storyid, callback) { // end story callback(); }, 'onclose': function(storyid, callback) { // close story viewer callback(); }, 'onnextitem': function(storyid, nextstoryid, callback) { // next item story callback(); }, }, 'language': { // you need translate :) 'unmute': 'touch unmute', 'keyboardtip': 'press space see next', 'visitlink': 'visit link', '': { 'ago':'ago', 'hour':'hour', 'hours':'hours', 'minute':'minute', 'minutes':'minutes', 'fromnow': ' now', 'seconds':'seconds', 'yesterday': 'yesterday', 'tomorrow': 'tomorrow', 'days':'days' } }});add/update story:stories.update({item object});remove story:stories.remove(storyid); // story idadd/remove story item:stories.additem(storyid, {item object});stories.removeitem(storyid, itemid);stories structure example json example the stories object:{ id: \"\", // story id photo: \"\", // story photo ( user photo) name: \"\", // story name ( user name) link: \"\", // story link (useless story generated script) lastupdated: \"\", // last updated date unix format seen: false, // set true user has opened - local storage is used, don't need care this items: [ // array items // story item example { id: \"\", // item id type: \"\", // photo video length: 3, // photo timeout video length seconds - uses 3 seconds timeout images not set src: \"\", // photo video src preview: \"\", // optional - item thumbnail show the story carousel instead the story defined image link: \"\", // link click story linktext: \"\", // link text : \"\", // optional date display the story item. unix timestamp are converted \"time ago\" format seen: false // set true current user was read - local storage is used, don't need care this } ]}alternate call your html:<div id=\"stories\"> <!-- story --> <div class=\"story\" data-id=\"{{story.id}}\" data-last-updated=\"{{story.lastupdated}}\" data-photo=\"{{story.photo}}\"> < href=\"{{story.link}}\"> <span><u style=\"background-image:url({{story.photo}});\"></u><span> <span class=\"info\"> <strong>{{story.name}}</strong> <span class=\"\">{{story.lastupdated}}</span> </span> </> <ul class=\"items\"> <!-- story item --> <li data-id=\"{{story.items.id}}\" data-=\"{{story.items.}}\" class=\"{{story.items.seen}}\"> < href=\"{{story.items.src}}\" data-type=\"{{story.items.type}}\" data-length=\"{{story.items.length}}\" data-link=\"{{story.items.link}}\" data-link-text=\"{{story.items.linktext}}\"> <img src=\"{{story.items.preview}}\"> </> </li> <!--/ story item --> </ul> </div> <!--/ story --> </div> in js:var stories = zuck({{element id string element reference}}); tips with autofullscreen option (disabled default) emulate app mobile devices.limitations mobile browsers, video 't play audio without user gesture. the script tries play audio when user clicks see next story. the story is playing automatically, video is muted, an alert is displayed the user may click turn audio .stories links opens a window too. behaviour occurs most websites are blocked iframe embedding.forksthings already created zuck.js:buddypress storiessend pr list yours!next features anyone is interested contributing:aimore aichat botsultimate big collection stickers ( sure update changelog every sticker pack)anyone missing snapchat theme?something sick zuck copy - inception!anything would increase lib weight bet ember.js blow user storagehm, did say already more ai?sorry got inspired - makes so happy see laughing this, thank ! :)licensemit"
}