{
	"_id": "14425792",
	"site": "https://github.com/atomashpolskiy/bt",
	"title": " BitTorrent protocol encryption added in Bt 1.2",
	"author": "atomashpolskiy",
	"date": "2017-06-13T13:06:43.719Z",
	"tags": {
		"categories": [
			"security", "media"
		],
		"languages": [
			"java",
			"shell"
		]
	},
	"content": "readme.md bt is modern full-featured bittorrent library java 8. offers performance, reliability is highly customizable. bt is still its' early days, is actively developed designed stability maintainability mind.quick linkswebsite (contains examples tutorials)javadoc (based the latest commit master)cli launcherlist supported bepsbep-3: bittorrent protocol specificationbep-5: dht protocolbep-10: extension protocolbep-11: peer exchange (pex)bep-12: multitracker metadata extensionbep-15: udp tracker protocolbep-20: peer id conventionsbep-23: tracker returns compact peer listsbep-27: private torrentsbep-41: udp tracker protocol extensionsmessage stream encryptionbuilding sourceclone:git clone https://github.com/atomashpolskiy/bt.gitbuild:cd btmvn clean install -dskiptests=truedownload cli launcher use a library:java -xmx64m -jar bt-cli/target/bt-launcher.jar -f <path--torrent-file> -d <download-dir>usage recent version available maven central is 1.2.dht module is available 1.2 git tag (compatible bt 1.2 version) 1.3-snapshot (current master version), either which should built manually.declare following dependencies your projects pom.xml:<dependency> <groupid>com.github.atomashpolskiy</groupid> <artifactid>bt-core</artifactid> <version>${bt-version}</version></dependency><!-- the sake keeping core minimum number 3-rd party dependencies http tracker support is shipped a separate module; may omit dependency only udp trackers are going be used --><dependency> <groupid>com.github.atomashpolskiy</groupid> <artifactid>bt-http-tracker-client</artifactid> <version>${bt-version}</version></dependency><!-- bt-dht be available you've built project manually --><dependency> <groupid>com.github.atomashpolskiy</groupid> <artifactid>bt-dht</artifactid> <version>${bt-version}</version></dependency>code sample// enable multithreaded verification torrent dataconfig config = config() { @override public int getnumofhashingthreads() { return runtime.getruntime().availableprocessors() * 2; }};// enable bootstrapping public routersmodule dhtmodule = dhtmodule( dhtconfig() { @override public boolean shoulduserouterbootstrap() { return true; }});// torrent file url download directoryurl torrenturl = gettorrenturl();file targetdirectory = gettargetdirectory();// create file system based backend torrent datastorage storage = filesystemstorage(targetdirectory);// create client a private runtimebtclient client = bt.client() .config(config) .storage(storage) .torrent(torrenturl) .autoloadmodules() .module(dhtmodule) .build();// launchclient.startasync(state -> { (state.getpiecesremaining() == 0) { client.stop(); }}, 1000).join(); makes bt stand from crowdflexibilitybeing built around guice di, bt provides many options tailoring system your specific needs. something is part bt, it be modified substituted your custom code.custom backendsbt is shipped a standard file-system based backend (.e. can download torrent file a storage device). however, backend details are abstracted the message-level code. means you use own backend providing storage unit implementation.protocol extensions notable customization scenario is extending standard bittorrent protocol your own messages. bittorrent's bep-10 provides native support protocol extensions, implementation this standard is already included bt. contribute own messages, byte manipulating messagehandlers, message consumers producers; supply additional info extendedhandshake.test infrastructure allow test changes you've made the core, bt ships a specialized framework integration tests. create arbitrary-sized swarm peers inside simple junit test, set number seeders leechers start real torrent session your localhost. e.g. create seeder many leechers stress test network overhead; a really large file multiple peers stress test newest laptop's expensive ssd storage; just launch whole swarm no-files mode test protocol extensions.parallel downloadsbt has -of--box support multiple simultaneous torrent sessions minimal system overhead. 1% cpu 32m ram should enough everyone!java 8 completablefutureclient api leverages asynchronous java.util.concurrent.completablefuture provide most natural for co-ordinating multiple torrent sessions. e.g. completablefuture.allof(client1.startasync(...), client2.startasync(...), ...).join(). create more sophisticated processing pipeline. much more...check release notes details!support feedback thoughts, ideas, criticism, etc. are welcome, well votes new features beps be added. have following options share ideas, receive help report bugs:open new github issuepost question the bt forum"
}