{
	"_id": "14448685",
	"site": "https://github.com/TinyCrayon/TinyCrayon-iOS-SDK",
	"title": "TinyCrayon â€“ A smart and free image masking and cutout SDK for mobile apps",
	"author": "bingh0616",
	"date": "2017-06-13T13:55:20.914Z",
	"tags": {
		"categories": [
			"visual", "library", "mobile"
		],
		"languages": [
			"swift"
		]
	},
	"content": "readme.md tinycrayon sdk ios smart easy--use image masking cutout sdk mobile apps.tinycrayon sdk provides tools adding image cutout layer mask capabilities your mobile applications.quick select toolhair brush tooltry sample apps image eraser, color effect, focus effect.table contentsoverviewfeaturesinstallationprerequisitesstreamlined, using cocoapodsmanually, using sdk downloaddownload sdkadd frameworksettings objective-cusageadd tcmaskviewtcmask classfurther readinglicenseterms useoverviewtinycrayon sdk provides tools adding image cutout layer mask capabilities your mobile applications.image layer mask is fundamental technique image manipulations. allows to selectively modify opacity (transparency) the layer belong . this flexibility define opacity different areas a layer is basis more interesting image manipulation techniques such selective coloring luminosity masking. current version tinycrayon sdk provides following three tools:quick select: smart easy use, users need select part the object the edge detection algorithm find boundary.hair brush: smooth natual looking, paint the hair/fur an object the algorithm select hair/fur you high quality.regular brush: regular brush tool the capability adjust size, hardness opacity.featuresfree: tinycrayon sdk is provided under mit license, can it your commercial applications free!ipad support: tinycrayon sdk uses auto layout its views adapts each screen size - iphone ipad.highly customizable: style ui, view modes localized languages you wish.swift: keeping with , we chose swift the main development language the tinycrayon sdk, leading leaner easier code.objective-c support: of public api is objective-c compatible.installationprerequisitesxcode 8.0 later. physical ios device.recommended: installation cocoapods simplify dependency managementstreamlined, using cocoapodstinycrayon sdk is available via cocoapods. you're to cocoapods, getting started guide help . cocoapods is preferred simplest to the tinycrayon sdk.important: please sure you a cocoapods version >= 0.39.0 installed. can check version cocoapods pod --version.here's you to add your podfile ( you not podfile, create in project root directory):target 'myapp' pod 'tinycrayon'end run pod install your project root directory (same directory your podfile).open myapp.xcworkspace build.manually, using sdk download you don't to cocoapods can still advantage the tinycrayon sdk importing frameworks directly.download sdkdownload tinycrayon sdk zip ( is ~20mb file may some ).unzip tinycrayon.zipadd frameworkdrag tccore.framework the linked frameworks libraries section your target.drag tcmask.framework the embedded binaries section your target.settings objective-c your project is using objective-c, set always embed swift standard libraries be yes your build settings.usageadd tcmaskview tcmaskview class is responsible create uiviewcontroller the user mask image. present tcmaskview:swiftlet maskview = tcmaskview(image: image)maskview.delegate = selfmaskview.presentfrom(rootviewcontroller: self, animated: true)objective-ctcmaskview *maskview = [[tcmaskview alloc] initwithimage:image];maskview.delegate = self;[maskview presentfromrootviewcontroller:self animated:true]; delegate the tcmaskview be used be notified the user cancels completes edit. last case function tcmaskviewdidcomplete(mask:image:) is called.tcmask classtcmask is provided tcmaskviewdelegate functions the parameter the user cancels completes edit. example, the user completes edit tcmaskview:swiftfunc tcmaskviewdidcomplete(mask: tcmask, image: uiimage) {}objective-c- (void)tcmaskviewdidcompletewithmask:(tcmask *)mask image:(uiimage *)image {}tcmask is encapsulation image masking result tcmaskview, has following properties:data: array 8-bits unsigned char, length is equal the number pixels the image tcmaskview. each element data represents mask value.size: size mask, is equal the size the image tcmaskview.tcmask provides simple easy use functions process layer mask image. example, cutout object:swiftlet outputimage = mask.cutout(image: image, resize: false)objective-cuiimage *outputimage = [mask cutoutwithimage:image resize:false]; try examples, find about more options please a at examples.further readingtry sample apps image eraser, color effect, focus effect.check tinycrayon guides api reference more details.license mit licenseterms use using tinycrayon sdk, agree keep banner ad embedded tcmaskview fully viewable clickable the users."
}